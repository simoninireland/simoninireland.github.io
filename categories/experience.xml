<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simon Dobson (Posts about experience)</title><link>https://simondobson.org/</link><description></description><atom:link href="https://simondobson.org/categories/experience.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:simoninireland@gmail.com"&gt;Simon Dobson&lt;/a&gt; </copyright><lastBuildDate>Wed, 08 May 2024 15:57:24 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Lisp hackers: Interviews with 100x more productive programmers</title><link>https://simondobson.org/2024/03/23/lisp-hackers-interviews-with-100x-more-productive-programmers/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org7891f7f" class="outline-2"&gt;
&lt;h2 id="org7891f7f"&gt;Lisp hackers: Interviews with 100x more productive programmers&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7891f7f"&gt;
&lt;p class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/4f/11131f-cfc4-4d14-8fae-72c78607964b/screenshot.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Vsevolod Dyomkin.  &lt;i&gt;&lt;a href="https://leanpub.com/lisphackers"&gt;Lisp Hackers: Interviews with 100x More Productive
Programmers&lt;/a&gt;&lt;/i&gt;. Leanpub. 2013.
&lt;/p&gt;

&lt;p&gt;
I'm not convinced by the sub-title: at the very least, there's no
evidence to support the claim that Lisp programmers really are
hundreds of time more productive. But there are some serious
insights here from individuals who've made serious contributions
to the Lisp world – and beyond. The contributions all take the
form of email interviews consisting of a standard prelude of
questions (how did you discover Lisp?, do you use it at work?)
followed by a couple of questions tailored to the interviewee.
&lt;/p&gt;

&lt;p&gt;
The practitioners selected have all been affected by Lisp, either
in terms of it changing their own thought processes, or by helping
to develop the core ecosystem, or by applying Lisp to real-world
problems, and often to great effect. My favourite was the
discussion with someone who was using Common Lisp to develop
low-latency network routing for financial services: it's hard
to think of a better example of Lisp's power and range.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>experience</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/23/lisp-hackers-interviews-with-100x-more-productive-programmers/</guid><pubDate>Sat, 23 Mar 2024 14:57:08 GMT</pubDate></item><item><title>My Lisp experiences and the development of GNU Emacs</title><link>https://simondobson.org/2024/03/23/my-lisp-experiences-and-the-development-of-gnu-emacs/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org82bfee4" class="outline-2"&gt;
&lt;h2 id="org82bfee4"&gt;My Lisp experiences and the development of GNU Emacs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org82bfee4"&gt;
&lt;p&gt;
&lt;a href="https://www.gnu.org/gnu/rms-lisp.html"&gt;My Lisp Experiences and the Development of GNU Emacs&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
The never-dull Richard Stallman talks about his experiences with
Lisp and with the development of Emacs. It's got some useful
observations on &lt;i&gt;why&lt;/i&gt; Lisp became the core of Emacs: it was news to
me that this hadn't always been the case. It started with an
"editor control" language in the spirit of editors like &lt;code&gt;ed&lt;/code&gt;. But as
people wanted more support from their editor, they wanted to
program it more effectively.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
The language that you build your extensions on shouldn't be
thought of as a programming language in afterthought; it should be
designed as a programming language. In fact, we discovered that
the best programming language for that purpose was Lisp.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The result was a re-write of Emacs in C (for portability), with a
Lisp interpreter specialised towards editing tasks.
&lt;/p&gt;

&lt;p&gt;
He then gives an insider's perspective on the Lisp machines and
their evolution, as well as revealing the genesis of his ideas for
the free software movement. While these are interesting to read,
it should be noted that much of it has been rebutted: his
description of the formation and later history of the two
spin-outs, Symbolics and Lisp Machines Inc, is strongly disputed
by Dan Weinreb on &lt;a href="https://web.archive.org/web/20090101103828/http://danweinreb.org/blog/rebuttal-to-stallmans-story-about-the-formation-of-symbolics-and-lmi"&gt;his blog&lt;/a&gt;.)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>experience</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/23/my-lisp-experiences-and-the-development-of-gnu-emacs/</guid><pubDate>Sat, 23 Mar 2024 14:55:26 GMT</pubDate></item><item><title>Self-publishing "Epidemic modelling"</title><link>https://simondobson.org/2020/07/22/self-publishing/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;figure&gt;&lt;img src="https://simondobson.org/images/posts/20200722-em-book.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;I thought I should record the journey I took to self-publishing a
science book, in case anyone else decides they want to follow me on
it.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://simondobson.org/2020/07/22/self-publishing/"&gt;Read more…&lt;/a&gt; (24 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>essay</category><category>experience</category><category>self-publishing</category><guid>https://simondobson.org/2020/07/22/self-publishing/</guid><pubDate>Fri, 17 Jul 2020 17:03:14 GMT</pubDate></item></channel></rss>