<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simon Dobson (Posts about project:lisp-bibliography)</title><link>https://simondobson.org/</link><description></description><atom:link href="https://simondobson.org/categories/projectlisp-bibliography.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:simoninireland@gmail.com"&gt;Simon Dobson&lt;/a&gt; </copyright><lastBuildDate>Fri, 05 Jul 2024 10:20:51 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Let over Lambda</title><link>https://simondobson.org/2024/07/05/let-over-lambda/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orgfbf54c4" class="outline-2"&gt;
&lt;h2 id="orgfbf54c4"&gt;Let over Lambda&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfbf54c4"&gt;
&lt;p&gt;
Doug Hoyte.  &lt;i&gt;&lt;a href="http://letoverlambda.com"&gt;Let over Lambda&lt;/a&gt;&lt;/i&gt;. HCSW and Hoytech. ISBN
978-1-4357-1275-1. 2008.
&lt;/p&gt;

&lt;p&gt;
A gloriously opinionated (in the best way) take on Lisp macro
programming. The author treats Lisp – one of the first languages
– as the ultimate, &lt;i&gt;final&lt;/i&gt; language to which all others can (and
should) be translated, since they're simply special cases of Lisp
forms. And he makes a surprisingly compelling case.
&lt;/p&gt;

&lt;p&gt;
The material builds extensively on &lt;a href="/2024/07/05/on-lisp/"&gt;On Lisp&lt;/a&gt;, re-presenting the
idea of &lt;i&gt;anaphoric&lt;/i&gt; macros (those that bind lexical variables for
use in their bodies) and extending them with &lt;i&gt;pandoric&lt;/i&gt; macros
that allow introspection into an otherwise closed lexical
environment. A lot of these examples feel contrived as presented,
but the techniques are anything but: powerful ways to build
abstractions.
&lt;/p&gt;

&lt;p&gt;
The finale is the implementation of Forth in Lisp, and then a
reflection to allow Forth programs to define Lisp functions –
converting a (transparent) threaded-interpreted structure into an
(opaque) code block. It's a slightly non-standard Forth, but it's
true to the basics and exposes issues like the implementations of
interpretation, compilation, and tail recursion really well. It's
only another step to explore Lisp &lt;i&gt;implemented&lt;/i&gt; in Forth through
the medium of macro programming, which deserves a book itself.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>advanced-tutorial</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/07/05/let-over-lambda/</guid><pubDate>Fri, 05 Jul 2024 10:19:07 GMT</pubDate></item><item><title>On Lisp</title><link>https://simondobson.org/2024/07/05/on-lisp/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orgaac5f5f" class="outline-2"&gt;
&lt;h2 id="orgaac5f5f"&gt;On Lisp&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgaac5f5f"&gt;
&lt;p&gt;
Paul Graham.  &lt;i&gt;&lt;a href="http://www.paulgraham.com/onlisp.html"&gt;On Lisp: Advanced Techniques for Common Lisp&lt;/a&gt;&lt;/i&gt;. Prentice
Hall. ISBN 0-13-030552-9. 1993.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
An ideal world is left as an exercise to the reader.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
One of the most famous advanced treatments of Lisp. Essentially
it's a book in two parts. The first deals with the traditional
advanced topics of functional programming such as identifying
patterns that can be factored-out into higher-order functions and
re-used. But the second, better-known, part deals with macro
programming in extraordinary detail and with enormous creativity,
including developing macros for continuations and several embedded
languages.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>advanced-tutorial</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/07/05/on-lisp/</guid><pubDate>Fri, 05 Jul 2024 10:16:34 GMT</pubDate></item><item><title>Debugging Lisp</title><link>https://simondobson.org/2024/07/05/debugging-lisp/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orgb9a4deb" class="outline-2"&gt;
&lt;h2 id="orgb9a4deb"&gt;Debugging Lisp&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb9a4deb"&gt;
&lt;p&gt;
&lt;a href="https://malisper.me/debugging-lisp-part-1-recompilation/"&gt;Debugging Lisp&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
A four-part blog post series on debugging Lisp, covering:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Live recompilation of code from inside a debugging session,
together with re-executing changed code from within a running
stack trace&lt;/li&gt;
&lt;li&gt;Inspecting objects and interacting with traces of function calls&lt;/li&gt;
&lt;li&gt;Redefining classes, and how to ensure that existing instances
are upgraded to be compatible with the new definition&lt;/li&gt;
&lt;li&gt;Restarts, the neglected part of the condition system that
controls how programs continue after encountering errors&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
The first two are essential, and show how &lt;i&gt;different&lt;/i&gt; Lisp
programming is from using other languages. In fact it requires a
considerable mental shift to re-acquire the right reflexes for
dealing with errors and debugging in a fully interactive
environment: well, it did for me, anyway. We're not used to
interactivity in large development environments. There is seldom
any need to close down a running Lisp session and start again, as
everything can usually be changed and adapted within a session.
This is very unlike the usual compile-edit-debug cycles we've
become accustomed to.
&lt;/p&gt;

&lt;p&gt;
The third post – on redefining classes – shows how one can
upgrade a program that simply &lt;i&gt;has&lt;/i&gt; to keep running, because its
live state upgrade can be programmed too.
&lt;/p&gt;

&lt;p&gt;
The most significant part of the mental shift is to realise that
the debugger is written in Lisp itself, and makes use of restarts
and other features to provide the interface. This is a consequence
of the degree of exposure of the Lisp run-time structures into to
language itself, where they can be examined and manipulated using
the full power of the language – and then be re-started or
discarded as required.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>advanced-tutorial</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/07/05/debugging-lisp/</guid><pubDate>Fri, 05 Jul 2024 10:14:22 GMT</pubDate></item><item><title>Pascal Costanza's highly opinionated guide to Lisp</title><link>https://simondobson.org/2024/05/27/pascal-costanza1s-highly-opinionated-guide-to-lisp/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org9a991ba" class="outline-2"&gt;
&lt;h2 id="org9a991ba"&gt;Pascal Costanza's highly opinionated guide to Lisp&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9a991ba"&gt;
&lt;p&gt;
&lt;a href="https://www.p-cos.net/lisp/guide.html"&gt;Pascal Costanza's Highly Opinionated Guide to Lisp&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Part introduction, part paean to the language's power, part study
guide, while dipping into an eclectically-chosen subset of Lisp
features that really illustrate what makes it different.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>experience</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/05/27/pascal-costanza1s-highly-opinionated-guide-to-lisp/</guid><pubDate>Mon, 27 May 2024 16:04:50 GMT</pubDate></item><item><title>A road to Common Lisp</title><link>https://simondobson.org/2024/05/27/a-road-to-common-lisp/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orga7343e8" class="outline-2"&gt;
&lt;h2 id="orga7343e8"&gt;A road to Common Lisp&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga7343e8"&gt;
&lt;p&gt;
&lt;a href="https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/"&gt;A Road to Common Lisp&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
This a really brief, yet really interesting, approach to
introducing Lisp to someone. Interesting because it covers all the
usual ground, but also has copious pointers to other material
slightly-beyond-introductory ("Where to go from here"). It also
links to material that's essential to modern practice, such as
Lisp packages and systems, and the essential "standard libraries"
such as Alexandria, Bordeaux, CL-PPCRE, usocket, and the like: the
things that are needed in practice and which in other languages
would probably be built-in and included directly in an
introduction.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>lisp</category><category>project:lisp-bibliography</category><category>tutorial</category><guid>https://simondobson.org/2024/05/27/a-road-to-common-lisp/</guid><pubDate>Mon, 27 May 2024 16:00:55 GMT</pubDate></item><item><title>Loving Common Lisp, or the savvy programmer's secret weapon</title><link>https://simondobson.org/2024/04/02/loving-common-lisp-or-the-savvy-programmers-secret-weapon/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org1b914c8" class="outline-2"&gt;
&lt;h2 id="org1b914c8"&gt;Loving Common Lisp, or the savvy programmer's secret weapon&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1b914c8"&gt;
&lt;p class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/7a/bd1498-3024-4f11-91a7-97f3e99084d7/screenshot.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Mark Watson.  &lt;i&gt;&lt;a href="https://leanpub.com/lovinglisp"&gt;Loving Common Lisp, or the Savvy Programmer’s Secret
Weapon&lt;/a&gt;&lt;/i&gt;. Leanpub. 2023.
&lt;/p&gt;

&lt;p&gt;
While pitched as a way of sharing the author's enthusiasm for Lisp
(which really shines through), this book is really a deep
demonstration in using Lisp in modern applications – from web
APIs and the semantic web to deep learning, large language models,
and chatbots.
&lt;/p&gt;

&lt;p&gt;
In some ways, like many other Lisp books, it's really two books in
one. The first chapters are introductory – and to be perfectly
honest could be dispensed with, as they're inadequate as a proper
introduction and there are far better introductions out there. The
later chapters focus on applications, and provide the real value.
One could criticise them as often tying-together tools in other
languages, with the Lisp code basically being glue; but that's a
very effective way of leveraging all the code and services out
there, and is an important technique for Lisp programmers too.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>applications</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/04/02/loving-common-lisp-or-the-savvy-programmers-secret-weapon/</guid><pubDate>Tue, 02 Apr 2024 15:57:38 GMT</pubDate></item><item><title>Lisp in space</title><link>https://simondobson.org/2024/04/02/lisp-in-space/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org5458425" class="outline-2"&gt;
&lt;h2 id="org5458425"&gt;Lisp in space&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5458425"&gt;
&lt;p&gt;
&lt;a href="https://corecursive.com/lisp-in-space-with-ron-garret/"&gt;Lisp in space&lt;/a&gt; (podcast, 38 minutes)
&lt;/p&gt;

&lt;p&gt;
An interview on the Corecursive podcast with Ron Garret.
&lt;/p&gt;

&lt;p&gt;
In 1988 (when, for context, I was in the second year of my BSc)
Garret started working on autonomous navigation software for
&lt;a href="https://en.wikipedia.org/wiki/Sojourner_(rover)"&gt;Sojourner&lt;/a&gt;, NASA's first Mars rover, which flew in 1997. He used Lisp
to do planning, essentially developing an entire domain-specific
language for autonomous vehicles. The project was never flown, as
NASA opted for a far less ambitious approach to driving to rovers –
a decision that Garret now considers to have been the correct one.
&lt;/p&gt;

&lt;p&gt;
But that isn't the end of the story, because Garret then went on
to develop an autonomous Remote Agent controller for the &lt;a href="https://en.wikipedia.org/wiki/Deep_Space_1"&gt;Deep
Space 1&lt;/a&gt; technology demonstration mission that performed asteroid
and comet fly-bys. Without spoiling to story, the spacecraft flies
with a full Lisp system onboard, and Garret gets to interact with
its REPL at a distance of 30 light-minutes &lt;i&gt;via&lt;/i&gt; the Deep Space
Network – surely the longest latency of any REPL session ever!
&lt;/p&gt;

&lt;p&gt;
It's an fascinating insight into both the potentials of Lisp and
the political difficulties that using a non-standard development
language can engender.
&lt;/p&gt;

&lt;p&gt;
UPDATE 2024-05-16: Ron also wrote a &lt;a href="https://flownet.com/gat/jpl-lisp.html"&gt;short essay&lt;/a&gt; about his
experiences.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>applications</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/04/02/lisp-in-space/</guid><pubDate>Tue, 02 Apr 2024 15:32:56 GMT</pubDate></item><item><title>Lisp hackers: Interviews with 100x more productive programmers</title><link>https://simondobson.org/2024/03/23/lisp-hackers-interviews-with-100x-more-productive-programmers/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orgd65153e" class="outline-2"&gt;
&lt;h2 id="orgd65153e"&gt;Lisp hackers: Interviews with 100x more productive programmers&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd65153e"&gt;
&lt;p class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/4f/11131f-cfc4-4d14-8fae-72c78607964b/screenshot.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Vsevolod Dyomkin.  &lt;i&gt;&lt;a href="https://leanpub.com/lisphackers"&gt;Lisp Hackers: Interviews with 100x More Productive
Programmers&lt;/a&gt;&lt;/i&gt;. Leanpub. 2013.
&lt;/p&gt;

&lt;p&gt;
I'm not convinced by the sub-title: at the very least, there's no
evidence to support the claim that Lisp programmers really are
hundreds of time more productive. But there are some serious
insights here from individuals who've made serious contributions
to the Lisp world – and beyond. The contributions all take the
form of email interviews consisting of a standard prelude of
questions (how did you discover Lisp?, do you use it at work?)
followed by a couple of questions tailored to the interviewee.
&lt;/p&gt;

&lt;p&gt;
The practitioners selected have all been affected by Lisp, either
in terms of it changing their own thought processes, or by helping
to develop the core ecosystem, or by applying Lisp to real-world
problems, and often to great effect. My favourite was the
discussion with someone who was using Common Lisp to develop
low-latency network routing for financial services: it's hard
to think of a better example of Lisp's power and range.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>experience</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/23/lisp-hackers-interviews-with-100x-more-productive-programmers/</guid><pubDate>Sat, 23 Mar 2024 14:57:08 GMT</pubDate></item><item><title>My Lisp experiences and the development of GNU Emacs</title><link>https://simondobson.org/2024/03/23/my-lisp-experiences-and-the-development-of-gnu-emacs/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orgc8bb5fb" class="outline-2"&gt;
&lt;h2 id="orgc8bb5fb"&gt;My Lisp experiences and the development of GNU Emacs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc8bb5fb"&gt;
&lt;p&gt;
&lt;a href="https://www.gnu.org/gnu/rms-lisp.html"&gt;My Lisp Experiences and the Development of GNU Emacs&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
The never-dull Richard Stallman talks about his experiences with
Lisp and with the development of Emacs. It's got some useful
observations on &lt;i&gt;why&lt;/i&gt; Lisp became the core of Emacs: it was news to
me that this hadn't always been the case. It started with an
"editor control" language in the spirit of editors like &lt;code&gt;ed&lt;/code&gt;. But as
people wanted more support from their editor, they wanted to
program it more effectively.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
The language that you build your extensions on shouldn't be
thought of as a programming language in afterthought; it should be
designed as a programming language. In fact, we discovered that
the best programming language for that purpose was Lisp.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The result was a re-write of Emacs in C (for portability), with a
Lisp interpreter specialised towards editing tasks.
&lt;/p&gt;

&lt;p&gt;
He then gives an insider's perspective on the Lisp machines and
their evolution, as well as revealing the genesis of his ideas for
the free software movement. While these are interesting to read,
it should be noted that much of it has been rebutted: his
description of the formation and later history of the two
spin-outs, Symbolics and Lisp Machines Inc, is strongly disputed
by Dan Weinreb on &lt;a href="https://web.archive.org/web/20090101103828/http://danweinreb.org/blog/rebuttal-to-stallmans-story-about-the-formation-of-symbolics-and-lmi"&gt;his blog&lt;/a&gt;.)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>experience</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/23/my-lisp-experiences-and-the-development-of-gnu-emacs/</guid><pubDate>Sat, 23 Mar 2024 14:55:26 GMT</pubDate></item><item><title>How Lisp is designing nanotechnology</title><link>https://simondobson.org/2024/03/15/how-lisp-is-designing-nanotechnology/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orgfc2e383" class="outline-2"&gt;
&lt;h2 id="orgfc2e383"&gt;How Lisp is designing nanotechnology&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfc2e383"&gt;
&lt;p&gt;
&lt;a href="https://www.youtube.com/watch?v=fytGL8vzGeQ"&gt;How Lisp is designing nanotechnology&lt;/a&gt; (video, 52 minutes).
&lt;/p&gt;

&lt;p&gt;
An interview on the &lt;a href="https://www.youtube.com/@DeveloperVoices"&gt;Developer Voices&lt;/a&gt; podcast with &lt;a href="https://www.schafmeistergroup.com/"&gt;Prof Christian
Schafmeister&lt;/a&gt; on designing enzymes using a custom dialect of Lisp
to control computational chemistry libraries.
&lt;/p&gt;

&lt;p&gt;
He initially started from an idea based on CAD applications
(written in Smalltalk), but rapidly realised there were too many
possible components and combinations to work with graphically and
so started treating it as a language-design problem – and
designed a custom Lisp based on &lt;a href="https://ecl.common-lisp.dev/"&gt;ECL&lt;/a&gt;. Lisp provides simplicity and
efficiency, as well as being a "forever" language in which
software keeps working over the long term.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>applications</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/15/how-lisp-is-designing-nanotechnology/</guid><pubDate>Fri, 15 Mar 2024 19:19:15 GMT</pubDate></item></channel></rss>