<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simon Dobson (Posts about project:lisp-bibliography)</title><link>https://simondobson.org/</link><description></description><atom:link href="https://simondobson.org/categories/projectlisp-bibliography.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:simoninireland@gmail.com"&gt;Simon Dobson&lt;/a&gt; </copyright><lastBuildDate>Mon, 26 Aug 2024 16:33:15 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Metacircular Semantics for Common Lisp Special Forms</title><link>https://simondobson.org/2024/08/02/metacircular-semantics-for-common-lisp-special-forms/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org003e69b" class="outline-2"&gt;
&lt;h2 id="org003e69b"&gt;Metacircular Semantics for Common Lisp Special Forms&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org003e69b"&gt;
&lt;p&gt;
Henry G. Baker. &lt;i&gt;&lt;a href="https://doi.org/10.1145/382126.382662"&gt;Metacircular Semantics for Common Lisp Special Forms&lt;/a&gt;&lt;/i&gt;.
ACM SIGPLAN Lisp Pointers &lt;b&gt;V&lt;/b&gt;, pp.11–20. 1992.
&lt;/p&gt;

&lt;p&gt;
A response to the criticisms of McCarthy's semantics for Common
Lisp that it didn't specify the behaviours of special forms, and
of the standardisation process of adopting prose definitions that
are too "lawyerly" for engineering.
&lt;/p&gt;

&lt;p&gt;
The approach is to define the special forms in terms of other
constructions, for example &lt;code&gt;if&lt;/code&gt; in terms of nested lambda
abstractions to prevent execution of the unwanted branch. This is
both useful for understanding and a way of minimising the number
of under-defined special forms.
&lt;/p&gt;

&lt;p&gt;
It suggests treating &lt;code&gt;catch&lt;/code&gt; / &lt;code&gt;throw&lt;/code&gt; as basic, both because other
control-transfer forms can be expressed sing them and because it
emphasises the interactions that preclude Common Lisp having
continuations like Scheme's. However there's also an argument
pursued that some other structures (like &lt;code&gt;values&lt;/code&gt;) provide extra
information that can be useful for compilers looking to optimise.
It's a deep exploration of the underpinnings of the language from
both theoretical and practical perspectives.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>history</category><category>lisp</category><category>project:lisp-bibliography</category><category>semantics</category><guid>https://simondobson.org/2024/08/02/metacircular-semantics-for-common-lisp-special-forms/</guid><pubDate>Fri, 02 Aug 2024 10:29:45 GMT</pubDate></item><item><title>Casting SPELs in Lisp</title><link>https://simondobson.org/2024/08/02/casting-spels-in-lisp/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org8bdeee5" class="outline-2"&gt;
&lt;h2 id="org8bdeee5"&gt;Casting SPELs in Lisp&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8bdeee5"&gt;
&lt;p&gt;
&lt;a href="https://www.lisperati.com/casting.html"&gt;https://www.lisperati.com/casting.html&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
A tongue-in-cheek – but still excellent – comicbook-style
introduction to Lisp programming. (There's also a version
&lt;a href="https://www.lisperati.com/casting-spels-emacs/html/casting-spels-emacs-1.html"&gt;specifically for Emacs Lisp&lt;/a&gt;.) It's structured around building an
adventure-style game, which as well as being a classic also offers
lots of opportunities for exploring different data structures and
algorithms: one can easily imagine expanding it to include (for
example) an AI second player or autonomous non-player characters
and gradually building a really complicated application from a
standing start.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>lisp</category><category>project:lisp-bibliography</category><category>tutorial</category><guid>https://simondobson.org/2024/08/02/casting-spels-in-lisp/</guid><pubDate>Fri, 02 Aug 2024 10:25:53 GMT</pubDate></item><item><title>The art of the metaobject protocol</title><link>https://simondobson.org/2024/07/23/the-art-of-the-metaobject-protocol/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org1b63828" class="outline-2"&gt;
&lt;h2 id="org1b63828"&gt;The art of the metaobject protocol&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1b63828"&gt;
&lt;p width="300" class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/70/6116bf-244d-4faa-a1d7-2797a2d76223/aotmop.jpg" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Gregor Kiczales, Jim des Rivières, and Daniel Bobrow.  &lt;i&gt;The Art of the
Metaobject Protocol&lt;/i&gt;. MIT Press. 1991.
&lt;/p&gt;


&lt;p&gt;
What &lt;i&gt;is&lt;/i&gt; a meta-object protocol? – or indeed a meta-object? This
book is perhaps the clearest exposition of these ideas.
&lt;/p&gt;

&lt;p&gt;
In most modern object-oriented languages an object is an instance
of a class. In keeping with using objects throughout, classes are
often also objects (or can be thought of as such), but are more
informatively thought of as &lt;b&gt;meta-objects&lt;/b&gt; that to facilitate the
construction of "real" objects. The methods on classes can also be
thought of as meta-objects defining the code executed by the
objects when invoked.
&lt;/p&gt;

&lt;p&gt;
The defining feature of CLOS is that these meta-objects are all
just Lisp objects, but objects that exist "off-stage" (to use this
book's very intuitive metaphor) and largely invisible to a basic
user. But they're as available to a power user as any other
objects: the "meta"-ness is a matter of design, not of
implementation. The interactions between objects and meta-objects,
for example which methods are called when invoked on a particular
object, are defined by the meta-object protocol (MOP), which is
itself defined in terms of methods on the meta-objects that shadow
the objects themselves.
&lt;/p&gt;

&lt;p&gt;
(Meta-object &lt;i&gt;protocol&lt;/i&gt; uses a term common in a lot of the earlier
object-oriented literature to mean a collection of functions:
meta-object &lt;i&gt;API&lt;/i&gt; would be a more modern rendering, although the
protocol includes the sequencing of API calls and their
relationships.)
&lt;/p&gt;

&lt;p&gt;
The goal of MOP programming is to let the programmer extend the
programming language towards to application domain, by automating
a lot of boilerplate code and providing the structures needed to
re-structure or analyse the code the programmer actually needs to
write. In this sense it's a continuation of the idea of macros as
powerful and potentially very domain-specific language and
compiler extensions. It's also a continuation of reifying
underlying language mechanisms in the language itself where they
can be re-specified and re-mixed.
&lt;/p&gt;

&lt;p&gt;
The first part of the book explains MOPs by defining a slightly
simplified version of CLOS ("Closette"). It assumes the reader
knows some CLOS, for example from &lt;a href="/2024/07/23/object-oriented-programming-on-common-lisp-a-programmer1s-guide-to-clos/"&gt;Object-oriented
programming on Common Lisp: A programmer's guide to CLOS&lt;/a&gt; (or
there's a stand-alone introduction in Appendix A), but it &lt;i&gt;only&lt;/i&gt;
assumes the knowledge level of a relative newcomer – and the
features then defined in Closette are just those parts of CLOS
that such a user would actually know and be comfortable with,
which is a brilliant piece of pedagogy that simplifies without
trivialising. It's really noticeable that Closette doesn't need
any extensions to Common Lisp: it's defined directly in the
language itself, which shows how powerful the underlying language
is. (Full CLOS requires a bit of language support too, at least
for efficiency.)
&lt;/p&gt;

&lt;p&gt;
Next come several examples of MOP usage, for example to re-define
how classes store their slots, or how to add attributes to slots
that can store metadata about their use or could be used to
provide higher-level operations. There's also a long discussion
about protocol design and how this has a massive impact on how
easy a system is to use for the programmer.
&lt;/p&gt;

&lt;p&gt;
The second part is a manual for the CLOS MOP, which is thorough
and useful, but perhaps less exciting than the first part. The
Common Lisp package &lt;a href="https://github.com/pcostanza/closer-mop"&gt;closer-mop&lt;/a&gt; provides this API as a
portable compatibility layer for use in real programs.
&lt;/p&gt;

&lt;p&gt;
There's also a discussion of practicalities like where awkward
circularities occur and how to break them, which is actually a
great example how to do good protocol/API design. In an example of
&lt;a href="/2024/07/23/the-roots-of-lisp/"&gt;Paul Graham's dictum&lt;/a&gt; that modern languages evolve by mixing Lisp
concepts into a different base, MOP ideas appear in lots of other
languages, either for real (Smalltalk, at to a lesser extent
&lt;a href="https://blog.ionelmc.ro/2015/02/09/understanding-python-metaclasses/"&gt;Python&lt;/a&gt;) or just for introspection (Java). Even someone not
planning on writing Lisp would benefit from reading this book just
to see the ideas in their full generality.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>lisp</category><category>oo</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/07/23/the-art-of-the-metaobject-protocol/</guid><pubDate>Tue, 23 Jul 2024 08:13:16 GMT</pubDate></item><item><title>Object-oriented programming on Common Lisp: A programmer's guide to CLOS</title><link>https://simondobson.org/2024/07/23/object-oriented-programming-on-common-lisp-a-programmer1s-guide-to-clos/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org1c558c9" class="outline-2"&gt;
&lt;h2 id="org1c558c9"&gt;Object-oriented programming on Common Lisp: A programmer's guide to CLOS&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1c558c9"&gt;
&lt;p class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/41/584da1-ef33-41dd-8091-43c3999f6451/clos.jpg" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Sonja Keene.  &lt;i&gt;Object-Oriented Programming in Common Lisp: A
Programmer’s Guide to CLOS&lt;/i&gt;. Addison-Wesley. ISBN 0-201-17589-4. 1989.
&lt;/p&gt;

&lt;p&gt;
The definitive practical guide to using the Common Lisp Object
System (CLOS). It's written from a similar perspective to other
object-oriented tutorials, which makes it very accessible for
those who've had experience with something like Java or Python.
However, CLOS &lt;i&gt;isn't&lt;/i&gt; just objects in Lisp, and &lt;i&gt;isn't&lt;/i&gt; in any sense
just an object-oriented extension. It can take some time to change
mindset enough to use it properly, and this book is a great guide
to the core differences.
&lt;/p&gt;

&lt;p&gt;
Firstly, it follows a completely different model of how to
associate functions with data. Instead CLOS uses "generic"
functions, where the exact code called is dispatched dynamically
based on the types of any or all parameters: so it's perfectly
possible to have several definitions of the &lt;i&gt;same&lt;/i&gt; generic function
operating on objects of the &lt;i&gt;same&lt;/i&gt; class, but taking arguments of
&lt;i&gt;different&lt;/i&gt; types. This &lt;i&gt;multiple dispatch&lt;/i&gt; is a lot more flexible.
&lt;/p&gt;

&lt;p&gt;
The second point actually follows from this. CLOS' generic
functions can be defined to &lt;i&gt;any&lt;/i&gt; Lisp types: in fact they're not
statically associated with classes at all, and can operate on &lt;i&gt;any&lt;/i&gt;
types (classes or not) across the type hierarchy. This makes it
closer to Haskell's type classes than to Smalltalk's (or Java's)
virtual methods, which are strongly bound to classes.
&lt;/p&gt;

&lt;p&gt;
Thirdly, CLOS methods can be combined in a range of interesting
ways, not simply by overriding previous definitions – and indeed
you can define your own if you need to. And like Smalltalk
(but unlike Java) CLOS classes have "metaclasses" that can
re-define their basic functions. &lt;a href="/2024/07/23/the-art-of-the-metaobject-protocol"&gt;The art of the metaobject protocol&lt;/a&gt;
is a better source for this level of detail.
&lt;/p&gt;

&lt;p&gt;
The examples in the book delve into these features by means of
sensibly-sized challenges that can be used to illustrate both
basic design and implementation. and more advanced ideas like
re-defining classes on the fly.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>lisp</category><category>oo</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/07/23/object-oriented-programming-on-common-lisp-a-programmer1s-guide-to-clos/</guid><pubDate>Tue, 23 Jul 2024 08:03:11 GMT</pubDate></item><item><title>The roots of Lisp</title><link>https://simondobson.org/2024/07/23/the-roots-of-lisp/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org0318c4d" class="outline-2"&gt;
&lt;h2 id="org0318c4d"&gt;The roots of Lisp&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0318c4d"&gt;
&lt;p&gt;
&lt;a href="http://www.paulgraham.com/rootsoflisp.html"&gt;http://www.paulgraham.com/rootsoflisp.html&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
(Only has an PostScript version, but a PDF is available
&lt;a href="https://languagelog.ldc.upenn.edu/myl/llog/jmc.pdf"&gt;here&lt;/a&gt;.)
&lt;/p&gt;

&lt;p&gt;
Re-visits McCarthy's discoveries (or inventions, depending on
your point of view), translating the &lt;a href="/2024/03/07/recursive-functions-of-symbolic-expressions-and-their-computation-by-machine-part-i/"&gt;earliest work&lt;/a&gt; into modern
Lisp notation.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
It's worth understanding what McCarthy discovered, not just as a
landmark in the history of computers, but as a model for what
programming is tending to become in our own time. It seems to me that
there have been two really clean, consistent models of programming so
far: the C model and the Lisp model. These two seem points of high
ground, with swampy lowlands between them. As computers have grown
more powerful, the new languages being developed have been moving
steadily toward the Lisp model. A popular recipe for new programming
languages in the past 20 years has been to take the C model of
computing and add to it, piecemeal, parts taken from the Lisp model,
like runtime typing and garbage collection.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Does a great job of making the central insights accessible,
including re-phrasing the meta-circular Lisp interpreter so as to
be executable in modern Common Lisp.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>history</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/07/23/the-roots-of-lisp/</guid><pubDate>Tue, 23 Jul 2024 08:00:41 GMT</pubDate></item><item><title>Let over Lambda</title><link>https://simondobson.org/2024/07/05/let-over-lambda/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orged90f8a" class="outline-2"&gt;
&lt;h2 id="orged90f8a"&gt;Let over Lambda&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orged90f8a"&gt;
&lt;p class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/4d/e4b9aa-2377-42e7-a3e1-aa66a129c7ee/lol.jpg" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Doug Hoyte.  &lt;i&gt;&lt;a href="http://letoverlambda.com"&gt;Let over Lambda&lt;/a&gt;&lt;/i&gt;. HCSW and Hoytech. ISBN
978-1-4357-1275-1. 2008.
&lt;/p&gt;

&lt;p&gt;
A gloriously opinionated (in the best way) take on Lisp macro
programming. The author treats Lisp – one of the first languages
– as the ultimate, &lt;i&gt;final&lt;/i&gt; language to which all others can (and
should) be translated, since they're simply special cases of Lisp
forms. And he makes a surprisingly compelling case.
&lt;/p&gt;

&lt;p&gt;
The material builds extensively on &lt;a href="/2024/07/05/on-lisp/"&gt;On Lisp&lt;/a&gt;, re-presenting the
idea of &lt;i&gt;anaphoric&lt;/i&gt; macros (those that bind lexical variables for
use in their bodies) and extending them with &lt;i&gt;pandoric&lt;/i&gt; macros
that allow introspection into an otherwise closed lexical
environment. A lot of these examples feel contrived as presented,
but the techniques are anything but: powerful ways to build
abstractions.
&lt;/p&gt;

&lt;p&gt;
The finale is the implementation of Forth in Lisp, and then a
reflection to allow Forth programs to define Lisp functions –
converting a (transparent) threaded-interpreted structure into an
(opaque) code block. It's a slightly non-standard Forth, but it's
true to the basics and exposes issues like the implementations of
interpretation, compilation, and tail recursion really well. It's
only another step to explore Lisp &lt;i&gt;implemented&lt;/i&gt; in Forth through
the medium of macro programming, which deserves a book itself.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>advanced-tutorial</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/07/05/let-over-lambda/</guid><pubDate>Fri, 05 Jul 2024 10:19:07 GMT</pubDate></item><item><title>On Lisp</title><link>https://simondobson.org/2024/07/05/on-lisp/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orgaac5f5f" class="outline-2"&gt;
&lt;h2 id="orgaac5f5f"&gt;On Lisp&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgaac5f5f"&gt;
&lt;p&gt;
Paul Graham.  &lt;i&gt;&lt;a href="http://www.paulgraham.com/onlisp.html"&gt;On Lisp: Advanced Techniques for Common Lisp&lt;/a&gt;&lt;/i&gt;. Prentice
Hall. ISBN 0-13-030552-9. 1993.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
An ideal world is left as an exercise to the reader.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
One of the most famous advanced treatments of Lisp. Essentially
it's a book in two parts. The first deals with the traditional
advanced topics of functional programming such as identifying
patterns that can be factored-out into higher-order functions and
re-used. But the second, better-known, part deals with macro
programming in extraordinary detail and with enormous creativity,
including developing macros for continuations and several embedded
languages.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>advanced-tutorial</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/07/05/on-lisp/</guid><pubDate>Fri, 05 Jul 2024 10:16:34 GMT</pubDate></item><item><title>Debugging Lisp</title><link>https://simondobson.org/2024/07/05/debugging-lisp/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orgb9a4deb" class="outline-2"&gt;
&lt;h2 id="orgb9a4deb"&gt;Debugging Lisp&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb9a4deb"&gt;
&lt;p&gt;
&lt;a href="https://malisper.me/debugging-lisp-part-1-recompilation/"&gt;Debugging Lisp&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
A four-part blog post series on debugging Lisp, covering:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Live recompilation of code from inside a debugging session,
together with re-executing changed code from within a running
stack trace&lt;/li&gt;
&lt;li&gt;Inspecting objects and interacting with traces of function calls&lt;/li&gt;
&lt;li&gt;Redefining classes, and how to ensure that existing instances
are upgraded to be compatible with the new definition&lt;/li&gt;
&lt;li&gt;Restarts, the neglected part of the condition system that
controls how programs continue after encountering errors&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
The first two are essential, and show how &lt;i&gt;different&lt;/i&gt; Lisp
programming is from using other languages. In fact it requires a
considerable mental shift to re-acquire the right reflexes for
dealing with errors and debugging in a fully interactive
environment: well, it did for me, anyway. We're not used to
interactivity in large development environments. There is seldom
any need to close down a running Lisp session and start again, as
everything can usually be changed and adapted within a session.
This is very unlike the usual compile-edit-debug cycles we've
become accustomed to.
&lt;/p&gt;

&lt;p&gt;
The third post – on redefining classes – shows how one can
upgrade a program that simply &lt;i&gt;has&lt;/i&gt; to keep running, because its
live state upgrade can be programmed too.
&lt;/p&gt;

&lt;p&gt;
The most significant part of the mental shift is to realise that
the debugger is written in Lisp itself, and makes use of restarts
and other features to provide the interface. This is a consequence
of the degree of exposure of the Lisp run-time structures into to
language itself, where they can be examined and manipulated using
the full power of the language – and then be re-started or
discarded as required.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>advanced-tutorial</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/07/05/debugging-lisp/</guid><pubDate>Fri, 05 Jul 2024 10:14:22 GMT</pubDate></item><item><title>Pascal Costanza's highly opinionated guide to Lisp</title><link>https://simondobson.org/2024/05/27/pascal-costanza1s-highly-opinionated-guide-to-lisp/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org9a991ba" class="outline-2"&gt;
&lt;h2 id="org9a991ba"&gt;Pascal Costanza's highly opinionated guide to Lisp&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9a991ba"&gt;
&lt;p&gt;
&lt;a href="https://www.p-cos.net/lisp/guide.html"&gt;Pascal Costanza's Highly Opinionated Guide to Lisp&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Part introduction, part paean to the language's power, part study
guide, while dipping into an eclectically-chosen subset of Lisp
features that really illustrate what makes it different.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>experience</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/05/27/pascal-costanza1s-highly-opinionated-guide-to-lisp/</guid><pubDate>Mon, 27 May 2024 16:04:50 GMT</pubDate></item><item><title>A road to Common Lisp</title><link>https://simondobson.org/2024/05/27/a-road-to-common-lisp/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orga7343e8" class="outline-2"&gt;
&lt;h2 id="orga7343e8"&gt;A road to Common Lisp&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga7343e8"&gt;
&lt;p&gt;
&lt;a href="https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/"&gt;A Road to Common Lisp&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
This a really brief, yet really interesting, approach to
introducing Lisp to someone. Interesting because it covers all the
usual ground, but also has copious pointers to other material
slightly-beyond-introductory ("Where to go from here"). It also
links to material that's essential to modern practice, such as
Lisp packages and systems, and the essential "standard libraries"
such as Alexandria, Bordeaux, CL-PPCRE, usocket, and the like: the
things that are needed in practice and which in other languages
would probably be built-in and included directly in an
introduction.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>lisp</category><category>project:lisp-bibliography</category><category>tutorial</category><guid>https://simondobson.org/2024/05/27/a-road-to-common-lisp/</guid><pubDate>Mon, 27 May 2024 16:00:55 GMT</pubDate></item></channel></rss>