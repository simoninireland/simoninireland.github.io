<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simon Dobson (Posts about linux)</title><link>https://simondobson.org/</link><description></description><atom:link href="https://simondobson.org/categories/linux.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:simoninireland@gmail.com"&gt;Simon Dobson&lt;/a&gt; </copyright><lastBuildDate>Sat, 10 Feb 2024 13:21:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Local email from Office365 using OAUTH2 with mbsync</title><link>https://simondobson.org/2024/02/03/getting-email/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org2db2af5" class="outline-2"&gt;
&lt;h2 id="org2db2af5"&gt;Local email from Office365 using OAUTH2 with &lt;code&gt;mbsync&lt;/code&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2db2af5"&gt;
&lt;p&gt;
I decided recently I wanted to have a more controlled email setup,
with a local archive rather than relying on remote servers
to keep everything. The point of this is twofold:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;To have a local archive of email, separate from the corporate
servers in case I need to change provider etc&lt;/li&gt;
&lt;li&gt;To use different MUAs locally, rather than being stuck with only
a few that will work with all the providers and that are clunky
and not well-integrated with my workflow&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
There's a lot of outdated information on the web about how to set
this up and it took some time for me to get a working setup, so I
thought I'd share my experience. Specifically this involves
interfacing command-line email receiving and sending to a Microsoft
Office365 server using IMAP and SMTP with corporate-grade OAUTH2 2FA
authentication: it's the last part that's tricky. As a bonus the
same approach also works for OAUTH2 and Gmail, dispensing with
insecure application passwords.
&lt;/p&gt;

&lt;p&gt;
In case it's not obvious by now, this is a hacker set-up that
requires quite a lot of technical manual configuration.
&lt;/p&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgc164d4a" class="outline-3"&gt;
&lt;h3 id="orgc164d4a"&gt;How the internet email architecture works&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc164d4a"&gt;
&lt;p&gt;
The old-school approach to email involves several elements, each
potentially provided by a different tool:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;a client program or &lt;i&gt;mail user agent&lt;/i&gt; (MUA) that presents email
to you and lets you search, delete, store, etc;&lt;/li&gt;
&lt;li&gt;a retrieval program or &lt;i&gt;mail delivery agent&lt;/i&gt; (MDA) that retrieves
mail from the providers and manages local email directories&lt;/li&gt;
&lt;li&gt;a sending program or &lt;i&gt;mail transfer agent&lt;/i&gt; (MTA) that takes; and
locally-created messages and transfer them to their intended
recipients.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
Modern GUI email clients like Thunderbird typically wrap-up all
three services into one program that's easier to deploy and manage,
but that therefore forces certain choices on the user. By reverting
to the older architecture we regain flexibility and choice, at the
expense of making our lives harder.
&lt;/p&gt;

&lt;p&gt;
All these tools need to authenticate against other services.
Traditionally this used usernames and passwords, which are clearly
inadequate for the modern web. Instead we need a system based
around stronger encryption.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://en.wikipedia.org/wiki/OAuth"&gt;OAUTH2&lt;/a&gt; is a an authorisation delegation protocol that lets a site
grant access to someone who's authenticated against another,
without getting sight of their credentials. The typical use case is
for a web site to allow users to sign-in using social media
services like Facebook or Google, which reduces the number of
passwords a user needs to remember or manage – and, totally
incidentally I'm sure, improves the social media services' ability
to track users' activities across the web.
&lt;/p&gt;

&lt;p&gt;
In our case, the OAUTH2 "flow" interacts with the authentication
provider and acquires a bearer token that can then be presented to
authorise access to the various email services.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org10aa51a" class="outline-3"&gt;
&lt;h3 id="org10aa51a"&gt;Outline solution&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org10aa51a"&gt;
&lt;p&gt;
In outline the solution is as follows:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Install &lt;code&gt;mbsync&lt;/code&gt; as MDA&lt;/li&gt;
&lt;li&gt;Set up OAUTH2 authentication for Office365&lt;/li&gt;
&lt;li&gt;Use the to authenticate &lt;code&gt;mbsync&lt;/code&gt; against Office365 to allow
retrieval&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;msmtp&lt;/code&gt; as MTA, using the same authentication scheme&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;mu4e&lt;/code&gt; as MUA, since I want to read my email from inside
Emacs&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3996aef" class="outline-3"&gt;
&lt;h3 id="org3996aef"&gt;Packages&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3996aef"&gt;
&lt;p&gt;
Under Arch Linux we need the &lt;code&gt;isync&lt;/code&gt; package for synchronisation
and the &lt;code&gt;cyrus-sasl-xoauth2&lt;/code&gt; provider for OAUTH authentication.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   sudo pacman -S isync
   yay -S cyrus-sasl-xoauth2
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The same packages are available for other distros under similar
names. Note that the actual synchronisation tool is called
&lt;code&gt;mbsync&lt;/code&gt;, even though the package that contains it is called
&lt;code&gt;isync&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1678620" class="outline-3"&gt;
&lt;h3 id="org1678620"&gt;OAUTH2 flow management&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1678620"&gt;
&lt;p&gt;
We want to use OAUTH2 to authenticate an IMAP transaction, so that
no additional passwords are needed. To this we need a script to
manage the OAUTH2 flow.
&lt;/p&gt;

&lt;p&gt;
Weirdly for an operation that's becoming so common on the web,
there doesn't seem to be a package that offers OAUTH2 from the
command line. However, there &lt;i&gt;is&lt;/i&gt; a script that does it that's
included as an example with the &lt;code&gt;mutt&lt;/code&gt; MUA, and we can use that. It
can be found (in Arch) in the &lt;code&gt;mutt&lt;/code&gt; package.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   sudo pacman -S mutt
   cp /usr/share/doc/mutt/samples/mutt_oauth2.py .
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This puts a copy of the script into the current directory, which we
can then edit in two ways:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;add the internal application identification and client secrets
for accessing Office365; and&lt;/li&gt;
&lt;li&gt;set up the security for the OAUTH2 access tokens when they're
downloaded and held locally.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
The client secret and app id need to be "proper", in the sense that
Office365 knows about them – but weirdly they &lt;i&gt;don't&lt;/i&gt; have to be
related to your email domain or cloud tenancy. It's perfectly fine
to use credentials available in the public domain, for example
those of Thunderbird:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="n"&gt;AppID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"08162f7c-0fd2-4200-a84a-f25a4db0b584"&lt;/span&gt;
   &lt;span class="n"&gt;ClientSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"TxRBilcHdC6WGBee]fs?QR:SJ8nI[g82"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
(I got these from &lt;a href="https://www.dcs.gla.ac.uk/~jacobd/posts/2022/03/configure-mutt-to-work-with-oauth-20/"&gt;here&lt;/a&gt;, but other than that have no idea where
they come from: they're &lt;i&gt;not&lt;/i&gt; the same as those in the
&lt;a href="https://hg.mozilla.org/comm-central/file/tip/mailnews/base/src/OAuth2Providers.jsm"&gt;Thunderbird source code&lt;/a&gt;, as far as I can tell.)
&lt;/p&gt;

&lt;p&gt;
The &lt;code&gt;mutt_oauth2.py&lt;/code&gt; script stores the tokens it manages in a
&lt;code&gt;gpg&lt;/code&gt;-encrypted file. You therefore need to provide your &lt;code&gt;gpg&lt;/code&gt;
keypair identification, and I'm assuming anyone wanting to get
local email has one of those! Mine is "simoninireland".
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="n"&gt;GPGKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"simoninireland"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I edited the file to look like this, with some details elided:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="n"&gt;MSAppID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"08162f7c-0fd2-4200-a84a-f25a4db0b584"&lt;/span&gt;
   &lt;span class="n"&gt;MSClientSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"TxRBilcHdC6WGBee]fs?QR:SJ8nI[g82"&lt;/span&gt;
   &lt;span class="n"&gt;GPGKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"simoninireland"&lt;/span&gt;

   &lt;span class="n"&gt;ENCRYPTION_PIPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'gpg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'--encrypt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'--recipient'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GPGKey&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="n"&gt;DECRYPTION_PIPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'gpg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'--decrypt'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

   &lt;span class="n"&gt;registrations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="s1"&gt;'google'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="o"&gt;...&lt;/span&gt;
           &lt;span class="s1"&gt;'client_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="s1"&gt;'client_secret'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;},&lt;/span&gt;
       &lt;span class="s1"&gt;'microsoft'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="o"&gt;...&lt;/span&gt;
           &lt;span class="s1"&gt;'client_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MSAppID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="s1"&gt;'client_secret'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MSClientSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Put resulting script into &lt;code&gt;/usr/local/bin&lt;/code&gt; and make it executable.
Then run it in "authorisation" mode. The token file can go
anywhere: I put it in the directory used by &lt;code&gt;pass&lt;/code&gt; to allow for an
alternative access route:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mutt_oauth2.py -t .password-store/email/work.gpg --authorize
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This will ask some questions:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;we want "microsoft" authentication&lt;/li&gt;
&lt;li&gt;and a "localhostauthcode" flow&lt;/li&gt;
&lt;li&gt;enter your email address (the actual user, not any alias)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
and it prints out a URL to copy into a browser to authenticate
against Office365's web interface. In my case this involved
interacting with the university's single sign-on and two-factor
authentication (2FA) system. Doing this successfully put the
necessary OAUTH2 tokens, encrypted, into the specified file.
Running:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mutt_oauth2.py -t .password-store/email/work.gpg
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
will output the token, refreshing it automatically if it's
expired. This may ask for the GPG key's passphrase, if it has one,
and if it's not available from a local key agent.
&lt;/p&gt;

&lt;p&gt;
(All this security means that the bearer tokens are stored
encryoted at rest. It's a little inconvenient, though, as it means
you need to enter a &lt;code&gt;gpg&lt;/code&gt; passphrase periodically, and makes it
hard to run &lt;code&gt;mbsync&lt;/code&gt; in a &lt;code&gt;cron&lt;/code&gt; job. This is fine if, like me,
your level of security paranoia is such that you accept the minor
inconvenience in exchange for not having plain-text access tokens
lying around; on the other hand, you may decide that using, for
example, a machine with full-disc encryption is secure enough, in
which case you need to edit the &lt;code&gt;ENCRYPTION_PIPE&lt;/code&gt; and
&lt;code&gt;DECRYPTION_PIPE&lt;/code&gt; commands in the script to not do encryption: they
can basically just use &lt;code&gt;cat&lt;/code&gt; to store and retrieve the token information.)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc6f2fdb" class="outline-3"&gt;
&lt;h3 id="orgc6f2fdb"&gt;&lt;code&gt;mbsync&lt;/code&gt; for Office365&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc6f2fdb"&gt;
&lt;p&gt;
We now have OAUTH2 tokens for accessing Office365, which we can
integrate with our MDA. &lt;code&gt;mbsync&lt;/code&gt; has four main concepts:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Accounts, typically using IMAP&lt;/li&gt;
&lt;li&gt;IMAP message stores, which are remote&lt;/li&gt;
&lt;li&gt;Maildir stores, which are local&lt;/li&gt;
&lt;li&gt;Channels, which tie local and remote together&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
&lt;a href="https://en.wikipedia.org/wiki/Maildir"&gt;Maildir&lt;/a&gt; is a file format for storing email in a directory
structure, and is a long-running standard that's supported by lots
of tools. A maildir is typically presented in the MUA to a user as
a folder, and represented to the MDA as a directory.
&lt;/p&gt;

&lt;p&gt;
For Office365 we have:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   IMAPAccount work
   Host outlook.office365.com
   Port 993
   User &amp;lt;&amp;lt;work-email&amp;gt;&amp;gt;
   PassCmd "mutt_oauth2.py -t ~/.password-store/email/work.gpg"
   AuthMechs XOAUTH2
   SSLType IMAPS

   IMAPStore work-remote
   Account work

   MaildirStore work-local
   Subfolders Verbatim
   Path ~/Maildir/Work/
   Inbox ~/Maildir/Work/Inbox

   Channel Work
   Far :work-remote:
   Near :work-local:
   Patterns * !"Conversation History" !Calendar !Archive !Archives !Clutter !Drafts
   Create Both
   Expunge Both
   SyncState *
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
(See the &lt;code&gt;mbsync&lt;/code&gt; man pages for the details of its configuration.
&lt;code&gt;&amp;lt;&amp;lt;work-email&amp;gt;&amp;gt;&lt;/code&gt; should be a a proper username, not an alias.)
For our purposes the important line is the &lt;code&gt;PassCmd&lt;/code&gt; that calls our
edited script to retrieve the OAUTH2 bearer token. Email will be
downloaded into a maildir tree rooted at &lt;code&gt;~/Maildir/Work&lt;/code&gt;: you need
to create this before sync-ing.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mkdir -p ~/Maildir/Work
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9ca8065" class="outline-3"&gt;
&lt;h3 id="org9ca8065"&gt;Sync'ing the email&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9ca8065"&gt;
&lt;p&gt;
For a full sync of all maildirs just run:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mbsync -a
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
That can be time-consuming, as all the maildirs (&lt;i&gt;i.e.&lt;/i&gt;, folders)
have to be visited – and I have several hundred. A faster
option is to normally just look at (for example) the inbox:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mbsync Work:INBOX
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This will ignore everything else, which means they'll drift – but
can be re-sync'ed periodically by running a full sync. One could
also set up a &lt;code&gt;cron&lt;/code&gt; job to do a full sync early every morning, for
example, as long as the access token was held unencrypted (see
above).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7a295f7" class="outline-3"&gt;
&lt;h3 id="org7a295f7"&gt;Indexing email&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7a295f7"&gt;
&lt;p&gt;
You'll almost certainly now want to index your newly-downloaded
trove of messages. There are two common tools for this &lt;code&gt;mu&lt;/code&gt; and
&lt;code&gt;notmuch&lt;/code&gt;. Both do basically the same job of maintaining a
structured and full-text index of messages that can be queried by
an appropriate MUA. I chose &lt;code&gt;mu&lt;/code&gt;, for no particular reason: some
people swear by &lt;code&gt;notmuch&lt;/code&gt;, which is based on extensive tagging of
messages and so might be more familiar to Gmail users.
&lt;/p&gt;

&lt;p&gt;
To install &lt;code&gt;mu&lt;/code&gt;, we first grab the package:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   pacman -S mu
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We then initialise the index by running the indexer over the
maildir. If we also provide our own email address (or more than one) it knows to
index these differently.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mu init -m ~/Maildir --my-address=&amp;lt;&amp;lt;work-email&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4da7e8a" class="outline-3"&gt;
&lt;h3 id="org4da7e8a"&gt;Sending email&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4da7e8a"&gt;
&lt;p&gt;
All of the above sets up the MDA to &lt;i&gt;get&lt;/i&gt; mail: we now need to be
able to &lt;i&gt;send&lt;/i&gt; mail. Fortunately we've already done most of the
hard work needed to get this working.
&lt;/p&gt;

&lt;p&gt;
We need a local MTA, for which I chose &lt;code&gt;msmtp&lt;/code&gt;. It understands
OAUTH2 natively. Installation in Arch is easy:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   sudo pacman -S msmtp
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It needs to be pointed at the Office365 SMTP server and provided
with the OAUTH2 tokens, which are the same as we used above:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   defaults
   auth           on
   tls            on
   tls_starttls   on
   tls_trust_file /etc/ssl/certs/ca-certificates.crt
   logfile        ~/.msmtp.log

   account        work
   host           smtp.office365.com
   port           587
   auth           xoauth2
   user           &amp;lt;&amp;lt;work-email&amp;gt;&amp;gt;
   from           &amp;lt;&amp;lt;work-email&amp;gt;&amp;gt;
   passwordeval   "mutt_oauth2.py -t ~/.password-store/email/work.gpg"

   account default : work
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Again, see the &lt;code&gt;msmtp&lt;/code&gt; man pages for the details of this, and
replace &lt;code&gt;&amp;lt;&amp;lt;work-email&amp;gt;&amp;gt;&lt;/code&gt; as appropriate: the only interesting part
from our current perspective is that the &lt;code&gt;passwordeval&lt;/code&gt; line calls
exactly the same script as we used above.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org655c93e" class="outline-3"&gt;
&lt;h3 id="org655c93e"&gt;Reading and writing email&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org655c93e"&gt;
&lt;p&gt;
Finally we're ready to read email. I'll leave this to you: there
are lots of text-based email clients around, notably &lt;a href="http://www.mutt.org/"&gt;&lt;code&gt;mutt&lt;/code&gt;&lt;/a&gt; that we
encountered earlier. There's also &lt;a href="https://www.djcbsoftware.nl/code/mu/mu4e.html"&gt;&lt;code&gt;mu4e&lt;/code&gt;&lt;/a&gt; for reading email in
Emacs, making use of the &lt;code&gt;mu&lt;/code&gt; index; and &lt;a href="https://notmuch.readthedocs.io/en/latest/man1/notmuch.html"&gt;&lt;code&gt;notmuch&lt;/code&gt;&lt;/a&gt; also has &lt;a href="http://www.mutt.org/"&gt;an
Emacs interface&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I use &lt;code&gt;mu4e&lt;/code&gt;. There's a lot of documentation on the web for setting
this up, all of which applies immediately to our new set-up: the
MUA is entirely independent of the MDA and MTA, and simply needs to
be pointed at the right directories and accounts.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga9338a6" class="outline-3"&gt;
&lt;h3 id="orga9338a6"&gt;Accessing Gmail using OAUTH2&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga9338a6"&gt;
&lt;p&gt;
Gmail lets one use "app passwords" for accessing using IMAP, but
also supports OAUTH2, which is obviously more secure. The same
approach as above works for Gmail too. The initial credentials are:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="n"&gt;GAppID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'406964657835-aq8lmia8j95dhl1a2bvharmfk3t1hgqj.apps.googleusercontent.com'&lt;/span&gt;
   &lt;span class="n"&gt;GClientSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'kSmqreRr0qwBWJgbf5Y-PjSU'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
(&lt;a href="https://www.dcs.gla.ac.uk/~jacobd/posts/2022/03/configure-mutt-to-work-with-oauth-20/"&gt;Same source&lt;/a&gt; as above.) Edit these into the script and change the
entries in the config files to call it to authenticate with an
appropriate store, for example:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mutt_oauth2.py -t .password-store/email/personal.gpg --authorize
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and similarly in the configurations of &lt;code&gt;mbsync&lt;/code&gt; and &lt;code&gt;msmtp&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7b5169e" class="outline-3"&gt;
&lt;h3 id="org7b5169e"&gt;Conclusion&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7b5169e"&gt;
&lt;p&gt;
If you're still with me: congratulations, but you must &lt;i&gt;really&lt;/i&gt;
want to read your email old-school!
&lt;/p&gt;

&lt;p&gt;
For me, this has completely changed my relationship with email in
ways I didn't expect. Using Emacs means typically not having the
client visible all the time, which reduces the temptation to check
all the time. Instead I can adopt a more structured approach and
only check my email when I want to, which often means only three or
four times a day. It's also made email easier to manage, for
example by adding hyperlinks in my to-do list straight to messages
that need attention, and adding some integrations with org mode to
simplify email processing. Those are matters for another time,
though.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc94be80" class="outline-3"&gt;
&lt;h3 id="orgc94be80"&gt;Resources&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc94be80"&gt;
&lt;p&gt;
There are many resources on using &lt;code&gt;mbsync&lt;/code&gt;, &lt;code&gt;mu&lt;/code&gt;, &lt;code&gt;mu4e&lt;/code&gt;, and the
rest on the web. I found these covered all the topics in great
detail, with the exception of the OAUTH2 integration I've detailed
here. In particular I'd like to acknowledge the following:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://cvanelteren.github.io/post/mu4e/"&gt;Growing pains&lt;/a&gt;, Casper van Elteren's &lt;code&gt;mu4e&lt;/code&gt; setup that pointed me
in the right direction&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.macs.hw.ac.uk/~rs46/posts/2022-01-11-mu4e-oauth.html"&gt;Microsoft OAuth authentication with mu4e in Emacs&lt;/a&gt;, which uses
&lt;code&gt;offlineimap&lt;/code&gt;, a different MDA, and needs closer integration with
Microsoft Azure that often isn't possible for corporate email&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dcs.gla.ac.uk/~jacobd/posts/2022/03/configure-mutt-to-work-with-oauth-20/"&gt;Configure Mutt to work with OAuth 2.0&lt;/a&gt; that focuses on using
&lt;code&gt;mutt&lt;/code&gt; and Gmail&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>email</category><category>linux</category><category>sysadmin</category><guid>https://simondobson.org/2024/02/03/getting-email/</guid><pubDate>Sat, 03 Feb 2024 16:19:40 GMT</pubDate></item><item><title>Where am I (in git)?</title><link>https://simondobson.org/2020/11/27/where-am-i/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div&gt;&lt;p&gt;I recently started using &lt;code&gt;git&lt;/code&gt; and &lt;a href="https://github.com/simoninireland/"&gt;Github&lt;/a&gt;
in a more serious way than I've done in the past -- and promptly
started getting horrendously lost in the process.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://simondobson.org/2020/11/27/where-am-i/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>bash</category><category>git</category><category>linux</category><category>programming</category><guid>https://simondobson.org/2020/11/27/where-am-i/</guid><pubDate>Fri, 27 Nov 2020 11:14:08 GMT</pubDate></item><item><title>On going virtual</title><link>https://simondobson.org/2020/10/30/on-going-virtual/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div&gt;&lt;p&gt;Virtual machines are now commonplace in industry and academia. They
offer huge flexibility in managing large and/or complicated
installations. But what about for individual use, as a power user and
developer? Would that work? Would it be worth it? In the interests of
science, I decided to find out.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://simondobson.org/2020/10/30/on-going-virtual/"&gt;Read more…&lt;/a&gt; (14 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>essay</category><category>linux</category><category>system administration</category><category>virtualisation</category><category>writing</category><guid>https://simondobson.org/2020/10/30/on-going-virtual/</guid><pubDate>Fri, 30 Oct 2020 09:28:21 GMT</pubDate></item><item><title>A very jolly cloud</title><link>https://simondobson.org/2011/03/15/jolicloud/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;p&gt;On a whim yesterday I installed a new operating system on a old netbook. Looking at it makes me realise what we can do for the next wave of computing devices, even for things that are notionally "real" computers.

&lt;!--more--&gt;

I've been hearing about &lt;a href="http://www.jolicloud.org/"&gt;Jolicloud&lt;/a&gt; for a while. It's been positioning itself as an operating system for devices that will be internet-connected most of the time: netbooks at the moment, moving to Android phones and tablets. It also claims to be ideal for recycling old machines, so I decided to install it on an Asus Eee 901 I had lying around.

The process of installation turns out to be ridiculously easy: download a CD image, download a USB-stick-creator utility, install the image on the stick and re-boot. Jolicloud runs off the stick while you try it out; you can keep it  this way and leave the host machine untouched, or run the installer from inside Jolicloud to install it as the only OS or to dual-boot alongside whatever you've already got. This got my attention straight away: Jolicloud isn't demanding, and doesn't require you to do things in a particular way or order.

&lt;a href="http://www.jolicloud.org"&gt;&lt;img class="alignleft" title="Jolicloud start screen" src="http://farm6.static.flickr.com/5134/5513277152_8b221d1d53_o.png" alt="" width="640" height="375"&gt;&lt;/a&gt;

Once running (after a very fast boot sequence) Jolicloud presents a single-window start-up screen with a selection of apps to select. A lot of the usual suspects are there -- a web browser (Google Chrome), Facebook, Twitter, Gmail, a weather application and so forth -- and there's an app repository from which one can download many more. Sound familiar? It even looks a little like an IPhone or Android smartphone user interface.

I dug under the hood a little. The first thing to notice is that the interface is clearly designed for touchscreens. Everything happens with a single click, the elements are well-spaced and there's generally a "back" button whenever you go into a particular mode. It bears more than a passing resemblance to the IPhone and Android (although there are no gestures or multitouch, perhaps as a concession to the variety of hardware targets).

The second thing to realise is that Jolicloud is really just a skin onto &lt;a href="http://www.ubuntu.com/"&gt;Ubuntu Linux&lt;/a&gt;. Underneath there's a full Linux installation running X Windows, and so it can run any Linux application you care to install, as long as you're prepared to drop out of the Jolicloud look-and-feel into a more traditional set-up. You can download &lt;a href="http://www.winehq.org"&gt;Wine&lt;/a&gt;, the Windows emulator, and run Windows binaries if you wish. (I used this to get a Kindle reader installed.)

If this was all there was to Jolicloud I wouldn't be excited. What sets it apart is as suggested by the "cloud" part of the name. Jolicloud isn't intended as an operating system for single devices. Instead it's intended that everything a user does lives on the web ("in the cloud," in the more recent parlance -- not sure that adds anything...) and is simply accessed from one or more devices running Jolicloud. The start-up screen is actually a browser window (Chrome again) using HTML5 and JavaScript to provide a complete interface. The contents of the start-up screen are mainly hyperlinks to web services: the Facebook "app" just takes you to the Facebook web page, with a few small amendments done browser-side. A small number are links to local applications; most are little more than hyperlinks, or small wrappers around web pages.

The significance of this for users is the slickness it can offer. Installing software is essentially trivial, since most of the "apps" are actually just hyperlinks. That significantly lessens the opportunity for software clashes and installation problems, and the core set of services can be synchronised over the air. Of course you &lt;em&gt;can&lt;/em&gt; install locally -- I installed Firefox -- but it's more awkward and involves dropping-down a level into the Linux GUI. The tendency will be to migrate services onto web sites and access them through a browser. The Jolicloud app repository encourages this trend: why do things the hard way when you can use a web-based version of a similar service? For data, Jolicloud comes complete with &lt;a href="http://www.dropbox.com/"&gt;DropBox&lt;/a&gt; to store files "in the cloud" as well.

Actually it's even better than that. The start screen is synced to a Jolicloud account, which means that if you have several Jolicloud devices your data and apps will always be the same, without any action on your part: all your devices will stay synchronised because there's not really all that much local data &lt;em&gt;to&lt;/em&gt; synchronise. If you buy a new machine, everything will migrate automatically. In fact you can run your Jolicloud desktop from any machine running the latest Firefox, Internet Explorer or Chrome browser, because it's all just HTML and JavaScript: web standards that can run inside any appropriate browser environment. (It greys-out any locally-installed apps.)

I can see this sort of approach being a hit with many people -- the same people to whom the IPad appeals, I would guess, who mainly consume media and interact with web sites, don't ever really need local applications, and get frustrated when they can't share data that's on their local disc somewhere. Having a pretty standard OS distro underneath is an added benefit in terms of stability and flexibility. The simplicity is really appealing, and would be a major simplification for elderly people for example, for whom the management of a standard Windows-based PC is a bit of a challenge. (The management of a standard Windows-based PC is completely beyond me, actually, as a Mac and Unix person, but that's another story.)

But the other thing that Jolicloud demonstrates is both the strength and weaknesses of the IPhone model. The strengths are clear the moment you see the interface: simple, clear, finger-sized and appropriate for touch interaction. The app store model (albeit without payment for Jolicloud) is a major simplification over traditional approaches to maanaging software, and it's now clear that it works on a "real" computer just as much as on a smartphone. Jolicloud can install &lt;a href="http://www.skype.com/"&gt;Skype,&lt;/a&gt; for example, which is a "normal" application although typically viewed by users as some sort of web service. The abstraction of "everything in the cloud" works extremely well. (A more Jolicloud-like skin would make Skype even more attractive, but of course it's not open-source so that's difficult.)

Jolicloud also demonstrates that one can have such a model without closing-down the software environment. You don't have to vet all the applications, or store them centrally, or enforce particular usage and payment models: all those things are commercial choices, not technical ones, and close-down the experience of owning the device they manage. One can perhaps make a case for this for smartphones, but not so much for netbooks, laptops and other computers.

I'm not ready to give up my Macbook Air as my main mobile device, but then again I do more on the move than most people. As just a portable internet connection with a bigger screen than a smartphone it'll be hard to beat. There are other contenders in the space, of course, but they're either not really available yet (&lt;a href="http://www.chromium.org/chromium-os"&gt;Google Chrome OS&lt;/a&gt;) or limited to particular platforms (&lt;a href="https://secure.wikimedia.org/wikipedia/en/wiki/WebOS"&gt;WebOS&lt;/a&gt;). I'd certainly recommend a look at Jolicloud for anyone in the market for such a system, and that includes a lot of people who might never otherwise consider getting off Windows on a laptop: I'm already working on my mother-in-law.&lt;/p&gt;</description><category>jolicloud</category><category>linux</category><guid>https://simondobson.org/2011/03/15/jolicloud/</guid><pubDate>Tue, 15 Mar 2011 08:00:58 GMT</pubDate></item></channel></rss>