<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simon Dobson (Posts about til)</title><link>https://simondobson.org/</link><description></description><atom:link href="https://simondobson.org/categories/til.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:simoninireland@gmail.com"&gt;Simon Dobson&lt;/a&gt; </copyright><lastBuildDate>Wed, 17 Jul 2024 09:37:59 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>TIL: The most powerful one-line program in the world</title><link>https://simondobson.org/2024/07/17/til-the-most-powerful-one-line-program-in-the-world/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orge9df00b" class="outline-2"&gt;
&lt;h2 id="orge9df00b"&gt;TIL: The most powerful one-line program in the world&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge9df00b"&gt;
&lt;p&gt;
Well, the most powerful I've found so far, anyway.
&lt;/p&gt;

&lt;p&gt;
Given my current obsession with &lt;a href="/categories/lisp/"&gt;Lisp&lt;/a&gt; you might reasonably expect it
to be in that language. But it isn't: it's in &lt;a href="https://en.wikipedia.org/wiki/APL_(programming_language)"&gt;APL&lt;/a&gt;, and it performs
one complete generation of &lt;a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life"&gt;Conway' Game of Life&lt;/a&gt; in one line of code:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  Life←{↑↑1 ⍵∨.∧3 4=+/,¯1 0 1∘.⊖¯1 0 1∘.⌽⊂⍵}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
…and does so inexplicably to anyone who doesn't know APL,
obviously, but the &lt;a href="https://aplwiki.com/wiki/John_Scholes%27_Conway%27s_Game_of_Life"&gt;basic algorithm&lt;/a&gt; is simple:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Take an array with 1 in each occupied cell and 0 elsewhere&lt;/li&gt;
&lt;li&gt;Build four new arrays by exchanging each element with its
neighbour up, down, left, and right&lt;/li&gt;
&lt;li&gt;Sum these arrays, which places the number of neighbours into each cell&lt;/li&gt;
&lt;li&gt;Cut-off these values to be 1 if the cell has a value of 3 or 4,
and 0 otherwise&lt;/li&gt;
&lt;li&gt;Re-format the arrays back into the starting configuration&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
I checked it out using &lt;a href="https://www.gnu.org/software/apl/"&gt;GNU APL&lt;/a&gt; and it works fine.
&lt;/p&gt;

&lt;p&gt;
I discovered this gem by accident, actually implemented &lt;a href="https://github.com/chmykh/apl-life"&gt;in APL in
Forth&lt;/a&gt; where someone has developed APL as an embedded DSL within
&lt;a href="https://en.wikipedia.org/wiki/Forth_(programming_language)"&gt;Forth&lt;/a&gt; (another language with which I have history). After a bit of
digging I found a similar APL in Lisp, &lt;a href="https://github.com/phantomics/april"&gt;April&lt;/a&gt;, which clearly needs
exploring.
&lt;/p&gt;

&lt;p&gt;
In many ways APL and Lisp are parallel tracks within programming
language evolution, taking a single data structure (lists or arrays)
and providing powerful ways to manipulate them. Lisp of course has
been extended with other data structures, including arrays, which
makes the fusion of array- and list-based programming rather
attractive.
&lt;/p&gt;

&lt;p&gt;
I can't help asking myself what would have happened if APL hadn't
fallen by the wayside. (I think this was inevitable, incidentally,
once the syntax became fixed: any language that requires its own
character set was always going to struggle.) We now have huge
applications for array processing, from graphics to machine
learning, and GPUs are from one perspective just APL accelerator
co-processors. The ideas are still massively relevant.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>apl</category><category>programming</category><category>til</category><guid>https://simondobson.org/2024/07/17/til-the-most-powerful-one-line-program-in-the-world/</guid><pubDate>Wed, 17 Jul 2024 09:20:53 GMT</pubDate></item><item><title>TIL: The loudest Lisp program in the world</title><link>https://simondobson.org/2024/05/03/til-the-loudest-lisp-program-in-the-world/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org69b2fff" class="outline-2"&gt;
&lt;h2 id="org69b2fff"&gt;TIL: The loudest Lisp program in the world&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org69b2fff"&gt;
&lt;p&gt;
Today I learned about a program that generates the sounds that help
people navigate as they exit long tunnels when an emergency such as
a fire has destroyed the visibility.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://blog.funcall.org//lisp%20psychoacoustics/2024/05/01/worlds-loudest-lisp-program/"&gt;The World's Loudest Lisp Program to the Rescue&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
This describes the challenges of building a software system that has
to work unmonitored once deployed, for years, as well as
withstanding a fairly rugged environment where, for example, the
installedc hardware will be periodically sprayed with a
high-pressure hose as the walls get cleaned. Overall the system is
soft real-time, but has to cope with component failure, network
partitions, consensus, and all the usual distributed systems
challenges, while be guaranteed to work when needed.
&lt;/p&gt;

&lt;p&gt;
The developers built the system in Common Lisp, which wouldn't be
the normal go-to choice for an embedded system. But their argument
was that they could better handle complex and changing requirements
by retaining a high level of abstraction, and that development was
overall far faster than using C. Modern Common Lisp compilers are so
efficient that there's no significant performance hit at deployment.
They made use of complicated components like planners (for which
Lisp is an ideal choice), and built a set of macros to wrap-up the
handling of industrial control and robust communications.
&lt;/p&gt;

&lt;p&gt;
It's a great read.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>lisp</category><category>programming</category><category>til</category><guid>https://simondobson.org/2024/05/03/til-the-loudest-lisp-program-in-the-world/</guid><pubDate>Fri, 03 May 2024 08:50:16 GMT</pubDate></item><item><title>TIL: Cognitohazards</title><link>https://simondobson.org/2024/04/12/til-cognitohazards/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org65a04c2" class="outline-2"&gt;
&lt;h2 id="org65a04c2"&gt;TIL: Cognitohazards&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org65a04c2"&gt;
&lt;p&gt;
Could social media posts be actively damaging to our mental health?
– literally, not just figuratively? That's the premise of &lt;a href="https://www.theguardian.com/technology/2024/apr/09/techscape-deepfakes-cognitohazards-science-fiction"&gt;a
TechScape article in The Guardian&lt;/a&gt;, that draws on both science
fiction and psychological research.
&lt;/p&gt;

&lt;p&gt;
In Neal Stephenson's "Snow crash" there is a plot device of an image
in a metaverse that, when viewed, crashes the viewer's brain. We
haven't seen this in social media (yet), but there's an increasing
concern about deepfake images and other forms of misinformation.
Research suggests that such images are damaging &lt;i&gt;even if viewers
know that they're fakes&lt;/i&gt;, which suggests that techniques like
content-labelling images as AI-generated are insufficient to remove
their harm. Other examples include massively engaging artificial
images such as the "pong wars" animation of two simultaneous
"Breakout" games going on between two algorithms: something that
shouldn't be as engaging as it is (as I can attest to myself).
&lt;/p&gt;

&lt;p&gt;
Social media attention grabbing at an industrial scale might
therefore constitute a &lt;i&gt;cognitohazard&lt;/i&gt;, a way of hacking people's
brains simply by being viewed.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>internet</category><category>social media</category><category>til</category><guid>https://simondobson.org/2024/04/12/til-cognitohazards/</guid><pubDate>Fri, 12 Apr 2024 11:18:58 GMT</pubDate></item><item><title>TIL: Web site carbon ratings</title><link>https://simondobson.org/2024/03/04/til-web-site-carbon-ratings/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org2fb4988" class="outline-2"&gt;
&lt;h2 id="org2fb4988"&gt;TIL: Web site carbon ratings&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2fb4988"&gt;
&lt;p&gt;
Today I learned about a site that rates web pages according to their
carbon footprints.
&lt;/p&gt;

&lt;p&gt;
My web site does well:
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://simondobson.org/attachments/16/f4bcd8-963e-40ce-9f63-be78ec585965/rating-simondobson-org.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
I'm not all that surprised by this, since I &lt;a href="/development/this-site/"&gt;use&lt;/a&gt; a static site
generator and minimal (almost no) JavaScript: basically as low-power
as one could get.
&lt;/p&gt;

&lt;p&gt;
The &lt;a href="https://www.websitecarbon.com/website/simondobson-org/"&gt;full report&lt;/a&gt; includes an approximate carbon cost per page visit
(60mg), and even tries to work out the underlying energy provision,
dirty or renewable – dirty in my case at the moment, unfortunately.
(I'm currently hosted on GitHub.) I should perhaps take the hint and
move onto an alternative provider, or even host it myself with a
solar-powered Raspberry Pi. &lt;a href="https://solar.lowtechmagazine.com/"&gt;Low-tech Magazine&lt;/a&gt; does this, but they
&lt;i&gt;are&lt;/i&gt; based in Barcelona rather than Scotland…
&lt;/p&gt;

&lt;p&gt;
You can even include a badge that reports your rating "live":
&lt;/p&gt;

&lt;div id="wcb" class="carbonbadge"&gt;&lt;/div&gt;
&lt;script src="https://unpkg.com/website-carbon-badges@1.1.3/b.min.js" defer&gt;&lt;/script&gt;

&lt;p&gt;
(It caches so as to only make one request per day.) On the other
hand this increases the JavaScript footprint slightly, so I don't
think I'll be using it anywhere apart from just here.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>til</category><guid>https://simondobson.org/2024/03/04/til-web-site-carbon-ratings/</guid><pubDate>Mon, 04 Mar 2024 18:50:35 GMT</pubDate></item><item><title>TIL: An RSS-focused search engine</title><link>https://simondobson.org/2024/01/26/til-an-rss-focused-search-engine/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orgaada1d7" class="outline-2"&gt;
&lt;h2 id="orgaada1d7"&gt;TIL: An RSS-focused search engine&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgaada1d7"&gt;
&lt;p&gt;
Today I learned about &lt;a href="https://feedle.world/"&gt;feedle&lt;/a&gt;, a search engine focused on searching
blogs and podcasts – web sites that export an &lt;a href="https://en.wikipedia.org/wiki/RSS"&gt;RSS feed&lt;/a&gt;, in other
words. And the search results are themselves RSS feed that can be
subscribed to live.
&lt;/p&gt;

&lt;p&gt;
This feels like a quite a big thing for accessing content without
resort to the internet giants, and for the &lt;a href="https://indieweb.org/"&gt;IndieWeb&lt;/a&gt; in general. It
means that search can prefer syndicated and typically small-scale
content rather than being influenced by search engine optimisation
(SEO) or sponsorship affecting the link rankings.
&lt;/p&gt;

&lt;p&gt;
Of course this also need management, and feedle is a curated source:
you have to submit your RSS feed to it for review and (hopefully)
inclusion. I've done that for &lt;a href="https://simon.dobson.org/rss.xml"&gt;this site's feed&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>internet</category><category>til</category><guid>https://simondobson.org/2024/01/26/til-an-rss-focused-search-engine/</guid><pubDate>Fri, 26 Jan 2024 13:10:23 GMT</pubDate></item><item><title>TIL: The first scientist</title><link>https://simondobson.org/2024/01/10/til-the-first-scientist/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org9554aec" class="outline-2"&gt;
&lt;h2 id="org9554aec"&gt;TIL: The first scientist&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9554aec"&gt;
&lt;p&gt;
Today I learned that &lt;a href="https://www.themarginalian.org/2020/10/20/mary-somerville/"&gt;the first person ever to be called a
"scientist"&lt;/a&gt; was the Scottish … erm, scientist &lt;a href="https://en.wikipedia.org/wiki/Mary_Somerville"&gt;Mary Sommerville&lt;/a&gt;
(1780–1872), who made discoveries across several fields of
mathematics, physics, and astronomy, and was one of the first two
women admitted to membership of the Royal Astronomical Society.
&lt;/p&gt;

&lt;p&gt;
It was the fact that she was both a woman and a polymath that led to
the need for a new word. She clearly wasn't a "man of science", as
was the common description; nor did she fall into the accepted
classes such as geologist or chemist, since she contributed to all
these fields and more. So &lt;a href="https://en.wikipedia.org/wiki/William_Whewell"&gt;William Whewell&lt;/a&gt;, the Master of Trinity
College, Cambridge, and the person who had introduced one of
Sommerville's books to the university's maths curriculum, decided to
unify all these specific classes into the new general category of
&lt;i&gt;scientist&lt;/i&gt;. (He also introduced the terms &lt;i&gt;physicist&lt;/i&gt; and
&lt;i&gt;linguistics&lt;/i&gt;.)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>science</category><category>til</category><guid>https://simondobson.org/2024/01/10/til-the-first-scientist/</guid><pubDate>Wed, 10 Jan 2024 14:57:20 GMT</pubDate></item><item><title>TIL: The first ever .com domain</title><link>https://simondobson.org/2024/01/02/til-the-first-ever-com-domain/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org77cb165" class="outline-2"&gt;
&lt;h2 id="org77cb165"&gt;TIL: The first ever .com domain&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org77cb165"&gt;
&lt;p&gt;
Today I learned that the first .com internet domain registered on
the internet was &lt;a href="https://symbolics.com"&gt;https://symbolics.com&lt;/a&gt; and belonged to Symbolics, a
company that made Lisp machines.
&lt;/p&gt;

&lt;p&gt;
It doesn't relate to Lisp any more, of course. It's been sold to
someone who "helps entrepreneurs and investors acquire high-end
domain names", which seems about as meta as things can get: the
first-ever .com domain name now points a company focused on
acquiring domain names.
&lt;/p&gt;

&lt;p&gt;
Symbolics itself has a storied history, spinning-out from the MIT AI
lab to sell hardware dedicated to running Lisp: one of &lt;i&gt;two&lt;/i&gt; such
start-ups actually. The &lt;a href="https://en.wikipedia.org/wiki/Symbolics"&gt;Wikipedia page&lt;/a&gt; is a good place to start.
&lt;/p&gt;

&lt;p&gt;
Incidentally, the rest of the top-ten first .com domains can be
found &lt;a href="https://www.theguardian.com/media/pda/2008/dec/22/internet-domains"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>history</category><category>internet</category><category>lisp</category><category>til</category><guid>https://simondobson.org/2024/01/02/til-the-first-ever-com-domain/</guid><pubDate>Tue, 02 Jan 2024 11:44:10 GMT</pubDate></item><item><title>TIL: Regenerative braking in the cold</title><link>https://simondobson.org/2022/12/16/til-regenerative-braking-in-the-cold/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org5b0ed26" class="outline-2"&gt;
&lt;h2 id="org5b0ed26"&gt;TIL: Regenerative braking in the cold&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5b0ed26"&gt;
&lt;p&gt;
Today I learned that regenerative braking in an electric car doesn't
work at all well in the cold.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://simondobson.org/2022/12/16/til-regenerative-braking-in-the-cold/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>electric-cars</category><category>til</category><guid>https://simondobson.org/2022/12/16/til-regenerative-braking-in-the-cold/</guid><pubDate>Fri, 16 Dec 2022 11:58:44 GMT</pubDate></item><item><title>TIL: Stroke order of Chinese surnames</title><link>https://simondobson.org/2022/11/10/til-stroke-order-of-chinese-surnames/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orgf16c567" class="outline-2"&gt;
&lt;h2 id="orgf16c567"&gt;TIL: Stroke order of Chinese surnames&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf16c567"&gt;
&lt;p&gt;
Sometimes we publish papers with authors in alphabetical order;
sometimes we use an order based on contribution, typically the main
author (often the most junior) first followed by the lesser
contributors and culminating in the most senior author, who might not
have made many concrete contributions to the writing. Personally I'm
a firm believer in the second style.
&lt;/p&gt;

&lt;p&gt;
But I always wondered: how does one list authors in alphabetical
order for languages like Chinese that are non-alphabetic? I had the
opportunity to ask a couple of Chinese colleagues.
&lt;/p&gt;

&lt;p&gt;
While Chinese doesn't have an &lt;i&gt;alphabetical&lt;/i&gt; order, it can use a
&lt;i&gt;stroke&lt;/i&gt; order: some surnames require more strokes than others,
often significantly more (four &lt;i&gt;versus&lt;/i&gt; eleven, in the case of the
two colleagues who explained this to me). So one can list authors in
order of the increasing numbers of strokes needed to write their
surnames.  That's really clever, and no more or less arbitrary in
terms of author appearance than the alphabetic approach.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>til</category><guid>https://simondobson.org/2022/11/10/til-stroke-order-of-chinese-surnames/</guid><pubDate>Thu, 10 Nov 2022 15:14:04 GMT</pubDate></item></channel></rss>