<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simon Dobson (Posts about virtualisation)</title><link>https://simondobson.org/</link><description></description><atom:link href="https://simondobson.org/categories/virtualisation.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2023 &lt;a href="mailto:simoninireland@gmail.com"&gt;Simon Dobson&lt;/a&gt; </copyright><lastBuildDate>Sun, 24 Dec 2023 14:52:43 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>On going virtual</title><link>https://simondobson.org/2020/10/30/on-going-virtual/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div&gt;&lt;p&gt;Virtual machines are now commonplace in industry and academia. They
offer huge flexibility in managing large and/or complicated
installations. But what about for individual use, as a power user and
developer? Would that work? Would it be worth it? In the interests of
science, I decided to find out.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://simondobson.org/2020/10/30/on-going-virtual/"&gt;Read more…&lt;/a&gt; (14 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>essay</category><category>linux</category><category>system administration</category><category>virtualisation</category><category>writing</category><guid>https://simondobson.org/2020/10/30/on-going-virtual/</guid><pubDate>Fri, 30 Oct 2020 09:28:21 GMT</pubDate></item><item><title>Layered abstractions and Russian dolls</title><link>https://simondobson.org/2012/06/14/russian-dolls/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;p&gt;The layering of abstractions has served us well, but it's now generating the sorts of complexity it was designed to solve. Time for a re-think?

&lt;!--more--&gt;Anyone who's built a large piece of software knows that much of the effort is in managing the complexity of the project: which other software a piece of code relies on, how to keep the various aspects separate, how to manage changes and upgrades, and so on. This isn't something that's got easier over time: it has for a given code size and style, as we've understood build processes and dependency management better; but the code sizes have relentlessly increased to compensate for our improved understanding; and modern practices don't make life any easier. Downloaded code, dynamic modules and classes, client-server and the like all generate their own intrinsic complexity.

One of the biggest sources of complexity is the use of multiple applications, especially in enterprise systems. A typical e-commerce system, for example, will make use of a web server to present pages (which themselves might contain embedded JavaScript for client-side processing), a database to track orders and inventory, a procurement system to fulfil orders, and possibly a supply-chain management system to order new inventory. That's the application. Then there'll be the operating system, a logging facility, a facilities management system, and a load of administrative tools and scripts. And the operating system may itself be virtualised and running as a guest within another, host operating system and hypervisor, which needs its own toolset. The interactions between these tools can be mind-boggling.

Someone once asked: who knows how to work the &lt;a href="http://httpd.apache.org/" target="_blank"&gt;Apache web server&lt;/a&gt;? It sounds like a simple question -- any competent web manager? the main developers? -- but the sting in the tail is that Apache is very configurable: so configurable, in fact, that it's pretty much impossible to work out what a given combination of options will do (or, conversely, what combination of options to use to achieve a given effect). The interactions are just too complicated, and the web abounds with examples where interactions between (for example) the thread pool size, the operating system block size, and the Java virtual machine parameters conspire to crash a system that looks like it should be working fine. If you can't work one server properly -- one component of the system -- what hope is there to get a complete system humming along?

&lt;a href="http://blogs.cs.st-andrews.ac.uk/al/" target="_blank"&gt;Al Dearle&lt;/a&gt; and I have been talking about this for a while. The basic issue seems to be an interaction between decomposition and dependency. In other words, the complexity comes at the "seams" between the various sub-systems, and is magnified the more configurable the components on either side of the seam are. This is important, because systems are becoming more finely decomposed: the move to component software, software-as-a-service and the like all increase the number of seams. Al's image of this is that modern systems are like Russian dolls, where each supposedly independent component contains more components that influence the size and complexity of the component containing them. You can only simplify any individual piece so far, because it depends on so many other pieces.

Actually a lot of the seams are now unnecessary anyway. Going back to the e-commerce example, the operating system goes to great pains to provide a process abstraction to keep the components separate -- to stop faults in the database affecting the web server, for example. Historically this made perfect sense and prevented a single faulty process in a time-sharing system affecting the processes of other users. Nowadays, however, it makes considerably less sense, for a number of reasons. Firstly, all the components are owned by a single nominal user (although there are still good reasons for separating the root user from the application user), so the security concerns are less pronounced. Secondly, all the components depend on each other, so a crash in the database will effectively terminate the web server anyway. (We're simplifying, but you get the idea.) Finally, there's a good chance that the web server, database and so on are each running in their own virtual machine, so there's only one "real" process per machine (plus all the supporting processes). The operating system is offering protection that isn't needed, because it's being provided (again) by the hypervisor running the virtual machines and perhaps (&lt;em&gt;again&lt;/em&gt;) by the host operating system(s) involved.

We also tend to build very flexible components (like Apache), which can deal with multiple simultaneous connections, keep users separate, allow modules to be loaded and unloaded dynamically -- behave like small operating systems, in other words, replicating the OS functionality again at application level. This is despite the fact that, in enterprise configurations, you'll probably know in advance the modules to be loaded and have a single user (or small user population) and fixed set of interactions: the flexibility makes the component more complex for no net gain during operation. Although it might simplify configuration and evolution slightly, there are often other mechanisms for this: in a cloud environment one can spin-up a replacement system in an evolved state and then swap the set of VMs over cleanly.

It's easy to think that this makes no difference for modern machines, but that's probably not the case. All these layers still need to be resourced; more importantly, they still need to be managed, maintained and secured, which take time to do well -- with a result that they typically get done badly (if at all).

Can we do anything about it? One thought is that the decomposition that makes thinking about systems and programming easier makes executing those systems more complex and fragile. In many cases, once the system is configured appropriately, flexibility becomes an enemy: it'll often be too complicated to re-configure or optimise in a live environment anyway. There may be a reason to have Russian dolls when &lt;em&gt;designing&lt;/em&gt; a system, but once designed it's better to make each doll solid to remove the possibility of then opening-up and falling apart.

So it's not decomposition that's the issue, it's &lt;em&gt;decomposition manifested at run-time&lt;/em&gt;. When we add new abstractions to systems, we typically add them in the form of components or libraries that can be called from other components. These components are often general, with lots of parameters and working with multiple clients -- sound familiar? This is all good for the component-writer, as it lets the same code be re-used: but it bloats each system that uses the component, adding complexity and interactions.

So one thought for tackling complexity is to change where decomposition manifests itself. If instead of placing new functions in the run-time system, we placed it into the compiler used to build the run-time, we could use compilation techniques to optimise-out the unnecessary functionality so that what results is optimised for the configuration that it's actually being placed in, rather than being general enough to represent any configuration. There's substantial work on these ideas in the fields of staged compilation and partial evaluation (for example &lt;a href="http://www.metaocaml.org/" target="_blank"&gt;MetaOCaml&lt;/a&gt;, &lt;a href="http://www.haskell.org/haskellwiki/Template_Haskell" target="_blank"&gt;Template Haskell&lt;/a&gt;, Flask and the like): the flexibility is manifested at compile-time as compile-time abstractions, that in the course of compilation are removed and replaced with inflexible -- but more efficient and potentially more dependable -- specialised code. Think taking the source code for Linux, Apache and MySQL, accelerating them together at high speed, and getting out a single program that'd run on a bare machine, had nothing it didn't actually need, and had all the options for the various (conceptual) sub-systems set correctly to work together.

Don't believe it's possible? Neither do I. There's too much code and especially too much legacy code for this to work at enterprise (or even desktop) level. However, for embedded systems and sensor networks it's a different story. For these systems, every extra abstraction that makes the programmer's life easier is a menace if it increases the code size hitting the metal: there just isn't the memory. But there also isn't the legacy code base, and there is a crying need for better abstractions. So an approach to the Russian dolls that moves the abstractions out of the run-time and&lt;a href="https://simondobson.org/2011/05/evolving/" target="_blank"&gt; into the languages and compilers&lt;/a&gt; might work, and might considerably improve the robustness and ease of use for many systems we need to develop. It also works well with modern language technology, and with other trends like &lt;a href="https://simondobson.org/2011/12/middleware-doughnut/" target="_blank"&gt;ever-more-specialised middleware&lt;/a&gt; that remove bloat and overhead at the cost of generality. Keeping the former &lt;em&gt;and&lt;/em&gt; the latter seems like a worthwhile goal.&lt;/p&gt;</description><category>Blog</category><category>compilers</category><category>programming</category><category>software engineering</category><category>virtualisation</category><guid>https://simondobson.org/2012/06/14/russian-dolls/</guid><pubDate>Thu, 14 Jun 2012 07:00:52 GMT</pubDate></item><item><title>Adventures at either end of the performance spectrum</title><link>https://simondobson.org/2011/04/11/spectrum/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;p&gt;Over the past week I've been playing with some very small machines intended as sensor network nodes. Paradoxically this has involved deploying a ridiculous amount of computing power.

&lt;!--more--&gt;

Most of my work on sensor networks is at the level of data and sensors, not hardware. I was feeling the need to get my hands dirty, so I bought an &lt;a href="http://www.arduino.cc"&gt;Arduino&lt;/a&gt;, an open-source prototyping platform that's actually somewhat &lt;em&gt;less&lt;/em&gt; capable than many of the nodes we work with. They're basically a hobbyist platform and are often looked down upon by professionals as being toys.

I think these criticisms are unfair. Firstly, Arduinos massively simplify software development by abstracting-away from a lot of the complexities that simply aren't needed in many applications. Secondly, unlike a lot of sensor network hardware, they're &lt;em&gt;mainstream&lt;/em&gt; and will benefit from competition, economies of scale and the like in a way that more specialised kit probably never will. Thirdly, as the centres of &lt;a href="http://shieldlist.org/" target="_blank"&gt;an ecosystem of other boards&lt;/a&gt; they can focus on doing one function -- co-ordination -- and let the daughter boards focus on their &lt;em&gt;their&lt;/em&gt; own functions, rather than tying everything together.

In some ways this makes hardware more like software, and more amenable to software-like rapid development cycles. It means that each component can move up its own learning curve independently of the others, and not hold everything back to the speed of the slowest (and often hardest-to-improve) component. That has been the unfortunate outcome several times in the past: I'm reminded strongly of the demise of the &lt;a href="https://secure.wikimedia.org/wikipedia/en/wiki/Transputer" target="_blank"&gt;Transputer&lt;/a&gt;, that lost its early lead by trying to be too integrated. (That's an interesting story for another time.)

One good example of Arduino  re-use is that it can interface to Zigbee radios, specifically to &lt;a href="http://www.digi.com/products/wireless-wired-embedded-solutions/zigbee-rf-modules/zigbee-mesh-module/xbee-zb-module.jsp" target="_blank"&gt;Digi's range of XBee modules&lt;/a&gt;. Zigbee is the latest-and-greatest short-range wireless protocol, and Arduino kit can interface directly to it rather than relying on an integrated radio sub-system. They mesh together and do all sorts of other fun stuff that's great for sensor systems, and I'm looking forward to understanding them better,

However getting XBee radios to work often involves re-flashing their firmware to make sure they take on the appropriate role in the mesh network. The tool that Digi provide to do this (unhelpfully called X-CTU)  only runs on Windows. As might not be a complete surprise, I don't have any Windows machines.

I doubt I'm unusual in this: if you're the sort of person who's likely to play around with hobbyist hardware, there's a reasonable chance that you run Linux and/or Mac OS X as your main or only operating systems. So building kit for the hobby hardware market that relies on Windows-only tools is short-sighted. And unnecessary: there are plenty of cross-platform user interface tools available for C, or they could just write it in Java.

By a strange quirk I also don't have an Intel-based Linux machine at the moment, so I was left in something of a quandary as to how to run the necessary firmware tools. Solving it takes us to the other end of the performance spectrum. The solution was to run X-CTU under the &lt;a href="http://www.winehq.org/" target="_blank"&gt;Wine&lt;/a&gt; emulator for Linux, with the Linux in question being a &lt;a href="http://www.debian.org" target="_blank"&gt;Debian&lt;/a&gt; installation running virtualised under &lt;a href="http://www.virtualbox.org/" target="_blank"&gt;VirtualBox&lt;/a&gt; on my Macbook Air. To put it another way, I created a virtual stand-alone PC on my Mac, within which I installed Linux, which therefore thought it was running on its own separate machine, within which I installed a Windows emulation layer and ran X-CTU -- all to change the firmware on a radio with significantly less computational power than a central heating thermostat.

It's things like this that make one realise how ludicrously, insanely overpowered modern computers are.

The Mac can run three-layer emulations like this without any problem at all, and can still do a load of other stuff simultaneously. And it's a laptop, and not one noted for being massively powerful by modern standards. It seems rather perverse to need to deploy this kind of power to work with such tiny machines. I think there are several lessons. Computing power really is really, &lt;em&gt;really&lt;/em&gt; cheap -- so cheap that it's not worth worrying about it, and we haven't come close to hitting a plateau in practical terms yet. But this just highlights that programming sensor networks requires a completely different discipline and skill-set, which may not be common in programmers of more recent vintage. If this gap is going to remain -- and &lt;a href="https://simondobson.org/2010/03/things-that-wont-change/"&gt;I think it is&lt;/a&gt; -- it's something we need to consider in the ways we teach computer science.&lt;/p&gt;</description><category>arduino</category><category>Blog</category><category>programming</category><category>sensor networks</category><category>virtualisation</category><guid>https://simondobson.org/2011/04/11/spectrum/</guid><pubDate>Mon, 11 Apr 2011 18:00:43 GMT</pubDate></item></channel></rss>