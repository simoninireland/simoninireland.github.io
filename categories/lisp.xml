<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simon Dobson (Posts about lisp)</title><link>https://simondobson.org/</link><description></description><atom:link href="https://simondobson.org/categories/lisp.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:simoninireland@gmail.com"&gt;Simon Dobson&lt;/a&gt; </copyright><lastBuildDate>Tue, 02 Jan 2024 12:00:27 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>TIL: The first ever .com domain</title><link>https://simondobson.org/2024/01/02/til-the-first-ever-com-domain/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org0d117c0" class="outline-2"&gt;
&lt;h2 id="org0d117c0"&gt;TIL: The first ever .com domain&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0d117c0"&gt;
&lt;p&gt;
Today I learned that the first .com internet domain registered on
the internet was &lt;a href="https://symbolics.com"&gt;https://symbolics.com&lt;/a&gt; and belonged to Symbolics, a
company that made Lisp machines.
&lt;/p&gt;

&lt;p&gt;
It doesn't relate to Lisp any more, of course. It's been sold to
someone who "helps entrepreneurs and investors acquire high-end
domain names", which seems about as meta as things can get: the
first-ever .com domain name now points a company focused on
acquiring domain names.
&lt;/p&gt;

&lt;p&gt;
Symbolics itself has a storied history, spinning-out from the MIT AI
lab to sell hardware dedicated to running Lisp: one of &lt;i&gt;two&lt;/i&gt; such
start-ups actually. The &lt;a href="https://en.wikipedia.org/wiki/Symbolics"&gt;Wikipedia page&lt;/a&gt; is a good place to start.
&lt;/p&gt;

&lt;p&gt;
Incidentally, the rest of the top-ten first .com domains can be
found &lt;a href="https://www.theguardian.com/media/pda/2008/dec/22/internet-domains"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>history</category><category>internet</category><category>lisp</category><category>til</category><guid>https://simondobson.org/2024/01/02/til-the-first-ever-com-domain/</guid><pubDate>Tue, 02 Jan 2024 11:44:10 GMT</pubDate></item><item><title>Programmatically editing a file from Emacs Lisp</title><link>https://simondobson.org/2023/12/23/programmatically-editing-a-file-from-emacs-lisp/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org746c351" class="outline-2"&gt;
&lt;h2 id="org746c351"&gt;Programmatically editing a file from Emacs Lisp&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org746c351"&gt;
&lt;p&gt;
This is something I frequently want to do: open a named file, work
on it programmatically using Lisp code, and save it back – all
without user intervention. Like a lot of things in Emacs, it's
easy once you know how.
&lt;/p&gt;

&lt;p&gt;
The trick is to create a new, named, buffer for the file to get
its contents. This is done with &lt;code&gt;find-file-noselect&lt;/code&gt; as opposed to
the more usual &lt;code&gt;find-file&lt;/code&gt; that's usually bound to &lt;code&gt;C-x C-f&lt;/code&gt;, and
as its name suggests finds (opens) the file without bringing it to
the user's attention. For example,
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;;; open the file in its own buffer&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;with-current-buffer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;find-file-noselect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;;; work on it as required, as the current buffer&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;goto-char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-min&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;search-forward&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#+END_COMMENT"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;beginning-of-line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;delete-region&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-max&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;newline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;;; save the results back&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;save-buffer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
(This example comes from my Emacs interface to the Nikola static
site builder used to maintain this site.) The code fragment
leaves the current buffer unchanged as far as the user (and the
rest of the code) is concerned, and so doesn't need to be
protected by &lt;code&gt;save-excursion&lt;/code&gt; or the like.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>lisp</category><guid>https://simondobson.org/2023/12/23/programmatically-editing-a-file-from-emacs-lisp/</guid><pubDate>Sat, 23 Dec 2023 17:16:42 GMT</pubDate></item><item><title>A quick function to delete whitespace in Lisp programs</title><link>https://simondobson.org/2023/01/13/a-quick-function-to-delete-whitespace-in-lisp-programs/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orgd0a15fe" class="outline-2"&gt;
&lt;h2 id="orgd0a15fe"&gt;A quick function to delete whitespace in Lisp programs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd0a15fe"&gt;
&lt;p&gt;
I've recently found myself constantly introducing – and then deleting –
whitespace when writing Lisp. A quick bit of Emacs hacking fixed it.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://simondobson.org/2023/01/13/a-quick-function-to-delete-whitespace-in-lisp-programs/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>lisp</category><guid>https://simondobson.org/2023/01/13/a-quick-function-to-delete-whitespace-in-lisp-programs/</guid><pubDate>Fri, 13 Jan 2023 15:32:37 GMT</pubDate></item></channel></rss>