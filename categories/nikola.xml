<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simon Dobson (Posts about nikola)</title><link>https://simondobson.org/</link><description></description><atom:link href="https://simondobson.org/categories/nikola.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:simoninireland@gmail.com"&gt;Simon Dobson&lt;/a&gt; </copyright><lastBuildDate>Wed, 08 May 2024 15:57:24 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Making small changes to lots of files</title><link>https://simondobson.org/2024/01/01/making-small-changes-to-lots-of-files/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orga050202" class="outline-2"&gt;
&lt;h2 id="orga050202"&gt;Making small changes to lots of files&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga050202"&gt;
&lt;p&gt;
I recently had to make tiny changes to a large number of files
spread nested through a directory structure. This turns out to be a
lot easier than I expected with Emacs.
&lt;/p&gt;

&lt;p&gt;
My use case was actually this blog. It's been on the go for a while
in several different formats, and over the years I've used tags to
drive different presentations – for example articles tagged 'news'
ended up on the front page. I no longer do this, which meant a lot
of redundant tags to be got rid of, mainly in Nikola's &lt;code&gt;.meta&lt;/code&gt;
metadata files but also embedded into &lt;code&gt;.md&lt;/code&gt; markdown and &lt;code&gt;.rst&lt;/code&gt;
restructured text..
&lt;/p&gt;

&lt;p&gt;
My plan was to use Emacs' &lt;code&gt;rgrep&lt;/code&gt; command to recursively traverse
the directory structure of posts to find the tags I wanted to
remove. This would give me a &lt;code&gt;grep&lt;/code&gt;-mode buffer that hyperlinks to
the files (and lines) needing changing, which I could then click
through to get to where each change needed to be made.
Straightforward, but time-consuming and error-prone when there were
about 150 files to be changed. Clearly a problem in need of a better
solution.
&lt;/p&gt;

&lt;p&gt;
I then discovered the &lt;a href="https://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep.el"&gt;&lt;code&gt;wgrep&lt;/code&gt;&lt;/a&gt; ("writable &lt;code&gt;grep&lt;/code&gt;") package. This
makes the &lt;code&gt;grep&lt;/code&gt;-mode buffer editable, with changes being
written-back to the underlying files. &lt;i&gt;Exactly&lt;/i&gt; what I needed.
&lt;/p&gt;

&lt;p&gt;
Once I'd installed &lt;code&gt;wgrep&lt;/code&gt;, the workflow is ridiculously easy:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Using &lt;code&gt;rgrep&lt;/code&gt; gets a &lt;code&gt;grep&lt;/code&gt;-mode buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-p&lt;/code&gt; makes the buffer editable&lt;/li&gt;
&lt;li&gt;Changing the lines. In my case I could use &lt;code&gt;string-replace&lt;/code&gt; to
remove the tags I wanted rid of. More complicated cases might
need &lt;code&gt;regexp-replace&lt;/code&gt; or even manual editing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-x C-s&lt;/code&gt; writes the changes back out&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
(There are several other keybindings that &lt;code&gt;wgrep&lt;/code&gt; makes
available, notably &lt;code&gt;C-c C-k&lt;/code&gt; to discard all changes.)
&lt;/p&gt;

&lt;p&gt;
That's it! A job that I expected to take an hour took about 3
minutes.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>blogging</category><category>emacs</category><category>nikola</category><guid>https://simondobson.org/2024/01/01/making-small-changes-to-lots-of-files/</guid><pubDate>Mon, 01 Jan 2024 16:35:31 GMT</pubDate></item><item><title>Adding filters to a Jinja2 template for Nikola</title><link>https://simondobson.org/2022/10/19/adding-filters-to-a-jinja2-template-for-niklola/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org47916ae" class="outline-2"&gt;
&lt;h2 id="org47916ae"&gt;Adding filters to a Jinja2 template for Nikola&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org47916ae"&gt;
&lt;p&gt;
The &lt;a href="https://jinja.palletsprojects.com/en/3.0.x/"&gt;Jinja2&lt;/a&gt; template engine defines a suite of &lt;a href="https://jinja.palletsprojects.com/en/3.0.x/api/#custom-filters"&gt;filters&lt;/a&gt; that can be
used to transform text as it's rendered. You can define extra custom
filters, and also make them available within &lt;a href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; templates (as
long as the theme uses Jinja as its template engine, of course.)
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://simondobson.org/2022/10/19/adding-filters-to-a-jinja2-template-for-niklola/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>jinja2</category><category>nikola</category><category>publishing</category><category>python</category><guid>https://simondobson.org/2022/10/19/adding-filters-to-a-jinja2-template-for-niklola/</guid><pubDate>Wed, 19 Oct 2022 11:08:59 GMT</pubDate></item></channel></rss>