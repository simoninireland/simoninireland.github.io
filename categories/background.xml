<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simon Dobson (Posts about background)</title><link>https://simondobson.org/</link><description></description><atom:link href="https://simondobson.org/categories/background.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:simon.dobson@computer.org"&gt;Simon Dobson&lt;/a&gt; </copyright><lastBuildDate>Fri, 27 Nov 2020 16:29:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Mesh networking</title><link>https://simondobson.org/blog/2013/07/02/mesh-network/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;A mesh network is a way of setting up a communications system when there's no fixed infrastructure available. They're often used for communications in remote sites, and on sensor networks.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;If you've used wifi, you've used an &lt;em&gt;infrastructural&lt;/em&gt; wireless network in which there is a dedicated router that talks to all the devices in its range (phones, tablets, laptops, wireless-enabled printers, ...) and connects them to the internet. The devices don't talk to each other directly: if they want to exchange information (to print a document, for example) they do &lt;em&gt;via&lt;/em&gt; the router.&lt;/p&gt;
&lt;p&gt;Another kind of infrastructural network is the cellular telephone service. All calls go through the cell towers: if you call your friend, and she happens to be standing next to you, your phone still talks to the nearest cell tower which then talks to her phone -- a round trip that might be a couple of kilometres! While this sounds a bit barmy, it simplifies the design of the network and the software needed to manage it, and is fine in situations where there is plenty of power and room for the infrastructure.&lt;/p&gt;
&lt;p&gt;By contrast to these large-scale systems, XBees provide &lt;a href="https://en.wikipedia.org/wiki/Mesh_networking" target="_blank"&gt;&lt;em&gt;mesh&lt;/em&gt; networking&lt;/a&gt; in which the devices co-operate to route traffic from the sensor motes (using &lt;em&gt;router&lt;/em&gt; radios) to the base station (running a &lt;em&gt;co-ordinator&lt;/em&gt; radio). As well as generating and receiving messages, nodes in the network also co-operate in moving other nodes' traffic. There is no infrastructure -- the nodes are both the users &lt;em&gt;and&lt;/em&gt; the providers of the network -- which means a mesh can be deployed in areas without any "official" network coverage, or to provide functions (like low power) that the infrastructure that &lt;em&gt;is&lt;/em&gt; available can't deliver. Each mesh network works on a particular network protocol, different to the ones used for wifi or cellular telephony.&lt;/p&gt;&lt;/div&gt;</description><category>background</category><category>ditch</category><category>making</category><category>network</category><guid>https://simondobson.org/blog/2013/07/02/mesh-network/</guid><pubDate>Tue, 02 Jul 2013 07:00:45 GMT</pubDate></item><item><title>Actor systems</title><link>https://simondobson.org/blog/2013/06/01/actor-systems/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;In computer science, an &lt;em&gt;actor system&lt;/em&gt; is a way of building programs that are very concurrent and very amenable to scheduling and management.&lt;/p&gt;
&lt;p&gt;The idea of an actor system goes back to the PhD work of &lt;a title="Gul Agha on Wikipedia" href="https://en.wikipedia.org/wiki/Gul_Agha_%28computer_scientist%29" target="_blank"&gt;Gul Agha&lt;/a&gt;. His &lt;a title="The actor model on Wikipedia" href="https://en.wikipedia.org/wiki/Actor_model" target="_blank"&gt;actor mode&lt;/a&gt;l structures programs around a collection of simple agents called (unsurprisingly) &lt;em&gt;actors&lt;/em&gt;. Each actor associates a &lt;em&gt;mailbox&lt;/em&gt; with a &lt;em&gt;behaviour&lt;/em&gt;. The mailbox receives &lt;em&gt;messages&lt;/em&gt; from other actors or from outside the actor system. Messages are queued in mailboxes until processed one at a time by the associated behaviour.&lt;/p&gt;
&lt;p&gt;The behaviour itself is a piece of code that, when run to process a message, performs &lt;em&gt;bounded computation&lt;/em&gt; on the message's contents, which may involve sending messages to other actors and creating other actors (and their mailboxes). The boundedness of the computation is important: an actor is guaranteed to run for a finite amount of time before completing, and so cannot (for example) perform an unbounded loop. An actor's last action before terminating is to nominate a &lt;em&gt;replacement behaviour&lt;/em&gt; for its mailbox, which may be the current behaviour or some new behaviour. (A null behaviour that did nothing in response to a message would essentially delete the actor.)&lt;/p&gt;
&lt;p&gt;The complexity of the system is clearly going to come from how the behaviours are selected an scheduled. The model says very little about scheduling, leaving the implementation to decide when to process messages (by running the behaviour of the associated actor). A single-threaded implementation might repeatedly select a mailbox at random, check whether it contained messages and, if so, process one. A multi-threaded implementation could have one thread per mailbox running behaviours as messages arrive. There are plenty of other possibilities in between: the point is that an actor program doesn't &lt;em&gt;control&lt;/em&gt; the concurrency, it simply &lt;em&gt;induces&lt;/em&gt; it by the way it creates actors and sends messages.&lt;/p&gt;
&lt;p&gt;A system without unbounded loops can't express general computation, but actor systems do allow unbounded computation: they simply force the programmer to create it using communicating actors. An actor wanting to loop forever could, for example, receive a message, perform some processing, send another message to itself (its own mailbox), and then nominate itself as its own replacement behaviour, which would then receive the self-sent message, and so forth.&lt;/p&gt;
&lt;p&gt;If the actor model sounds restrictive, that's because it is deliberately designed that way. Its strength is that it is immune from &lt;a title="Deadlock on Wikipedia" href="https://en.wikipedia.org/wiki/Deadlock" target="_blank"&gt;deadlock&lt;/a&gt;, since the finite behaviours cannot become stuck indefinitely. This doesn't preclude the possibility of &lt;a title="Livelock at Wikipedia" href="https://en.wikipedia.org/wiki/Livelock#Livelock" target="_blank"&gt;livelock&lt;/a&gt; if the system busily processes messages without actually making progress. However, the boundedness of behaviours means that the scheduler is always guaranteed to get control back on a regular basis, which means that there is always the possibility of an actor being able to run&lt;em&gt;, &lt;/em&gt;making actor systems immune to &lt;a title="Starvation at Wikipedia" href="https://en.wikipedia.org/wiki/Resource_starvation" target="_blank"&gt;starvation.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's easy to build something that looks roughly like an actor system in a general-purpose programming language -- and usually pretty much impossible to build something that is &lt;em&gt;actually&lt;/em&gt; an actor system. This is because a general-purpose programming language will allow behaviours that include unbounded loops, so you can't guarantee that a behaviour will terminate, and so you lose one of the major features of actor systems: their deadlock-freedom. With suitable programmer care, however, you can build an actor system quite easily, deploying however much concurrency is appropriate for the application and platform the system runs on.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><category>actors</category><category>background</category><category>ditch</category><category>making</category><guid>https://simondobson.org/blog/2013/06/01/actor-systems/</guid><pubDate>Sat, 01 Jun 2013 18:29:28 GMT</pubDate></item></channel></rss>