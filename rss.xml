<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simon Dobson</title><link>https://simondobson.org/</link><description>Aut tace aut loquere meliora silentio</description><atom:link href="https://simondobson.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:simoninireland@gmail.com"&gt;Simon Dobson&lt;/a&gt; </copyright><lastBuildDate>Sat, 23 Mar 2024 12:47:22 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>The Romanovs: 1613-1918</title><link>https://simondobson.org/goodreads/the-romanovs-1613-1918/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div&gt;
    &lt;div&gt;
      &lt;img src="https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1435023227l/21094391._SX98_.jpg" style="float: left; margin-right: 10px"&gt;
      &lt;h2&gt;
	Simon Sebag Montefiore
	  (2016)
      &lt;/h2&gt;
    &lt;/div&gt;
    &lt;p&gt;
      When complimented on his armies capturing Berlin at the end of the Second World War, Stalin famously replied that "Tsar Alexander made it to Paris." This book describes how, and why, that happened – and why it meant to much to Stalin, on whom Sebag Montefirore is of course a recognised expert.&lt;br&gt;&lt;br&gt;The sweep of Romanov history is epic in all senses. It's impossible not to realise how deeply &lt;i&gt;personal&lt;/i&gt; their rule was, identifying their own reigns absolutely with Russia and its greatness. The main characters are all flawed in tragic ways, sometimes grotesque but equally often brilliant and self-aware within the limitations of their eras – which none ever really managed to trascend, with the possible exception of Peter and later Catherine, each known as "the Great" for that reason.&lt;br&gt;&lt;br&gt;The story is made powerful by recent research in the Russian archives and access to previously-unkown letters between Alexander II and his mistress, and later between Nicholas II and Alexandra. They highlight the impact of extra-marital affairs on high policy right across the Romonov era: it's often hard to keep track of who is related to (or sleeping with) whom, or to understand the true importance of some of the less well-known characters in the story who may have have had an advisory impact far beyond what their "official" position might suggest.&lt;br&gt;&lt;br&gt;It's a book that's hard on autocracy – but also quite hard on the alternatives that came after. Sebag Montefiore sees a continuity between the tsars, Lenin, Stalin, and Putin, and almost seems to regard it as inevitable that Russia will need strongman leadership. One can perhaps hope not.
      &lt;/p&gt;&lt;p&gt;
	5/5.
	  Finished Saturday 23 March, 2024.
	&lt;/p&gt;&lt;p&gt;
	  (Originally published on &lt;a href="https://www.goodreads.com/review/show/1522092865?utm_medium=api&amp;amp;utm_source=rss"&gt;Goodreads&lt;/a&gt;.)
  &lt;/p&gt;&lt;/div&gt;</description><category>books</category><category>reviews</category><guid>https://simondobson.org/goodreads/the-romanovs-1613-1918/</guid><pubDate>Sat, 23 Mar 2024 00:00:00 GMT</pubDate></item><item><title>Escape from Model Land: How Mathematical Models Can Lead Us Astray and What We Can Do About It</title><link>https://simondobson.org/goodreads/escape-from-model-land-how-mathematical-models-can-lead-us-astray-and-what-we-can-do-about-it/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div&gt;
    &lt;div&gt;
      &lt;img src="https://s.gr-assets.com/assets/nophoto/book/111x148-bcc042a9c91a29c1d680899eff700a03.png" style="float: left; margin-right: 10px"&gt;
      &lt;h2&gt;
	Erica Thompson
	  (2022)
      &lt;/h2&gt;
    &lt;/div&gt;
    &lt;p&gt;
      A thoughtful look at modelling by an experienced climate modeller.&lt;br&gt;&lt;br&gt;What are models &lt;i&gt;for&lt;/i&gt;? The most common answer would be "to predict the future behaviour of some system," but Thompson argues a far more subtle line: that the most important models often &lt;i&gt;fail&lt;/i&gt; to be predictive in any real sense. Much of this is down to problems of validation, especially in climate models for which we have no experience of the world the models are trying to predict.&lt;br&gt;&lt;br&gt;An even more subtle mistake is regarding all models as "cameras" that simply observe the world. That's true for the more abstract kinds of modelling, where one is trying to understand possible behaviours of systems in general without tying them to specific circumstances. But the models with which most people are familiar act ore like "engines" that can perturb the system they're purporting simply to observe by baing used as drivers for policy. Climate and epidemic models seek to warn as well as predict and understand, but this exacerbates the problems of validation: if the model's predictions &lt;i&gt;don't&lt;/i&gt; come to pass, perhaps this is because policy-makers took corrective actions in response, or maybe bacause they didn't intervent effectively enough. This isn't a reason to give up on modelling altogether: how else are we to understand complex systems, and how else are we to respond rationally to them? But it does mean that the notion of "following the science" problematic.&lt;br&gt;&lt;br&gt;Thompson also wrestles with the problem of groupthink amongst modellers, who often share a common overallping background. I agree this is a problem, but the idea that we can increase diversity in the community easily seems flawed to me. Modellers share a scientific viewpoint and a belief in modelling, and no-one who doesn't will ever be able to effectively engage with the models or their arguments. Perhaps it's enough that scientists are always advisors and never decision-makers, and allow politicians to deal with the integration of different choices and values – although that split isn't always appreciated by the public, and is often (as in the covid-19 pandemic) deliberately blurred to allow less-trusted politicians to draw credibility from more-trusted scientists and doctors.&lt;br&gt;&lt;br&gt;Overall I think this is a lucid and valiant attempt to summarise and explore the benefits and limitations of models, and science in general, when it impacts directly on the wider world. It deserves to be widely read in the scientific community so that we can better understand our place in policies that we often unavoidably have to influence.&lt;br&gt;&lt;br&gt;
      &lt;/p&gt;&lt;p&gt;
	4/5.
	  Finished Friday 22 March, 2024.
	&lt;/p&gt;&lt;p&gt;
	  (Originally published on &lt;a href="https://www.goodreads.com/review/show/5150032848?utm_medium=api&amp;amp;utm_source=rss"&gt;Goodreads&lt;/a&gt;.)
  &lt;/p&gt;&lt;/div&gt;</description><category>books</category><category>reviews</category><guid>https://simondobson.org/goodreads/escape-from-model-land-how-mathematical-models-can-lead-us-astray-and-what-we-can-do-about-it/</guid><pubDate>Fri, 22 Mar 2024 00:00:00 GMT</pubDate></item><item><title>How Lisp is designing nanotechnology</title><link>https://simondobson.org/2024/03/15/how-lisp-is-designing-nanotechnology/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org73b3aa3" class="outline-2"&gt;
&lt;h2 id="org73b3aa3"&gt;How Lisp is designing nanotechnology&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org73b3aa3"&gt;
&lt;p&gt;
&lt;a href="https://www.youtube.com/watch?v=fytGL8vzGeQ"&gt;How Lisp is designing nanotechnology&lt;/a&gt; (video, 52 minutes).
&lt;/p&gt;

&lt;p&gt;
An interview on the &lt;a href="https://www.youtube.com/@DeveloperVoices"&gt;Developer Voices&lt;/a&gt; podcast with &lt;a href="https://www.schafmeistergroup.com/"&gt;Prof Christian
Schafmeister&lt;/a&gt; on designing enzymes using a custom dialect of Lisp
to control computational chemistry libraries.
&lt;/p&gt;

&lt;p&gt;
He initially started from an idea based on CAD applications
(written in Smalltalk), but rapidly realised there were too many
possible components and combinations to work with graphically and
so started treating it as a language-design problem – and
designed a custom Lisp based on &lt;a href="https://ecl.common-lisp.dev/"&gt;ECL&lt;/a&gt;. Lisp provides simplicity and
efficiency, as well as being a "forever" language in which
software keeps working over the long term.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>applications</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/15/how-lisp-is-designing-nanotechnology/</guid><pubDate>Fri, 15 Mar 2024 19:19:15 GMT</pubDate></item><item><title>A micro-manual for Lisp: Not the whole truth</title><link>https://simondobson.org/2024/03/15/a-micro-manual-for-lisp-not-the-whole-truth/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orge13fcda" class="outline-2"&gt;
&lt;h2 id="orge13fcda"&gt;A micro-manual for Lisp: Not the whole truth&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge13fcda"&gt;
&lt;p&gt;
John McCarthy.  &lt;i&gt;&lt;a href="https://doi.org/10.1145/960118.808386"&gt;A Micro-Manual for Lisp: Not the Whole Truth&lt;/a&gt;&lt;/i&gt;. ACM
SIGPLAN Notices &lt;b&gt;13&lt;/b&gt;, pp.215–216. 1978.
&lt;/p&gt;

&lt;p&gt;
A "manual" in the sense of providing a complete implementation of
Lisp – in Lisp itself.
&lt;/p&gt;

&lt;p&gt;
Is that useful? A semantics expert would say "no", since such a
model has no real explanatory power: the recursion doesn't
bottom-out to define the concepts. However, a programming language
expert might disagree and observe that this is &lt;i&gt;meta-linguistic
abstraction&lt;/i&gt;, the use of one high-level language to capture the
definition of another. The "host" language provides a higher level
of abstraction than is usual when writing interpreters and
compilers, so it becomes easier to experiment with different forms
of "target" language as there's less low-level work to do. This
benefit exists even when host and target are the same: essentially
the target is bootstrapped and can then be adjusted while running
within an earlier version of itself.
&lt;/p&gt;

&lt;p&gt;
As far as I know this is the first example of meta-linguistic
abstraction in the computer science literature. The idea was
popularised by &lt;a href="/2024/01/27/structure-and-interpretation-of-computer-programs/"&gt;SICP&lt;/a&gt; (using Scheme), and forms the basis for a lot
of modern bootstrapped compilers.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>history</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/15/a-micro-manual-for-lisp-not-the-whole-truth/</guid><pubDate>Fri, 15 Mar 2024 17:25:10 GMT</pubDate></item><item><title>The Lisp machine</title><link>https://simondobson.org/2024/03/14/the-lisp-machine/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orgdeaa592" class="outline-2"&gt;
&lt;h2 id="orgdeaa592"&gt;The Lisp machine&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdeaa592"&gt;
&lt;p&gt;
Richard Greenblatt.  &lt;i&gt;&lt;a href="https://dspace.mit.edu/bitstream/handle/1721.1/41114/AI_WP_079.pdf"&gt;The Lisp Machine&lt;/a&gt;&lt;/i&gt;. Working
paper 79. MIT AI Laboratory. 1974.
&lt;/p&gt;

&lt;p&gt;
A description of the architecture later built and sold by LMI.
&lt;/p&gt;

&lt;p&gt;
A visionary description of a machine to run Lisp at a
"non-prohibitive cost" of $70,000 per system. (The web tells me
that this is the equivalent of &lt;a href="https://www.in2013dollars.com/us/inflation/1974?amount=70000"&gt;$440,000&lt;/a&gt; in 2024.) A completely
integrated system based on a Cons processor and using a PDP-11 as
a console. A relocating, compacting, garbage collector with
invisible forwarding pointers. Non-linear spaghetti stacks to
support advanced programming constructs.
&lt;/p&gt;

&lt;p&gt;
One of the many notable facets of this design is one of its
proposals (the "frame pushdown list") to avoid excessive conses
and garbage collection overhead by maintaining lists of blocks of
particular sizes. It uses this approach to manage the creation of
call stack frames; modern Python implementations use this scheme
throughout to avoid heap fragmentation through allocating and
re-allocating blocks of different sizes. (Lisp has this feature
generally, of course, with its use of fixed-size cons cells.)
&lt;/p&gt;

&lt;p&gt;
It's also fascinating to see that, even at this early stage,
hardware design was being seen as an exercise in refinement to
maintain software-level abstractions even as features were being
pushed into hardware – while still providing optimised
implementations that were invisible to the programmer.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>hardware</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/14/the-lisp-machine/</guid><pubDate>Thu, 14 Mar 2024 16:50:46 GMT</pubDate></item><item><title>Lisp for the web</title><link>https://simondobson.org/2024/03/10/lisp-for-the-web/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org8cbb477" class="outline-2"&gt;
&lt;h2 id="org8cbb477"&gt;Lisp for the web&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8cbb477"&gt;
&lt;p&gt;
Adam Tornhill.  &lt;i&gt;&lt;a href="http://leanpub.com/lispweb"&gt;Lisp for the Web&lt;/a&gt;&lt;/i&gt;. Leanpub. 2015.
&lt;/p&gt;

&lt;p&gt;
A short, practical guide to build a dynamic web site entirely
using Common Lisp. Makes extensive use of several libraries,
including the intriguingly-named &lt;a href="https://edicl.github.io/hunchentoot/"&gt;hunchentoot&lt;/a&gt; web server (named
after a never-staged musical written by Frank Zappa), the &lt;a href="https://edicl.github.io/cl-who/"&gt;CL-WHO&lt;/a&gt;
HTML generator, and – perhaps most interesting – the &lt;a href="https://cliki.net/Parenscript"&gt;Parenscript&lt;/a&gt;
Lisp to Javascript compiler.
&lt;/p&gt;

&lt;p&gt;
One gain from using Lisp is the ability to wrap-up standard
constructions like page templates as macros. Other than this, it's
hard to assess whether the gains are all that significant. One
interesting point is that the whole development occurs in Lisp, so
there's no cognitive dissonance between writing the back-end and
the front-end: essentially the same argument for using &lt;a href="https://nodejs.org/"&gt;node.js&lt;/a&gt; as
a back-end framework. While Parenscript isn't a fully-featured
Lisp-in-the-browser it again can benefit from macros and other
features. There's a throwaway comment about linking it to &lt;a href="https://jquery.com/"&gt;jQuery&lt;/a&gt;,
although that isn't demonstrated in practice: it feels intriguing,
though, especially if there's a way to represent jQuery
functionality idiomatically in Lisp.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>applications</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/10/lisp-for-the-web/</guid><pubDate>Sun, 10 Mar 2024 10:28:45 GMT</pubDate></item><item><title>List processing</title><link>https://simondobson.org/2024/03/07/list-processing/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orge901cfd" class="outline-2"&gt;
&lt;h2 id="orge901cfd"&gt;List processing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge901cfd"&gt;
&lt;p&gt;
J.M. Foster.  &lt;i&gt;List Processing&lt;/i&gt;. Macdonald and Co. 1967.
&lt;/p&gt;

&lt;p&gt;
A slim volume discussing list processing with reference to Lisp
and to other list processing systems of the time (including some
libraries embedded into Fortran).
&lt;/p&gt;

&lt;p&gt;
The most fascinating part of the book is its bibliography, which
references a lot of papers that have disappeared from the
collective memory of computer science, but whose implications
were profound.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>history</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/07/list-processing/</guid><pubDate>Thu, 07 Mar 2024 19:39:09 GMT</pubDate></item><item><title>Recursive functions of symbolic expressions and their computation by machine, Part I</title><link>https://simondobson.org/2024/03/07/recursive-functions-of-symbolic-expressions-and-their-computation-by-machine-part-i/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org59665c6" class="outline-2"&gt;
&lt;h2 id="org59665c6"&gt;Recursive functions of symbolic expressions and their computation by machine, Part I&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org59665c6"&gt;
&lt;p&gt;
John McCarthy.  &lt;i&gt;&lt;a href="https://doi.org/10.1145/367177.367199"&gt;Recursive Functions of Symbolic Expressions and
Their Computation by Machine, Part I&lt;/a&gt;&lt;/i&gt;. Communications of the ACM
&lt;b&gt;3&lt;/b&gt;, pp.184–195. 1960.
&lt;/p&gt;

&lt;p&gt;
The original Lisp paper from 1960, which opens:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
A programming system called LISP (for LISt Processor) has been
developed for the IBM 704 computer…
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The paper then proceeds to lay out everything that's since been
built on: the basic constructs, the use of cons cells (pairs) as a
data representation, the world's first garbage collection algorithm,
an equational semantics, and ideas for interpretation and
compilation. It's awesome, and humbling to read it and realise its
age and the vision of computing it developed.
&lt;/p&gt;

&lt;p&gt;
(Despite this paper being labelled Part I, incidentally, there
isn't a part II.)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>history</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/07/recursive-functions-of-symbolic-expressions-and-their-computation-by-machine-part-i/</guid><pubDate>Thu, 07 Mar 2024 19:34:45 GMT</pubDate></item><item><title>Paradigms of artificial intelligence programming: Case studies in Common Lisp</title><link>https://simondobson.org/2024/03/07/paradigms-of-artificial-intelligence-programming-case-studies-in-common-lisp/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orgca14d34" class="outline-2"&gt;
&lt;h2 id="orgca14d34"&gt;Paradigms of artificial intelligence programming: Case studies in Common Lisp&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgca14d34"&gt;
&lt;p class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/55/a8fc4d-075e-4914-90ea-c2bcc0021821/screenshot.png" alt="nil"&gt;
&lt;/p&gt;


&lt;p&gt;
Peter Norvig.  &lt;i&gt;&lt;a href="https://norvig.github.io/paip-lisp/"&gt;Paradigms of Artificial Intelligence Programming:
Case Studies in Common Lisp&lt;/a&gt;&lt;/i&gt;. Morgan Kaufmann. 1992.
&lt;/p&gt;

&lt;p&gt;
An absolute classic of both AI and Lisp, and really two books in
one. The applications presented cover the entire range of
"classic" AI up to the late 90s: expert systems, logic
programming, symbolic mathematics, knowledge representation,
constraint programming, game search, syntax-driven natural
language processing, and more.
&lt;/p&gt;

&lt;p&gt;
It uses Lisp as the programming vehicle, and doesn't shy-away from
depth, dealing with the effects of garbage collection (and how to
program effectively in its presence), the effects of different
representations, low-level optimisation and disassembly, and all
the approaches one needs to use Lisp in real, scalable practice.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>advanced-tutorial</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/07/paradigms-of-artificial-intelligence-programming-case-studies-in-common-lisp/</guid><pubDate>Thu, 07 Mar 2024 19:07:31 GMT</pubDate></item><item><title>Common Lisp recipes: A problem-solution approach</title><link>https://simondobson.org/2024/03/06/common-lisp-recipes-a-problem-solution-approach/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org89dc61a" class="outline-2"&gt;
&lt;h2 id="org89dc61a"&gt;Common Lisp recipes: A problem-solution approach&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org89dc61a"&gt;
&lt;p class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/2e/6e47a1-73a8-4ac5-a703-1f6ab0a2262b/screenshot.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Edmund Weitz.  &lt;i&gt;&lt;a href="https://doi.org/10.1007/978-1-4842-1176-2"&gt;Common Lisp Recipes: A Problem-Solution Approach&lt;/a&gt;&lt;/i&gt;.
Apress. 2016.
&lt;/p&gt;

&lt;p&gt;
An extensive list of recipes for using common data structures,
how the differ in Lisp from the equivalents in other languages,
and what novel features Lisp has to offer. A great place to start
when moving away from being a beginner, and for dipping into in
search of solutions.
&lt;/p&gt;

&lt;p&gt;
It's probably strongest on the "gotchas" and dangers that Lisp
presents, but also has a lot to say about coding style and code
optimisation.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>advanced-tutorial</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/06/common-lisp-recipes-a-problem-solution-approach/</guid><pubDate>Wed, 06 Mar 2024 18:55:31 GMT</pubDate></item></channel></rss>