<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simon Dobson</title><link>https://simondobson.org/</link><description>Aut tace aut loquere meliora silentio</description><atom:link href="https://simondobson.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:simoninireland@gmail.com"&gt;Simon Dobson&lt;/a&gt; </copyright><lastBuildDate>Sat, 03 Feb 2024 19:02:19 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Local email from Office365 using OAUTH2 with mbsync</title><link>https://simondobson.org/2024/02/03/getting-email/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org47b9586" class="outline-2"&gt;
&lt;h2 id="org47b9586"&gt;Local email from Office365 using OAUTH2 with &lt;code&gt;mbsync&lt;/code&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org47b9586"&gt;
&lt;p&gt;
I decided recently I wanted to have a more controlled email setup,
with a local archive rather than relying on remote servers
to keep everything. The point of this is twofold:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;To have a local archive of email, separate from the corporate
servers in case I need to change provider etc&lt;/li&gt;
&lt;li&gt;To use different MUAs locally, rather than being stuck with only
a few that will work with all the providers and that are clunky
and not well-integrated with my workflow&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
There's a lot of outdated information on the web about how to set
this up and it took some time for me to get a working setup, so I
thought I'd share my experience. Specifically this involves
interfacing command-line email receiving and sending to a Microsoft
Office365 server using IMAP and SMTP with corporate-grade OAUTH2 2FA
authentication: it's the last part that's tricky. As a bonus the
same approach also works for OAUTH2 and Gmail, dispensing with
insecure application passwords.
&lt;/p&gt;

&lt;p&gt;
In case it's not obvious by now, this is a hacker set-up that
requires quite a lot of technical manual configuration.
&lt;/p&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgdd98514" class="outline-3"&gt;
&lt;h3 id="orgdd98514"&gt;How the internet email architecture works&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgdd98514"&gt;
&lt;p&gt;
The old-school approach to email involves several elements, each
potentially provided by a different tool:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;a client program or &lt;i&gt;mail user agent&lt;/i&gt; (MUA) that presents email
to you and lets you search, delete, store, etc;&lt;/li&gt;
&lt;li&gt;a retrieval program or &lt;i&gt;mail delivery agent&lt;/i&gt; (MDA) that retrieves
mail from the providers and manages local email directories&lt;/li&gt;
&lt;li&gt;a sending program or &lt;i&gt;mail transfer agent&lt;/i&gt; (MTA) that takes; and
locally-created messages and transfer them to their intended
recipients.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
Modern GUI email clients like Thunderbird typically wrap-up all
three services into one program that's easier to deploy and manage,
but that therefore forces certain choices on the user. By reverting
to the older architecture we regain flexibility and choice, at the
expense of making our lives harder.
&lt;/p&gt;

&lt;p&gt;
All these tools need to authenticate against other services.
Traditionally this used usernames and passwords, which are clearly
inadequate for the modern web. Instead we need a system based
around stronger encryption.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://en.wikipedia.org/wiki/OAuth"&gt;OAUTH2&lt;/a&gt; is a an authorisation delegation protocol that lets a site
grant access to someone who's authenticated against another,
without getting sight of their credentials. The typical use case is
for a web site to allow users to sign-in using social media
services like Facebook or Google, which reduces the number of
passwords a user needs to remember or manage – and, totally
incidentally I'm sure, improves the social media services' ability
to track users' activities across the web.
&lt;/p&gt;

&lt;p&gt;
In our case, the OAUTH2 "flow" interacts with the authentication
provider and acquires a bearer token that can then be presented to
authorise access to the various email services.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org174ea36" class="outline-3"&gt;
&lt;h3 id="org174ea36"&gt;Outline solution&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org174ea36"&gt;
&lt;p&gt;
In outline the solution is as follows:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Install &lt;code&gt;mbsync&lt;/code&gt; as MDA&lt;/li&gt;
&lt;li&gt;Set up OAUTH2 authentication for Office365&lt;/li&gt;
&lt;li&gt;Use the to authenticate &lt;code&gt;mbsync&lt;/code&gt; against Office365 to allow
retrieval&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;msmtp&lt;/code&gt; as MTA, using the same authentication scheme&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;mu4e&lt;/code&gt; as MUA, since I want to read my email from inside
Emacs&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6d4a31a" class="outline-3"&gt;
&lt;h3 id="org6d4a31a"&gt;Packages&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6d4a31a"&gt;
&lt;p&gt;
Under Arch Linux we need the &lt;code&gt;isync&lt;/code&gt; package for synchronisation
and the &lt;code&gt;cyrus-sasl-xoauth2&lt;/code&gt; provider for OAUTH authentication.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   sudo pacman -S isync
   yay -S cyrus-sasl-xoauth2
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The same packages are available for other distros under similar
names. Note that the actual synchronisation tool is called
&lt;code&gt;mbsync&lt;/code&gt;, even though the package that contains it is called
&lt;code&gt;isync&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0776123" class="outline-3"&gt;
&lt;h3 id="org0776123"&gt;OAUTH2 flow management&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0776123"&gt;
&lt;p&gt;
We want to use OAUTH2 to authenticate an IMAP transaction, so that
no additional passwords are needed. To this we need a script to
manage the OAUTH2 flow.
&lt;/p&gt;

&lt;p&gt;
Weirdly for an operation that's becoming so common on the web,
there doesn't seem to be a package that offers OAUTH2 from the
command line. However, there &lt;i&gt;is&lt;/i&gt; a script that does it that's
included as an example with &lt;code&gt;mutt&lt;/code&gt; MUA, and we can use that. It can
be found (in Arch) in the &lt;code&gt;mutt&lt;/code&gt; package.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   sudo pacman -S mutt
   cp /usr/share/doc/mutt/samples/mutt_oauth2.py .
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This puts a copy of the script into the current directory, which we
can then edit in two ways:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;add the internal application identification and client secrets
for accessing Office365; and&lt;/li&gt;
&lt;li&gt;set up the security for the OAUTH2 access tokens when they're
downloaded and held locally.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
The client secret and app id need to be "proper", in the sense that
Office365 knows about them – but weirdly they &lt;i&gt;don't&lt;/i&gt; have to be
related to your email domain or cloud tenancy. It's perfectly fine
to use credentials available in the public domain, for example
those of Thunderbird:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="n"&gt;AppID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"08162f7c-0fd2-4200-a84a-f25a4db0b584"&lt;/span&gt;
   &lt;span class="n"&gt;ClientSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"TxRBilcHdC6WGBee]fs?QR:SJ8nI[g82"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
(I got these from &lt;a href="https://www.dcs.gla.ac.uk/~jacobd/posts/2022/03/configure-mutt-to-work-with-oauth-20/"&gt;here&lt;/a&gt;, but other than that have no idea where
they come from: they're &lt;i&gt;not&lt;/i&gt; the same as those in the
&lt;a href="https://hg.mozilla.org/comm-central/file/tip/mailnews/base/src/OAuth2Providers.jsm"&gt;Thunderbird source code&lt;/a&gt;, as far as I can tell.)
&lt;/p&gt;

&lt;p&gt;
The &lt;code&gt;mutt_oauth2.py&lt;/code&gt; script stores the tokens it manages in a
&lt;code&gt;gpg&lt;/code&gt;-encrypted file. You therefore need to provide your &lt;code&gt;gpg&lt;/code&gt;
keypair identification, and I'm assuming anyone wanting to get
local email has one of those! Mine is "simoninireland".
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="n"&gt;GPGKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"simoninireland"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I edited the file to look like this, with some details elided:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="n"&gt;MSAppID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"08162f7c-0fd2-4200-a84a-f25a4db0b584"&lt;/span&gt;
   &lt;span class="n"&gt;MSClientSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"TxRBilcHdC6WGBee]fs?QR:SJ8nI[g82"&lt;/span&gt;
   &lt;span class="n"&gt;GPGKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"simoninireland"&lt;/span&gt;

   &lt;span class="n"&gt;ENCRYPTION_PIPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'gpg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'--encrypt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'--recipient'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GPGKey&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="n"&gt;DECRYPTION_PIPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'gpg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'--decrypt'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

   &lt;span class="n"&gt;registrations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="s1"&gt;'google'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="o"&gt;...&lt;/span&gt;
           &lt;span class="s1"&gt;'client_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="s1"&gt;'client_secret'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;},&lt;/span&gt;
       &lt;span class="s1"&gt;'microsoft'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="o"&gt;...&lt;/span&gt;
           &lt;span class="s1"&gt;'client_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MSAppID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="s1"&gt;'client_secret'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MSClientSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Put resulting script into &lt;code&gt;/usr/local/bin&lt;/code&gt; and make it executable.
Then run it in "authorisation" mode. The token file can go
anywhere: I put it in the directory used by &lt;code&gt;pass&lt;/code&gt; to allow for an
alternative access route:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mutt_oauth2.py -t .password-store/email/work.gpg --authorize
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This will ask some questions:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;we want "microsoft" authentication&lt;/li&gt;
&lt;li&gt;and a "localhostauthcode" flow&lt;/li&gt;
&lt;li&gt;enter your email address (the actual user, not any alias)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
and it prints out a URL to copy into a browser to authenticate
against Office365's web interface. In my case this involved
interacting with the university's single sign-on and two-factor
authentication (2FA) system. Doing this successfully put the
necessary OAUTH2 tokens, encrypted, into the specified file.
Running:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mutt_oauth2.py -t .password-store/email/work.gpg
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
will output the token, refreshing it automatically if it's
expired. This may ask for the GPG key's passphrase, if it has one,
and if it's not available from a local key agent.
&lt;/p&gt;

&lt;p&gt;
(All this security means that the bearer tokens are stored
ensryoted at rest. It's a little inconvenient, though, as it means
you need to enter a &lt;code&gt;gpg&lt;/code&gt; passphrase periodically, and makes it
hard to run &lt;code&gt;mbsync&lt;/code&gt; in a &lt;code&gt;cron&lt;/code&gt; job. This is fine if, like me,
your level of security paranoia is such that you accept the minor
inconvenience in exchange for not having plain-text access tokens
lying around; on the other hand, you may decide that using, for
example, a machine with full-disc encryption is secure enough, in
which case you need to edit the &lt;code&gt;ENCRYPTION_PIPE&lt;/code&gt; and
&lt;code&gt;DECRYPTION_PIPE&lt;/code&gt; commands in the script to not do encryption: they
can basically just use &lt;code&gt;cat&lt;/code&gt; to get the information.)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf8b9635" class="outline-3"&gt;
&lt;h3 id="orgf8b9635"&gt;&lt;code&gt;mbsync&lt;/code&gt; for Office365&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf8b9635"&gt;
&lt;p&gt;
We now have OAUTH2 tokens for accessing Office365, which we can
integrate with our MDA. &lt;code&gt;mbsync&lt;/code&gt; has four main concepts:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Accounts, typically using IMAP&lt;/li&gt;
&lt;li&gt;IMAP message stores, which are remote&lt;/li&gt;
&lt;li&gt;Maildir stores, which are local&lt;/li&gt;
&lt;li&gt;Channels, which tie local and remote together&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
Maildir is a file format for storing email in a directory
structure, and is a long-running standard that's supported by lots
of tools. A maildir is typically presented in the MUA to a user as
a folder, and represented to the MDA as a directory.
&lt;/p&gt;

&lt;p&gt;
For Office365 we have:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   IMAPAccount work
   Host outlook.office365.com
   Port 993
   User &amp;lt;&amp;lt;work-email&amp;gt;&amp;gt;
   PassCmd "mutt_oauth2.py -t ~/.password-store/email/work.gpg"
   AuthMechs XOAUTH2
   SSLType IMAPS

   IMAPStore work-remote
   Account work

   MaildirStore work-local
   Subfolders Verbatim
   Path ~/Maildir/Work/
   Inbox ~/Maildir/Work/Inbox

   Channel Work
   Far :work-remote:
   Near :work-local:
   Patterns * !"Conversation History" !Calendar !Archive !Archives !Clutter !Drafts
   Create Both
   Expunge Both
   SyncState *
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
(See the &lt;code&gt;mbsync&lt;/code&gt; man pages for the details of its configuration.
&lt;code&gt;&amp;lt;&amp;lt;work-email&amp;gt;&amp;gt;&lt;/code&gt; should be a a proper username, not an alias.)
For our purposes the important line is the &lt;code&gt;PassCmd&lt;/code&gt; that calls our
edited script to retrieve the OAUTH2 bearer token. Email will be
downloaded into a maildir tree rooted at &lt;code&gt;~/Maildir/Work&lt;/code&gt;: you need
to create this before sync-ing.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mkdir -p ~/Maildir/Work
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf995f36" class="outline-3"&gt;
&lt;h3 id="orgf995f36"&gt;Sync'ing the email&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf995f36"&gt;
&lt;p&gt;
For a full sync of all maildirs just run:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mbsync -a
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
That can be time-consuming, as all the maildirs (&lt;i&gt;i.e.&lt;/i&gt;, folders)
have to be visited – and I have several hundred. A faster
option is to normally just look at (for example) the inbox:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mbsync Work:INBOX
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This will ignore everything else, which means they'll drift – but
can be re-sync'ed periodically by running a full sync. One could
also set up a &lt;code&gt;cron&lt;/code&gt; job to do a full sync early every morning, for
example, as long as the access token was held unencrypted (see
above).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2b4cc1b" class="outline-3"&gt;
&lt;h3 id="org2b4cc1b"&gt;Indexing email&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2b4cc1b"&gt;
&lt;p&gt;
You'll almost certainly now want to index your newly-downloaded
trove of messages. There are two common tools for this &lt;code&gt;mu&lt;/code&gt; and
&lt;code&gt;notmuch&lt;/code&gt;. Both do basically the same job of maintaining a
structured and full-text index of messages that can be queried by
an appropriate MUA. I chose &lt;code&gt;mu&lt;/code&gt;, for no particular reason: some
people swear by &lt;code&gt;notmuch&lt;/code&gt;, which is based on extensive tagging of
messages and so might be more familiar to Gmail users.
&lt;/p&gt;

&lt;p&gt;
To install &lt;code&gt;mu&lt;/code&gt;, we first grab the packages:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   pacman -S mu
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We then initialise the index by running the indexer over the
maildir. If we also provide our own email addresses it knows to
index these differently.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mu init -m ~/Maildir --my-address=&amp;lt;&amp;lt;work-email&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd48652b" class="outline-3"&gt;
&lt;h3 id="orgd48652b"&gt;Sending email&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd48652b"&gt;
&lt;p&gt;
All of the above sets up the MDA to &lt;i&gt;get&lt;/i&gt; mail: we now need to be
able to &lt;i&gt;send&lt;/i&gt; mail. Fortunately we've already done most of the
hard work needed to get this working.
&lt;/p&gt;

&lt;p&gt;
We need a local MTA, for which I chose &lt;code&gt;msmtp&lt;/code&gt;. It understands
OAUTH2 natively. Installation in Arch is easy:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   sudo pacman -S msmtp
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It needs to be pointed at the Office365 SMTP server and provided
with the OAUTH2 tokens, which are the same as we used above:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   defaults
   auth           on
   tls            on
   tls_starttls   on
   tls_trust_file /etc/ssl/certs/ca-certificates.crt
   logfile        ~/.msmtp.log

   account        work
   host           smtp.office365.com
   port           587
   auth           xoauth2
   user           &amp;lt;&amp;lt;work-email&amp;gt;&amp;gt;
   from           &amp;lt;&amp;lt;work-email&amp;gt;&amp;gt;
   passwordeval   "mutt_oauth2.py -t ~/.password-store/email/work.gpg"

   account default : work
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Again, see the &lt;code&gt;msmtp&lt;/code&gt; man pages for the details of this, and
replace &lt;code&gt;&amp;lt;&amp;lt;work-email&amp;gt;&amp;gt;&lt;/code&gt; as appropriate: the only interesting part
from our current perspective is that the &lt;code&gt;passwordeval&lt;/code&gt; line calls
exactly the same script as we used above.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org863f2b8" class="outline-3"&gt;
&lt;h3 id="org863f2b8"&gt;Reading and writing email&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org863f2b8"&gt;
&lt;p&gt;
Finally we're ready to read email. I'll leave this to you: there
are lots of text-based email clients around, notably &lt;code&gt;mutt&lt;/code&gt; that we
encountered earlier. There's also &lt;code&gt;mu4e&lt;/code&gt; for reading email in
Emacs, making use of the &lt;code&gt;mu&lt;/code&gt; index; and &lt;code&gt;notmuch&lt;/code&gt; also has an
Emacs interface.
&lt;/p&gt;

&lt;p&gt;
I use &lt;code&gt;mu4e&lt;/code&gt;. There's a lot of documentation on the web for setting
this up, all of which applies immediately to our new set-up: the
MUA is entirely independent of the MDA and MTA, and simply needs to
be pointed at the right directories and accounts.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgad388d0" class="outline-3"&gt;
&lt;h3 id="orgad388d0"&gt;Accessing Gmail using OAUTH2&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgad388d0"&gt;
&lt;p&gt;
Gmail lets one use "app passwords" for accessing using IMAP, but
also supports OAUTH2, which is obviously more secure. The same
approach as above works for Gmail too. The initial credentials are:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="n"&gt;GAppID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'406964657835-aq8lmia8j95dhl1a2bvharmfk3t1hgqj.apps.googleusercontent.com'&lt;/span&gt;
   &lt;span class="n"&gt;GClientSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'kSmqreRr0qwBWJgbf5Y-PjSU'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
(&lt;a href="https://www.dcs.gla.ac.uk/~jacobd/posts/2022/03/configure-mutt-to-work-with-oauth-20/"&gt;Same source&lt;/a&gt; as above.) Edit these into the script and change the
entries in the config files to call it to authenticate with an
appropriate store, for example:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mutt_oauth2.py -t .password-store/email/personal.gpg --authorize
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and similarly in the configurations of &lt;code&gt;mbsync&lt;/code&gt; and &lt;code&gt;msmtp&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org68646ad" class="outline-3"&gt;
&lt;h3 id="org68646ad"&gt;Conclusion&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org68646ad"&gt;
&lt;p&gt;
If you're still with me: congratulations, but you must &lt;i&gt;really&lt;/i&gt;
want to read your email old-school!
&lt;/p&gt;

&lt;p&gt;
For me, this has completely changed my relationship with email in
ways I didn't expect. Using Emacs means typically not having the
client visible all the time, which reduces the temptation to check
all the time. Instead I can adopt a more structured approach and
only check my email when I want to, which often means only three or
four times a day. It's also made email easier to manage, for
example by adding hyperlinks in my to-do list straight to messages
that need attention, and adding some integrations with org mode to
simplify email processing. Those are matters for another time,
though.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgea8d990" class="outline-3"&gt;
&lt;h3 id="orgea8d990"&gt;Resources&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgea8d990"&gt;
&lt;p&gt;
There are many resources on using &lt;code&gt;mbsync&lt;/code&gt;, &lt;code&gt;mu&lt;/code&gt;, &lt;code&gt;mu4e&lt;/code&gt;, and the
rest on the web. I found these covered everything in great detail,
with the exception of the OAUTH2 integration I've detailed here. In
particular I'd like to acknowledge the following:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://cvanelteren.github.io/post/mu4e/"&gt;Growing pains&lt;/a&gt;, Casper van Elteren's &lt;code&gt;mu4e&lt;/code&gt; setup that pointed me
in the right direction&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.macs.hw.ac.uk/~rs46/posts/2022-01-11-mu4e-oauth.html"&gt;Microsoft OAuth authentication with mu4e in Emacs&lt;/a&gt;, which uses
&lt;code&gt;offlineimap&lt;/code&gt;, a different MDA, and needs closer integration with
Microsoft Azure that often isn't possible for corporate email&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dcs.gla.ac.uk/~jacobd/posts/2022/03/configure-mutt-to-work-with-oauth-20/"&gt;Configure Mutt to work with OAuth 2.0&lt;/a&gt; that focuses on using
&lt;code&gt;mutt&lt;/code&gt; and Gmail&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>email</category><category>linux</category><category>sysadmin</category><guid>https://simondobson.org/2024/02/03/getting-email/</guid><pubDate>Sat, 03 Feb 2024 16:19:40 GMT</pubDate></item><item><title>LISPcraft</title><link>https://simondobson.org/2024/02/02/lispcraft/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org29167e9" class="outline-2"&gt;
&lt;h2 id="org29167e9"&gt;LISPcraft&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org29167e9"&gt;
&lt;p class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/fc/8f0d76-df2a-43eb-b5ca-a79b21c2351a/screenshot.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Robert Wilensky.  &lt;i&gt;LISPcraft&lt;/i&gt;. W.W. Norton. ISBN
0-393-95442-0. 1984.
&lt;/p&gt;

&lt;p&gt;
Hard to know whether to include this as an introduction or
collection of applications, since it runs all the way from basic
uses to pattern-matching and associative retrieval, by way of the
non-list data types in Lisp, and includes discussion of the symbol
table and other internals that definitely fall into the "advanced"
category.
&lt;/p&gt;

&lt;p&gt;
However, this was my second introduction to Lisp (after &lt;a href="/2024/01/27/structure-and-interpretation-of-computer-programs/"&gt;SICP&lt;/a&gt;), so
it has a fond place in my memory. The fact that it deals with
language internals isn't a bad thing, because it deals with the
basics so well. It's very much a traditional programming
introduction focusing on the "needed" parts of the language. It
pre-dates the Common Lisp standard and doesn't touch on CLOS,
which perhaps make it a less appropriate choice for newcomers
these days than &lt;a href="/2024/01/27/practical-common-lisp/"&gt;Practical Common Lisp&lt;/a&gt;.
&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;
There is also a second edition. I haven't read it, but it seems that
it addresses at least the concern about being non-standard:
&lt;/p&gt;

&lt;p&gt;
Robert Wilensky.  &lt;i&gt;Common LISPcraft&lt;/i&gt;. W.W. Norton. ISBN
978-039395544-6. 1986.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>lisp</category><category>project:lisp-bibliography</category><category>tutorial</category><guid>https://simondobson.org/2024/02/02/lispcraft/</guid><pubDate>Fri, 02 Feb 2024 12:23:08 GMT</pubDate></item><item><title>The CONNIVER reference manual</title><link>https://simondobson.org/2024/02/02/the-conniver-reference-manual/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org0fda5a5" class="outline-2"&gt;
&lt;h2 id="org0fda5a5"&gt;The CONNIVER reference manual&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0fda5a5"&gt;
&lt;p&gt;
Drew McDermott and Gerald Jay Sussman.  &lt;i&gt;&lt;a href="https://dspace.mit.edu/handle/1721.1/6204"&gt;The Conniver Reference
Manual&lt;/a&gt;&lt;/i&gt;. Technical report AIM-259a. MIT AI Laboratory. 1974.
&lt;/p&gt;

&lt;p&gt;
I think Conniver may have a claim to being the most influential
language you've never heard of. It's a mostly forgotten Lisp
variant that was a laboratory for some radically different
language design ideas, and a precursor to a surprising set of
features – many of which are still uncommon in the mainstream.
&lt;/p&gt;

&lt;p&gt;
Conniver was intended to manage knowledge databases. This does
make the report slightly hard to read in places, as there are a
lot of explicit references to planning techniques wrapped-up with
language mechanisms that don't really depend on them.
&lt;/p&gt;

&lt;p&gt;
Conniver is (to the best of my knowledge) the first appearance of
&lt;b&gt;generators&lt;/b&gt; in a programming language. It is therefore a distant
precursor of all the lazy functional languages and libraries, as
well as the generators found in Python. Implementing generators
&lt;i&gt;within&lt;/i&gt; a language (rather than as a built-in part of one)
requires control structures that can be exited and re-entered, and
therefore needs more flexible frames for controlling executing
code rather than conventional stack frames that are unwound
destructively on return.
&lt;/p&gt;

&lt;p&gt;
The obvious (for Lisp, anyway) next step is to make these "hairy"
control structures visible within the language, to allow them to
be re-arranged in interesting ways. It does this by exposing the
structure of frames, consisting of:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;the bound variables&lt;/li&gt;
&lt;li&gt;the state of the ongoing computation within the frame (&lt;i&gt;e.g.&lt;/i&gt;,
the program counter)&lt;/li&gt;
&lt;li&gt;a link (the &lt;code&gt;ALINK&lt;/code&gt;) to the frame within which free variables
should be looked-up&lt;/li&gt;
&lt;li&gt;a link (the &lt;code&gt;CLINK&lt;/code&gt;) to the frame to which control should return
on exit from the frame&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
This structure in turn mandates the use of &lt;b&gt;spaghetti stack&lt;/b&gt; (or
&lt;a href="https://en.wikipedia.org/wiki/Parent_pointer_tree"&gt;parent pointer trees&lt;/a&gt;) where frames are implemented using lists
that can be combined in richer ways than actual, literal stacks.
Thee are the underpinnings of several different common structures:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;generators and continuations&lt;/li&gt;
&lt;li&gt;closures&lt;/li&gt;
&lt;li&gt;non-local transfers, like &lt;code&gt;CATCH&lt;/code&gt; and &lt;code&gt;THROW&lt;/code&gt; in Common Lisp, and
therefore probably encompassing the entire condition system&lt;/li&gt;
&lt;li&gt;functions with access to extra state (as with object methods,
but in this case used as callbacks for database updates)&lt;/li&gt;
&lt;li&gt;symbolic debuggers (not mentioned in the text)&lt;/li&gt;
&lt;li&gt;lexical &lt;i&gt;versus&lt;/i&gt; dynamic variable scope (not mentioned in the
text, and I think it's a binary choice between one or the other
depending on the &lt;code&gt;ALINK&lt;/code&gt;, rather than accommodating lexical and
"special" variable classes as Common Lisp does)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
So these features are constructed in Conniver from more basic
mechanisms rather than being provided built-in. I'm fascinated by
what other structures one might build when every frame has &lt;i&gt;two&lt;/i&gt;
independent super-frames (one for variable lookup,one for control
return) instead of one, and both can be modified independently.
This is radically different to most languages in which frames are
hidden and their manipulation reserved for the compiler and
run-time: it's a set of ideas that re-surface at the object level
in metaobject protocols.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>language-reference</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/02/02/the-conniver-reference-manual/</guid><pubDate>Fri, 02 Feb 2024 12:14:30 GMT</pubDate></item><item><title>Common Lisp: the language</title><link>https://simondobson.org/2024/02/02/common-lisp-the-language/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orge0d8015" class="outline-2"&gt;
&lt;h2 id="orge0d8015"&gt;Common Lisp: the language&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge0d8015"&gt;
&lt;p class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/20/46d76e-4b50-4cf1-866c-7515d6fd427f/screenshot.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Guy Steele.  &lt;i&gt;&lt;a href="http://www.cs.cmu.edu/Groups/AI/html/cltl/cltl2.html"&gt;Common Lisp: The Language&lt;/a&gt;&lt;/i&gt;. Digital Press. ISBN
1-55558-041-6. 1990.
&lt;/p&gt;

&lt;p&gt;
The reference manual for Common Lisp, also &lt;a href="http://www.cs.cmu.edu/Groups/AI/html/cltl/cltl2.html"&gt;available online in its
entirety&lt;/a&gt;. This is very much a reference manual and not a
tutorial, but having said that it's a lot more accessible than
many such documents.
&lt;/p&gt;

&lt;p&gt;
It's remarkable that Common Lisp's standard has been stable for
over thirty years, despite enormous advances in Lisp practices in
that time. It shows the care that went into the original
standardisation process, but also the effects of some detailed
technical choices and (especially) the use of macros in preference
to new core mechanisms.
&lt;/p&gt;

&lt;p&gt;
However, it has to be said that the standard also fixed in place
certain choices that now seem questionable. It's a matter of
opinion, of course, but personally I think the questionable set
includes at least: multiple-value returns and binds, which are
unnecessary when you can return lists and destructure them and
that impinge on the minimalism of the core language; and allowing
symbols to be bound simultaneously to values and functions, which
unnecessarily treats the two differently (and for which reason it
was removed from Scheme).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>language-reference</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/02/02/common-lisp-the-language/</guid><pubDate>Fri, 02 Feb 2024 12:10:26 GMT</pubDate></item><item><title>Structure and interpretation of computer programs</title><link>https://simondobson.org/2024/01/27/structure-and-interpretation-of-computer-programs/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org0638c56" class="outline-2"&gt;
&lt;h2 id="org0638c56"&gt;Structure and interpretation of computer programs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0638c56"&gt;
&lt;p class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/52/6b5639-18fe-4fc6-b8b1-7c93e3011194/screenshot.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Harold Abelson and Gerald Jay Sussman.  &lt;i&gt;&lt;a href="https://web.mit.edu/6.001/6.037/sicp.pdf"&gt;Structure and
Interpretation of Computer Programs&lt;/a&gt;&lt;/i&gt;. MIT Press. 1985.
&lt;/p&gt;

&lt;p&gt;
A book once described (&lt;a href="https://simondobson.org/2010/05/14/cs-book-worth-reading-twice/"&gt;by me&lt;/a&gt;, actually) as "the only computer
science book worth reading twice", and which was the foundational
text for teaching programming at MIT for decades.
&lt;/p&gt;

&lt;p&gt;
There are many reasons that this book is so popular and
long-lived. It's resolutely an introductory text, but it treats
topics that are uncommon in introductions, and does so to a depth
that's quite astonishing – although it has to be said that the
authors avoid the more complex constructions like conditions and
the complexities of macros, (They do deal with continuations,
however, which are essential for good Scheme programming.)
&lt;/p&gt;

&lt;p&gt;
But what other introduction to programming includes a complete
meta-linguistic re-implementation of the language itself? – and
in two different styles! It can do this because Scheme is so
regular and so simple – &lt;i&gt;homoiconic&lt;/i&gt; (one representation for
programs and data), (although they don't use that term).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>advanced-tutorial</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/01/27/structure-and-interpretation-of-computer-programs/</guid><pubDate>Sat, 27 Jan 2024 15:46:19 GMT</pubDate></item><item><title>Learn Common Lisp in Y minutes</title><link>https://simondobson.org/2024/01/27/learn-common-lisp-in-y-minutes/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org1e4659c" class="outline-2"&gt;
&lt;h2 id="org1e4659c"&gt;Learn Common Lisp in Y minutes&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1e4659c"&gt;
&lt;p&gt;
&lt;a href="https://learnxinyminutes.com/docs/common-lisp/"&gt;https://learnxinyminutes.com/docs/common-lisp/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
A one-web-page introduction to Common Lisp covering pretty much
all the language in enough detail to at least start writing simple
command-line programs (and understanding those of others).
Includes macros and CLOS. Quite an achievement to make it all so
readable.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>lisp</category><category>project:lisp-bibliography</category><category>tutorial</category><guid>https://simondobson.org/2024/01/27/learn-common-lisp-in-y-minutes/</guid><pubDate>Sat, 27 Jan 2024 14:14:35 GMT</pubDate></item><item><title>Practical Common Lisp</title><link>https://simondobson.org/2024/01/27/practical-common-lisp/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org12de14d" class="outline-2"&gt;
&lt;h2 id="org12de14d"&gt;Practical Common Lisp&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org12de14d"&gt;
&lt;p class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/b8/4b7fa7-83e9-4756-8ede-1c3cdeaeafef/screenshot.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Peter Seibel.  &lt;i&gt;&lt;a href="https://gigamonkeys.com/book/"&gt;Practical Common Lisp&lt;/a&gt;&lt;/i&gt;. Apress. ISBN
978-1-4302-0017-8. 2005.
&lt;/p&gt;

&lt;p&gt;
The classic, very thorough and hands-on tutorial introduction that
doesn't skip the hard parts like the condition system and
non-local blocks and exists (and the relationship between the
two). It's also got good chapters on CLOS.
&lt;/p&gt;

&lt;p&gt;
The text is complemented by a set of modern examples, for web
services, database, and binary file parsers: quite a long way
removed from the examples in many introductory texts. It doesn't
make much use of macro programming in these examples, which is a
shame, so follow with On Lisp or Let over Lambda once the
structure of the language is clear.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>project:lisp-bibliography</category><category>tutorial</category><guid>https://simondobson.org/2024/01/27/practical-common-lisp/</guid><pubDate>Sat, 27 Jan 2024 13:15:30 GMT</pubDate></item><item><title>TIL: An RSS-focused search engine</title><link>https://simondobson.org/2024/01/26/til-an-rss-focused-search-engine/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org77d1ec3" class="outline-2"&gt;
&lt;h2 id="org77d1ec3"&gt;TIL: An RSS-focused search engine&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org77d1ec3"&gt;
&lt;p&gt;
Today I learned about &lt;a href="https://feedle.world/"&gt;feedle&lt;/a&gt;, a search engine focused on searching
blogs and podcasts – web sites that export an &lt;a href="https://en.wikipedia.org/wiki/RSS"&gt;RSS feed&lt;/a&gt;, in other
words. And the search results are themselves RSS feed that can be
subscribed to live.
&lt;/p&gt;

&lt;p&gt;
This feels like a quite a big thing for accessing content without
resort to the internet giants, and for the &lt;a href="https://indieweb.org/"&gt;IndieWeb&lt;/a&gt; in general. It
means that search can prefer syndicated and typically small-scale
content rather than being influenced by search engine optimisation
(SEO) or sponsorship affecting the link rankings.
&lt;/p&gt;

&lt;p&gt;
Of course this also need management, and feedle is a curated source:
you have to submit your RSS feed to it for review and (hopefully)
inclusion. I've done that for &lt;a href="https://simon.dobson.org/rss.xml"&gt;this site's feed&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>internet</category><category>til</category><guid>https://simondobson.org/2024/01/26/til-an-rss-focused-search-engine/</guid><pubDate>Fri, 26 Jan 2024 13:10:23 GMT</pubDate></item><item><title>Locally overriding a function throughout a dynamic extent</title><link>https://simondobson.org/2024/01/22/locally-overriding-a-function-throughout-a-dynamic-extent/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org3d747c3" class="outline-2"&gt;
&lt;h2 id="org3d747c3"&gt;Locally overriding a function throughout a dynamic extent&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3d747c3"&gt;
&lt;p&gt;
A horribly dangerous but occasionally useful Lisp technique.
&lt;/p&gt;

&lt;p&gt;
My use case is as follows. &lt;code&gt;ebib&lt;/code&gt; has a command to copy a
formatted reference to the kill ring, using
&lt;code&gt;citar-citeproc-format-reference&lt;/code&gt; to actually do the formatting.
This means it's easy to change the style of the formatted
reference. However, &lt;code&gt;citar-citeproc-format-reference&lt;/code&gt;  itself uses
&lt;code&gt;citar-render-bib&lt;/code&gt; with a plain-text formatter. This is a sensible
default, but since I'm almost always copying references into
org-more documents, it loses a lot of information: it'd be better
to use the org formatter, but there's no argument to specify it.
&lt;/p&gt;

&lt;p&gt;
Clearly the correct solution is to change
&lt;code&gt;citar-citeproc-format-reference&lt;/code&gt; to take a key or optional
argument to specify the formatter, but that involves changing
someone else's code. The hacker solution is to change the call
&lt;code&gt;(citeproc-render-bib proc 'plain)&lt;/code&gt; to &lt;code&gt;(citeproc-render-bib proc
  'org)&lt;/code&gt;, but without re-writing the entire surrounding function to
keep the change just to the case where I need it.
&lt;/p&gt;

&lt;p&gt;
One way to do this would be to define a variant
&lt;code&gt;citeproc-render-bib&lt;/code&gt; that ignores its second argument (the
formatter) and always uses &lt;code&gt;'org&lt;/code&gt; instead, and then substitute
this variant for the original – but &lt;i&gt;only&lt;/i&gt; in the dynamic extent
of a &lt;i&gt;particular&lt;/i&gt; call to &lt;code&gt;citar-citeproc-format-reference&lt;/code&gt;. In
most languages this would be impossible – but not in Emacs Lisp.
&lt;/p&gt;

&lt;p&gt;
The solution is to use &lt;code&gt;cl-letf&lt;/code&gt;, which overrides the values of
general places for the duration of its body forms and restores the
original value on exit (normal or otherwise). The important point
is that the change occurs across the &lt;i&gt;extent&lt;/i&gt; of the body – the
body and all the code called from the body – and not merely in
the &lt;i&gt;scope&lt;/i&gt; of the body, which would only affect calls made there
directly.
&lt;/p&gt;

&lt;p&gt;
For example, consider in the following:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Which when called gives:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
36
&lt;/pre&gt;


&lt;p&gt;
If we want to override the default value (10) that's passed to &lt;code&gt;f&lt;/code&gt;
and instead use 25, we can define a new version that ignores the
second argument and uses our preferred default, and then
temporarily override the definition of &lt;code&gt;f&lt;/code&gt; in the calling
environment. If we want to use the original in the overriding
definition we need to grab it first. This gives:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;origf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;symbol-function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'f&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cl-letf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="nf"&gt;symbol-function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;				    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;funcall&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;origf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
51
&lt;/pre&gt;


&lt;p&gt;
What's going on? The &lt;code&gt;cl-letf&lt;/code&gt; macro is like &lt;code&gt;let&lt;/code&gt; but works with
general places (as in &lt;code&gt;setf&lt;/code&gt;). It sets the places in its argument
list for the duration of its body, and then restores them on exit,
regardless of whether that exit is normal or &lt;i&gt;via&lt;/i&gt; a condition.
&lt;/p&gt;

&lt;p&gt;
The &lt;code&gt;(symbol-function 'f)&lt;/code&gt; form returns the place that stores the
function associated with symbol &lt;code&gt;f&lt;/code&gt;. We use it twice: once to
capture this function so we can use it later, and once to identify
the place where we store our new variant function. This new binding
is then used for all calls made from the body of the &lt;code&gt;cl-letf&lt;/code&gt;,
regardless of depth, so the call to &lt;code&gt;first&lt;/code&gt; makes use of our variant
definition of &lt;code&gt;f&lt;/code&gt; rather than the original – but with the original
then being used in the variant in our case!
&lt;/p&gt;

&lt;p&gt;
If we'd used &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;cl-flet&lt;/code&gt; instead of &lt;code&gt;cl-letf&lt;/code&gt; we wouldn't
have got the behaviour we're looking for:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;origf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;symbol-function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'f&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cl-flet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;	      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;funcall&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;origf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
36
&lt;/pre&gt;


&lt;p&gt;
Why? Because &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;cl-flet&lt;/code&gt; work over the &lt;i&gt;scope&lt;/i&gt; of the body,
so only calls to &lt;code&gt;f&lt;/code&gt; directly from the body of the assignment are
affected – not calls from calls. This is a great illustration of
the difference between the closely-related concepts of (static,
lexical) scope and (dynamic, run-time) extent, incidentally.
&lt;/p&gt;

&lt;p&gt;
I did say it was horrible :-). It's basically like adding
temporary &lt;code&gt;:around&lt;/code&gt; advice, and could probably benefit from a
macro to wrap it up. It's also inconceivable that it's thread- or
co-routine-safe, although I haven't checked.
&lt;/p&gt;

&lt;p&gt;
Part of the horribleness comes from the fact that the redefinition
is made for the entire dynamic extent of the body forms, which
means &lt;i&gt;all&lt;/i&gt; instances of the overridden function will use the
overridden value. There might be more than you think! But for
well-understood code it's sometimes useful, avoiding duplicating
code to make tiny changes.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>lisp</category><category>programming</category><guid>https://simondobson.org/2024/01/22/locally-overriding-a-function-throughout-a-dynamic-extent/</guid><pubDate>Mon, 22 Jan 2024 10:34:45 GMT</pubDate></item><item><title>This Is How They Tell Me the World Ends: The Cyberweapons Arms Race</title><link>https://simondobson.org/goodreads/this-is-how-they-tell-me-the-world-ends-the-cyberweapons-arms-race/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div&gt;
    &lt;div&gt;
      &lt;img src="https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1610927353l/49247043._SX98_.jpg" style="float: left; margin-right: 10px"&gt;
      &lt;h2&gt;
	Nicole Perlroth
	  (2021)
      &lt;/h2&gt;
    &lt;/div&gt;
    &lt;p&gt;
      A hugely detailed and deeply researched history of the market for "zero-day: exploits, the faults and technologies underlying computer viruses and ransomware. It's a hugely complicated and technical field which Perlroth does an amazing job of making accessible to a non-technical audience. (I should probably say here that I teach computer security.)&lt;br&gt;&lt;br&gt;Most of the book is a real page-turner, deeply embedded with the government agencies, companies, and hackers who compose the zero-day market. It's scathing of the US' trying to play both sides of the street, developing and buying zero-days in order to collect intelligence while weakening the security of ordinary users in the process by not informing the software developers of the problems they've found. They clearly knew this was dangerous, and even developed a doctrine for us: "NOBUS", bugs that "no-one but us" would be smart enough to find or develop. This idea goes wrong spectacularly, as other nations realise how cheaply they too can have cyberweapons programmes: ironically they're encouraged by the deployment of the Stuxnet virus to damage the Iranian nuclear programme. The leaks of the NSA's zero-day stockpile by the Shadow Brokers – an event that's somewhat under-explored – and their later use in hacks against US elections, are payback for hubris.&lt;br&gt;&lt;br&gt;Perlroth is scathing of the Trump presidency's neglect of cybersecurity and unwillingness to sanction Russia for known attacks – in part because it might cast doubt on Trump's legitimacy as an elected president, but also seemingly from willful blindness and a mistrust of the professionals (including the military) tasked with protecting US networks. She was writing during the pandemic and before Trump conceded the 2020 election (to the extent that he ever did), and so if anything she understated the impacts of disinformation spreading.&lt;br&gt;&lt;br&gt;The conclusions are a little breathless, but well-intentioned and technically appropriate, if a little US-centric – and in fairness the US has at least attempted to set up a more transparent approach to managing cyberweapons, even though the approach is drastically compromised by the desire to keep intelligence-gathering capabilities. Cybersecurity is an area where offence and defence are closely intertwined, and there's a strong argument that the costs to society of the former mandate a focus on the latter. We need to accept that many cyberweapons that are used (or leaked) can be reverse-engineered and re-used against their original developers with little real up-front financial investment.&lt;br&gt;&lt;br&gt;There's some editing. including a repeated mis-use of "affect" rather than "effect", and a really disastrous throw-away reference to the book &lt;i&gt;Dune&lt;/i&gt;, the description of which is almost entirely wrong: surely an editor should have picked that up?
      &lt;/p&gt;&lt;p&gt;
	4/5.
	  Finished Sunday 21 January, 2024.
	&lt;/p&gt;&lt;p&gt;
	  (Originally published on &lt;a href="https://www.goodreads.com/review/show/4691376169?utm_medium=api&amp;amp;utm_source=rss"&gt;Goodreads&lt;/a&gt;.)
  &lt;/p&gt;&lt;/div&gt;</description><category>books</category><category>reviews</category><guid>https://simondobson.org/goodreads/this-is-how-they-tell-me-the-world-ends-the-cyberweapons-arms-race/</guid><pubDate>Sun, 21 Jan 2024 00:00:00 GMT</pubDate></item></channel></rss>