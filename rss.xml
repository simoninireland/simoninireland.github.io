<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simon Dobson</title><link>https://simondobson.org/</link><description>Aut tace aut loquere meliora silentio</description><atom:link href="https://simondobson.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:simoninireland@gmail.com"&gt;Simon Dobson&lt;/a&gt; </copyright><lastBuildDate>Fri, 12 Apr 2024 11:27:56 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>TIL: Cognitohazards</title><link>https://simondobson.org/2024/04/12/til-cognitohazards/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orga506648" class="outline-2"&gt;
&lt;h2 id="orga506648"&gt;TIL: Cognitohazards&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga506648"&gt;
&lt;p&gt;
Could social media posts be actively damaging to our mental health?
– literally, not just figuratively? That's the premise of &lt;a href="https://www.theguardian.com/technology/2024/apr/09/techscape-deepfakes-cognitohazards-science-fiction"&gt;a
TechScape article in The Guardian&lt;/a&gt;, that draws on both science
fiction and psychological research.
&lt;/p&gt;

&lt;p&gt;
In Neal Stephenson's "Snow crash" there is a plot device of an image
in a metaverse that, when viewed, crashes the viewer's brain. We
haven't seen this in social media (yet), but there's an increasing
concern about deepfake images and other forms of misinformation.
Research suggests that such images are damaging &lt;i&gt;even if viewers
know that they're fakes&lt;/i&gt;, which suggests that techniques like
content-labelling images as AI-generated are insufficient to remove
their harm. Other examples include massively engaging artificial
images such as the "pong wars" animation of two simultaneous
"Breakout" games going on between two algorithms: something that
shouldn't be as engaging as it is (as I can attest to myself).
&lt;/p&gt;

&lt;p&gt;
Social media attention grabbing at an industrial scale might
therefore constitute a &lt;i&gt;cognitohazard&lt;/i&gt;, a way of hacking people's
brains simply by being viewed.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>internet</category><category>social media</category><category>til</category><guid>https://simondobson.org/2024/04/12/til-cognitohazards/</guid><pubDate>Fri, 12 Apr 2024 11:18:58 GMT</pubDate></item><item><title>Loving Common Lisp, or the savvy programmer's secret weapon</title><link>https://simondobson.org/2024/04/02/loving-common-lisp-or-the-savvy-programmers-secret-weapon/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org237bc98" class="outline-2"&gt;
&lt;h2 id="org237bc98"&gt;Loving Common Lisp, or the savvy programmer's secret weapon&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org237bc98"&gt;
&lt;p class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/7a/bd1498-3024-4f11-91a7-97f3e99084d7/screenshot.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Mark Watson.  &lt;i&gt;&lt;a href="https://leanpub.com/lovinglisp"&gt;Loving Common Lisp, or the Savvy Programmer’s Secret
Weapon&lt;/a&gt;&lt;/i&gt;. Leanpub. 2023.
&lt;/p&gt;

&lt;p&gt;
While pitched as a way of sharing the author's enthusiasm for Lisp
(which really shines through), this book is really a deep
demonstration in using Lisp in modern applications – from web
APIs and the semantic web to deep learning, large language models,
and chatbots.
&lt;/p&gt;

&lt;p&gt;
In some ways, like many other Lisp books, it's really two books in
one. The first chapters are introductory – and to be perfectly
honest could be dispensed with, as they're inadequate as a proper
introduction and there are far better introductions out there. The
later chapters focus on applications, and provide the real value.
One could criticise them as often tying-together tools in other
languages, with the Lisp code basically being glue; but that's a
very effective way of leveraging all the code and services out
there, and is an important technique for Lisp programmers too.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>applications</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/04/02/loving-common-lisp-or-the-savvy-programmers-secret-weapon/</guid><pubDate>Tue, 02 Apr 2024 15:57:38 GMT</pubDate></item><item><title>Lisp in space</title><link>https://simondobson.org/2024/04/02/lisp-in-space/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org9238410" class="outline-2"&gt;
&lt;h2 id="org9238410"&gt;Lisp in space&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9238410"&gt;
&lt;p&gt;
&lt;a href="https://corecursive.com/lisp-in-space-with-ron-garret/"&gt;Lisp in space&lt;/a&gt; (podcast, 38 minutes)
&lt;/p&gt;

&lt;p&gt;
An interview on the Corecursive podcast with Ron Garret.
&lt;/p&gt;

&lt;p&gt;
In 1988 (when, for context, I was in the second year of my BSc)
Garret started working on autonomous navigation software for
&lt;a href="https://en.wikipedia.org/wiki/Sojourner_(rover)"&gt;Sojourner&lt;/a&gt;, NASA's first Mars rover, which flew in 1997. He used Lisp
to do planning, essentially developing an entire domain-specific
language for autonomous vehicles. The project was never flown, as
NASA opted for a far less ambitious approach to driving to rovers –
a decision that Garret now considers to have been the correct one.
&lt;/p&gt;

&lt;p&gt;
But that isn't the end of the story, because Garret then went on
to develop an autonomous Remote Agent controller for the &lt;a href="https://en.wikipedia.org/wiki/Deep_Space_1"&gt;Deep
Space 1&lt;/a&gt; technology demonstration mission that performed asteroid
and comet fly-bys. Without spoiling to story, the spacecraft flies
with a full Lisp system onboard, and Garret gets to interact with
its REPL at a distance of 30 light-minutes &lt;i&gt;via&lt;/i&gt; the Deep Space
Network – surely the longest latency of any REPL session ever!
&lt;/p&gt;

&lt;p&gt;
It's an fascinating insight into both the potentials of Lisp and
the political difficulties that using a non-standard development
language can engender.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>applications</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/04/02/lisp-in-space/</guid><pubDate>Tue, 02 Apr 2024 15:32:56 GMT</pubDate></item><item><title>Lisp hackers: Interviews with 100x more productive programmers</title><link>https://simondobson.org/2024/03/23/lisp-hackers-interviews-with-100x-more-productive-programmers/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orgc3ce0d6" class="outline-2"&gt;
&lt;h2 id="orgc3ce0d6"&gt;Lisp hackers: Interviews with 100x more productive programmers&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc3ce0d6"&gt;
&lt;p class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/4f/11131f-cfc4-4d14-8fae-72c78607964b/screenshot.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Vsevolod Dyomkin.  &lt;i&gt;&lt;a href="https://leanpub.com/lisphackers"&gt;Lisp Hackers: Interviews with 100x More Productive
Programmers&lt;/a&gt;&lt;/i&gt;. Leanpub. 2013.
&lt;/p&gt;

&lt;p&gt;
I'm not convinced by the sub-title: at the very least, there's no
evidence to support the claim that Lisp programmers really are
hundreds of time more productive. But there are some serious
insights here from individuals who've made serious contributions
to the Lisp world – and beyond. The contributions all take the
form of email interviews consisting of a standard prelude of
questions (how did you discover Lisp?, do you use it at work?)
followed by a couple of questions tailored to the interviewee.
&lt;/p&gt;

&lt;p&gt;
The practitioners selected have all been affected by Lisp, either
in terms of it changing their own thought processes, or by helping
to develop the core ecosystem, or by applying Lisp to real-world
problems, and often to great effect. My favourite was the
discussion with someone who was using Common Lisp to develop
low-latency network routing for financial services: it's hard
to think of a better example of Lisp's power and range.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>experience</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/23/lisp-hackers-interviews-with-100x-more-productive-programmers/</guid><pubDate>Sat, 23 Mar 2024 14:57:08 GMT</pubDate></item><item><title>My Lisp experiences and the development of GNU Emacs</title><link>https://simondobson.org/2024/03/23/my-lisp-experiences-and-the-development-of-gnu-emacs/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org07eea9a" class="outline-2"&gt;
&lt;h2 id="org07eea9a"&gt;My Lisp experiences and the development of GNU Emacs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org07eea9a"&gt;
&lt;p&gt;
&lt;a href="https://www.gnu.org/gnu/rms-lisp.html"&gt;My Lisp Experiences and the Development of GNU Emacs&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
The never-dull Richard Stallman talks about his experiences with
Lisp and with the development of Emacs. It's got some useful
observations on &lt;i&gt;why&lt;/i&gt; Lisp became the core of Emacs: it was news to
me that this hadn't always been the case. It started with an
"editor control" language in the spirit of editors like &lt;code&gt;ed&lt;/code&gt;. But as
people wanted more support from their editor, they wanted to
program it more effectively.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
The language that you build your extensions on shouldn't be
thought of as a programming language in afterthought; it should be
designed as a programming language. In fact, we discovered that
the best programming language for that purpose was Lisp.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The result was a re-write of Emacs in C (for portability), with a
Lisp interpreter specialised towards editing tasks.
&lt;/p&gt;

&lt;p&gt;
He then gives an insider's perspective on the Lisp machines and
their evolution, as well as revealing the genesis of his ideas for
the free software movement. While these are interesting to read,
it should be noted that much of it has been rebutted: his
description of the formation and later history of the two
spin-outs, Symbolics and Lisp Machines Inc, is strongly disputed
by Dan Weinreb on &lt;a href="https://web.archive.org/web/20090101103828/http://danweinreb.org/blog/rebuttal-to-stallmans-story-about-the-formation-of-symbolics-and-lmi"&gt;his blog&lt;/a&gt;.)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>experience</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/23/my-lisp-experiences-and-the-development-of-gnu-emacs/</guid><pubDate>Sat, 23 Mar 2024 14:55:26 GMT</pubDate></item><item><title>The Romanovs: 1613-1918</title><link>https://simondobson.org/goodreads/the-romanovs-1613-1918/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div&gt;
    &lt;div&gt;
      &lt;img src="https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1435023227l/21094391._SX98_.jpg" style="float: left; margin-right: 10px"&gt;
      &lt;h2&gt;
	Simon Sebag Montefiore
	  (2016)
      &lt;/h2&gt;
    &lt;/div&gt;
    &lt;p&gt;
      When complimented on his armies capturing Berlin at the end of the Second World War, Stalin famously replied that "Tsar Alexander made it to Paris." This book describes how, and why, that happened – and why it meant to much to Stalin, on whom Sebag Montefirore is of course a recognised expert.&lt;br&gt;&lt;br&gt;The sweep of Romanov history is epic in all senses. It's impossible not to realise how deeply &lt;i&gt;personal&lt;/i&gt; their rule was, identifying their own reigns absolutely with Russia and its greatness. The main characters are all flawed in tragic ways, sometimes grotesque but equally often brilliant and self-aware within the limitations of their eras – which none ever really managed to trascend, with the possible exception of Peter and later Catherine, each known as "the Great" for that reason.&lt;br&gt;&lt;br&gt;The story is made powerful by recent research in the Russian archives and access to previously-unkown letters between Alexander II and his mistress, and later between Nicholas II and Alexandra. They highlight the impact of extra-marital affairs on high policy right across the Romonov era: it's often hard to keep track of who is related to (or sleeping with) whom, or to understand the true importance of some of the less well-known characters in the story who may have have had an advisory impact far beyond what their "official" position might suggest.&lt;br&gt;&lt;br&gt;It's a book that's hard on autocracy – but also quite hard on the alternatives that came after. Sebag Montefiore sees a continuity between the tsars, Lenin, Stalin, and Putin, and almost seems to regard it as inevitable that Russia will need strongman leadership. One can perhaps hope not.
      &lt;/p&gt;&lt;p&gt;
	5/5.
	  Finished Saturday 23 March, 2024.
	&lt;/p&gt;&lt;p&gt;
	  (Originally published on &lt;a href="https://www.goodreads.com/review/show/1522092865?utm_medium=api&amp;amp;utm_source=rss"&gt;Goodreads&lt;/a&gt;.)
  &lt;/p&gt;&lt;/div&gt;</description><category>books</category><category>reviews</category><guid>https://simondobson.org/goodreads/the-romanovs-1613-1918/</guid><pubDate>Sat, 23 Mar 2024 00:00:00 GMT</pubDate></item><item><title>Escape from Model Land: How Mathematical Models Can Lead Us Astray and What We Can Do About It</title><link>https://simondobson.org/goodreads/escape-from-model-land-how-mathematical-models-can-lead-us-astray-and-what-we-can-do-about-it/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div&gt;
    &lt;div&gt;
      &lt;img src="https://s.gr-assets.com/assets/nophoto/book/111x148-bcc042a9c91a29c1d680899eff700a03.png" style="float: left; margin-right: 10px"&gt;
      &lt;h2&gt;
	Erica Thompson
	  (2022)
      &lt;/h2&gt;
    &lt;/div&gt;
    &lt;p&gt;
      A thoughtful look at modelling by an experienced climate modeller.&lt;br&gt;&lt;br&gt;What are models &lt;i&gt;for&lt;/i&gt;? The most common answer would be "to predict the future behaviour of some system," but Thompson argues a far more subtle line: that the most important models often &lt;i&gt;fail&lt;/i&gt; to be predictive in any real sense. Much of this is down to problems of validation, especially in climate models for which we have no experience of the world the models are trying to predict.&lt;br&gt;&lt;br&gt;An even more subtle mistake is regarding all models as "cameras" that simply observe the world. That's true for the more abstract kinds of modelling, where one is trying to understand possible behaviours of systems in general without tying them to specific circumstances. But the models with which most people are familiar act ore like "engines" that can perturb the system they're purporting simply to observe by baing used as drivers for policy. Climate and epidemic models seek to warn as well as predict and understand, but this exacerbates the problems of validation: if the model's predictions &lt;i&gt;don't&lt;/i&gt; come to pass, perhaps this is because policy-makers took corrective actions in response, or maybe bacause they didn't intervent effectively enough. This isn't a reason to give up on modelling altogether: how else are we to understand complex systems, and how else are we to respond rationally to them? But it does mean that the notion of "following the science" problematic.&lt;br&gt;&lt;br&gt;Thompson also wrestles with the problem of groupthink amongst modellers, who often share a common overallping background. I agree this is a problem, but the idea that we can increase diversity in the community easily seems flawed to me. Modellers share a scientific viewpoint and a belief in modelling, and no-one who doesn't will ever be able to effectively engage with the models or their arguments. Perhaps it's enough that scientists are always advisors and never decision-makers, and allow politicians to deal with the integration of different choices and values – although that split isn't always appreciated by the public, and is often (as in the covid-19 pandemic) deliberately blurred to allow less-trusted politicians to draw credibility from more-trusted scientists and doctors.&lt;br&gt;&lt;br&gt;Overall I think this is a lucid and valiant attempt to summarise and explore the benefits and limitations of models, and science in general, when it impacts directly on the wider world. It deserves to be widely read in the scientific community so that we can better understand our place in policies that we often unavoidably have to influence.&lt;br&gt;&lt;br&gt;
      &lt;/p&gt;&lt;p&gt;
	4/5.
	  Finished Friday 22 March, 2024.
	&lt;/p&gt;&lt;p&gt;
	  (Originally published on &lt;a href="https://www.goodreads.com/review/show/5150032848?utm_medium=api&amp;amp;utm_source=rss"&gt;Goodreads&lt;/a&gt;.)
  &lt;/p&gt;&lt;/div&gt;</description><category>books</category><category>reviews</category><guid>https://simondobson.org/goodreads/escape-from-model-land-how-mathematical-models-can-lead-us-astray-and-what-we-can-do-about-it/</guid><pubDate>Fri, 22 Mar 2024 00:00:00 GMT</pubDate></item><item><title>How Lisp is designing nanotechnology</title><link>https://simondobson.org/2024/03/15/how-lisp-is-designing-nanotechnology/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org3974158" class="outline-2"&gt;
&lt;h2 id="org3974158"&gt;How Lisp is designing nanotechnology&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3974158"&gt;
&lt;p&gt;
&lt;a href="https://www.youtube.com/watch?v=fytGL8vzGeQ"&gt;How Lisp is designing nanotechnology&lt;/a&gt; (video, 52 minutes).
&lt;/p&gt;

&lt;p&gt;
An interview on the &lt;a href="https://www.youtube.com/@DeveloperVoices"&gt;Developer Voices&lt;/a&gt; podcast with &lt;a href="https://www.schafmeistergroup.com/"&gt;Prof Christian
Schafmeister&lt;/a&gt; on designing enzymes using a custom dialect of Lisp
to control computational chemistry libraries.
&lt;/p&gt;

&lt;p&gt;
He initially started from an idea based on CAD applications
(written in Smalltalk), but rapidly realised there were too many
possible components and combinations to work with graphically and
so started treating it as a language-design problem – and
designed a custom Lisp based on &lt;a href="https://ecl.common-lisp.dev/"&gt;ECL&lt;/a&gt;. Lisp provides simplicity and
efficiency, as well as being a "forever" language in which
software keeps working over the long term.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>applications</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/15/how-lisp-is-designing-nanotechnology/</guid><pubDate>Fri, 15 Mar 2024 19:19:15 GMT</pubDate></item><item><title>A micro-manual for Lisp: Not the whole truth</title><link>https://simondobson.org/2024/03/15/a-micro-manual-for-lisp-not-the-whole-truth/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org4e8aef0" class="outline-2"&gt;
&lt;h2 id="org4e8aef0"&gt;A micro-manual for Lisp: Not the whole truth&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4e8aef0"&gt;
&lt;p&gt;
John McCarthy.  &lt;i&gt;&lt;a href="https://doi.org/10.1145/960118.808386"&gt;A Micro-Manual for Lisp: Not the Whole Truth&lt;/a&gt;&lt;/i&gt;. ACM
SIGPLAN Notices &lt;b&gt;13&lt;/b&gt;, pp.215–216. 1978.
&lt;/p&gt;

&lt;p&gt;
A "manual" in the sense of providing a complete implementation of
Lisp – in Lisp itself.
&lt;/p&gt;

&lt;p&gt;
Is that useful? A semantics expert would say "no", since such a
model has no real explanatory power: the recursion doesn't
bottom-out to define the concepts. However, a programming language
expert might disagree and observe that this is &lt;i&gt;meta-linguistic
abstraction&lt;/i&gt;, the use of one high-level language to capture the
definition of another. The "host" language provides a higher level
of abstraction than is usual when writing interpreters and
compilers, so it becomes easier to experiment with different forms
of "target" language as there's less low-level work to do. This
benefit exists even when host and target are the same: essentially
the target is bootstrapped and can then be adjusted while running
within an earlier version of itself.
&lt;/p&gt;

&lt;p&gt;
As far as I know this is the first example of meta-linguistic
abstraction in the computer science literature. The idea was
popularised by &lt;a href="/2024/01/27/structure-and-interpretation-of-computer-programs/"&gt;SICP&lt;/a&gt; (using Scheme), and forms the basis for a lot
of modern bootstrapped compilers.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>history</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/15/a-micro-manual-for-lisp-not-the-whole-truth/</guid><pubDate>Fri, 15 Mar 2024 17:25:10 GMT</pubDate></item><item><title>The Lisp machine</title><link>https://simondobson.org/2024/03/14/the-lisp-machine/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orgc4e369c" class="outline-2"&gt;
&lt;h2 id="orgc4e369c"&gt;The Lisp machine&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc4e369c"&gt;
&lt;p&gt;
Richard Greenblatt.  &lt;i&gt;&lt;a href="https://dspace.mit.edu/bitstream/handle/1721.1/41114/AI_WP_079.pdf"&gt;The Lisp Machine&lt;/a&gt;&lt;/i&gt;. Working
paper 79. MIT AI Laboratory. 1974.
&lt;/p&gt;

&lt;p&gt;
A description of the architecture later built and sold by LMI.
&lt;/p&gt;

&lt;p&gt;
A visionary description of a machine to run Lisp at a
"non-prohibitive cost" of $70,000 per system. (The web tells me
that this is the equivalent of &lt;a href="https://www.in2013dollars.com/us/inflation/1974?amount=70000"&gt;$440,000&lt;/a&gt; in 2024.) A completely
integrated system based on a Cons processor and using a PDP-11 as
a console. A relocating, compacting, garbage collector with
invisible forwarding pointers. Non-linear spaghetti stacks to
support advanced programming constructs.
&lt;/p&gt;

&lt;p&gt;
One of the many notable facets of this design is one of its
proposals (the "frame pushdown list") to avoid excessive conses
and garbage collection overhead by maintaining lists of blocks of
particular sizes. It uses this approach to manage the creation of
call stack frames; modern Python implementations use this scheme
throughout to avoid heap fragmentation through allocating and
re-allocating blocks of different sizes. (Lisp has this feature
generally, of course, with its use of fixed-size cons cells.)
&lt;/p&gt;

&lt;p&gt;
It's also fascinating to see that, even at this early stage,
hardware design was being seen as an exercise in refinement to
maintain software-level abstractions even as features were being
pushed into hardware – while still providing optimised
implementations that were invisible to the programmer.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>hardware</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/14/the-lisp-machine/</guid><pubDate>Thu, 14 Mar 2024 16:50:46 GMT</pubDate></item></channel></rss>