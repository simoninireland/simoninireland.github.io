<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simon Dobson</title><link>https://simondobson.org/</link><description>Aut tace aut loquere meliora silentio</description><atom:link href="https://simondobson.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:simoninireland@gmail.com"&gt;Simon Dobson&lt;/a&gt; </copyright><lastBuildDate>Mon, 04 Mar 2024 19:04:23 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>TIL: Web site carbon ratings</title><link>https://simondobson.org/2024/03/04/til-web-site-carbon-ratings/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org3d8125f" class="outline-2"&gt;
&lt;h2 id="org3d8125f"&gt;TIL: Web site carbon ratings&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3d8125f"&gt;
&lt;p&gt;
Today I learned about a site that rates web pages according to their
carbon footprints.
&lt;/p&gt;

&lt;p&gt;
My web site does well:
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://simondobson.org/attachments/16/f4bcd8-963e-40ce-9f63-be78ec585965/rating-simondobson-org.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
I'm not all that surprised by this, since I &lt;a href="/development/this-site/"&gt;use&lt;/a&gt; a static site
generator and minimal (almost no) JavaScript: basically as low-power
as one could get.
&lt;/p&gt;

&lt;p&gt;
The &lt;a href="https://www.websitecarbon.com/website/simondobson-org/"&gt;full report&lt;/a&gt; includes an approximate carbon cost per page visit
(60mg), and even tries to work out the underlying energy provision,
dirty or renewable – dirty in my case at the moment, unfortunately.
(I'm currently hosted on GitHub.) I should perhaps take the hint and
move onto an alternative provider, or even host it myself with a
solar-powered Raspberry Pi. &lt;a href="https://solar.lowtechmagazine.com/"&gt;Low-tech Magazine&lt;/a&gt; does this, but they
&lt;i&gt;are&lt;/i&gt; based in Barcelona rather than Scotland…
&lt;/p&gt;

&lt;p&gt;
You can even include a badge that reports your rating "live":
&lt;/p&gt;

&lt;div id="wcb" class="carbonbadge"&gt;&lt;/div&gt;
&lt;script src="https://unpkg.com/website-carbon-badges@1.1.3/b.min.js" defer&gt;&lt;/script&gt;

&lt;p&gt;
(It caches so as to only make one request per day.) On the other
hand this increases the JavaScript footprint slightly, so I don't
think I'll be using it anywhere apart from just here.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>til</category><guid>https://simondobson.org/2024/03/04/til-web-site-carbon-ratings/</guid><pubDate>Mon, 04 Mar 2024 18:50:35 GMT</pubDate></item><item><title>Diary of an MP's Wife: Inside and Outside Power</title><link>https://simondobson.org/goodreads/diary-of-an-mps-wife-inside-and-outside-power/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div&gt;
    &lt;div&gt;
      &lt;img src="https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1599934352l/55310315._SX98_.jpg" style="float: left; margin-right: 10px"&gt;
      &lt;h2&gt;
	Sasha Swire
      &lt;/h2&gt;
    &lt;/div&gt;
    &lt;p&gt;
      An insight into the British politics of the 2010s. And not a pretty sight.&lt;br&gt;&lt;br&gt;The pitch for this book is that, as a political wife, the author had a unique ringside seat from which to observe the goings-on the (mostly male) politicians. And it's true that she has plenty of insight into them and into her own position in the circle.&lt;br&gt;&lt;br&gt;But she also exposes herself as almost a caricature of a Tory. She accepts the misogyny and crudeness of the male MPs as just how it is, and utterly lacks any understanding of why anyone would disagree with her own positions. She can't accept, for example, that Remainers were sincere and their misgivings might be valid, or that the EU is anything other that fascinated with the idea of humiliating Britain. She constantly refers to the Labour party as "Marxists" and trots-out the usual tropes of how they would bankrupt the country, despite the fact that their "extreme left-wing" positions would be entirely mainstream in many European countries. She's clear-eyed and unenthusiastic about Boris Johnson as Prime Minister, but then fawns over him when he wins his election landslide and glides over the time-bomb he planted on the Irish border issue, even though this was evident at the time.&lt;br&gt;&lt;br&gt;The overwhelming theme, returned to again and again, is how self-interested the political class is, focused entirely on who's up, who's down, and how if affects their own careers. Lots of dinner parties, gentlemen's clubs, and holidays: one is left amazed by how shallow everyone is.&lt;br&gt;&lt;br&gt;It's not a bad book, and an enjoyably light read. But politically insightful it isn't, other than to highlight the trivial nature of politicians.
      &lt;/p&gt;&lt;p&gt;
	3/5.
	  Finished Friday 23 February, 2024.
	&lt;/p&gt;&lt;p&gt;
	  (Originally published on &lt;a href="https://www.goodreads.com/review/show/6052150109?utm_medium=api&amp;amp;utm_source=rss"&gt;Goodreads&lt;/a&gt;.)
  &lt;/p&gt;&lt;/div&gt;</description><category>bonanza</category><category>books</category><category>reviews</category><guid>https://simondobson.org/goodreads/diary-of-an-mps-wife-inside-and-outside-power/</guid><pubDate>Fri, 23 Feb 2024 00:00:00 GMT</pubDate></item><item><title>The Death of Grass</title><link>https://simondobson.org/goodreads/the-death-of-grass/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div&gt;
    &lt;div&gt;
      &lt;img src="https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1486838846l/941731._SY160_.jpg" style="float: left; margin-right: 10px"&gt;
      &lt;h2&gt;
	John Christopher
	  (1956)
      &lt;/h2&gt;
    &lt;/div&gt;
    &lt;p&gt;
      Post-apocalyptic fiction of a determinedly British kind. It's not a bad book, and has a certain complexity to it in exploring how people's attitudes might change when faced with the destruction of normal civilisation.&lt;br&gt;&lt;br&gt;A deadly virus destroys all grass-like plants, thereby eliminating almost all food crops and the cattle that they feed. Worried the government might atom-bomb the major population centres, a small group leave London to make their way to a Lake District valley. On the way they encounter looters, towns gone feral to protect themselves – and become feral themselves, willing to kill to survive. In some ways it reads like &lt;a href="https://www.goodreads.com/book/show/7624.Lord_of_the_Flies" title="Lord of the Flies by William Golding" rel="nofollow noopener"&gt;Lord of the Flies&lt;/a&gt; with adults and a more pervading sense of long-term doom.&lt;br&gt;&lt;br&gt;But it's also very much a novel of its time, full of racism, sexism, classism, deference, stiff upper lips, and a sense of self-justification wrapped-up as duty. That makes it a hard read, and it doesn't really have enough force to balance that out. Manu similar points are made elsewhere, for example in &lt;a href="https://www.goodreads.com/book/show/93269.Earth_Abides" title="Earth Abides by George R. Stewart" rel="nofollow noopener"&gt;Earth Abides&lt;/a&gt;, without the 1950s baggage.&lt;br&gt;&lt;br&gt;
      &lt;/p&gt;&lt;p&gt;
	2/5.
	  Finished Sunday 11 February, 2024.
	&lt;/p&gt;&lt;p&gt;
	  (Originally published on &lt;a href="https://www.goodreads.com/review/show/4779364492?utm_medium=api&amp;amp;utm_source=rss"&gt;Goodreads&lt;/a&gt;.)
  &lt;/p&gt;&lt;/div&gt;</description><category>books</category><category>reviews</category><guid>https://simondobson.org/goodreads/the-death-of-grass/</guid><pubDate>Sun, 11 Feb 2024 00:00:00 GMT</pubDate></item><item><title>Trying to refute some criticisms of Lisp</title><link>https://simondobson.org/2024/02/10/some-criticisms-of-lisp/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orgd98d7d7" class="outline-2"&gt;
&lt;h2 id="orgd98d7d7"&gt;Trying to refute some criticisms of Lisp&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd98d7d7"&gt;
&lt;p&gt;
I recently had a discussion with someone on Mastodon about Lisp and
its perceived (by them) deficiencies as a language. There were some
interesting points, but I felt I had to try to refute them, at least
partially.
&lt;/p&gt;

&lt;p&gt;
I should say from the start the I'm not blind to Lisp's many
inadequacies and anachronisms, merely pointing out that it has a
context like everything else.
&lt;/p&gt;

&lt;p&gt;
There seemed to be two main issues:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Poor design decisions throughout, and especially a lack of static
typing&lt;/li&gt;
&lt;li&gt;The shadows of really early machines in &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cadr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
These points are tied together, but let's try to unpack them.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org56c411b" class="outline-3"&gt;
&lt;h3 id="org56c411b"&gt;Design&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org56c411b"&gt;
&lt;p&gt;
Let's start with design. Lisp is over half a century old. I'd argue
it was exceptionally well-designed – when it was designed. It
lacks most modern advances in types because … well, they didn't
exist, many of them arose as solutions to perceived problems in
Lisp (and Fortran), and many of those "solutions" still aren't
universally accepted, such as static typing itself.
&lt;/p&gt;

&lt;p&gt;
What we've actually learned is that many aspects of programming
lack any really universal solutions. If static typing were such an
obvious and unarguable route to efficiency and quality, all new
software would be being written in Haskell.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org55c3fc3" class="outline-3"&gt;
&lt;h3 id="org55c3fc3"&gt;Typing and features&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org55c3fc3"&gt;
&lt;p&gt;
And the lack of modern types isn't really as clear-cut as it
appears. The argument about the &lt;i&gt;lack&lt;/i&gt; of features in Lisp also
ignores the &lt;i&gt;presence&lt;/i&gt; of other features that are absent from
almost all other languages.
&lt;/p&gt;

&lt;p&gt;
Lisp's numeric types are surprisingly flexible. Indeed, Common Lisp
is still, in the 21st century, just about the only language in
which one can write modern crypto algorithms like Diffie-Hellman
key exchange without recourse to additional libraries, because it
has arbitrary-precision integer arithmetic built-in to the standard
operators. It also has rational numbers, so no loss of precision on
division either.
&lt;/p&gt;

&lt;p&gt;
The Common Lisp Object System (CLOS) is vastly more flexible than
&lt;i&gt;any&lt;/i&gt; modern object-oriented language. Sub-class methods can
specify their relationship with the methods they override, such as
being called after or just filtering the return values. Methods
themselves are multiple-dispatch and so can be selected based on
the types of their arguments as well as their target. The basic
mechanisms can be overridden or extended using a meta-object
protocol.
&lt;/p&gt;

&lt;p&gt;
Then there are macros. It's easy to underestimate these: after all,
C has macros, doesn't it? Well, yes – and no. A C macro is a
function from strings to strings that can do literal string
substitution of its arguments. A Lisp macro is a function from code
to code that can perform arbitrary computation. They're really not
the same things at all, and it's misleading that the same word is
used for both. (C++ templates are a closer analogy, but still
limited in comparison.)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgf6bd10f" class="outline-3"&gt;
&lt;h3 id="orgf6bd10f"&gt;The persistence of hardware 1: Stupid operation names&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf6bd10f"&gt;
&lt;p&gt;
The complaints about &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt; are long established: they
were originally derived from &lt;a href="https://en.wikipedia.org/wiki/CAR_and_CDR"&gt;machine-language instructions on the
IBM 704&lt;/a&gt; that was used for the first Lisp implementations. They're
a terrible hold-over from that terrible decision … aren't they?
&lt;/p&gt;

&lt;p&gt;
Well, yes – and no. Of course they're terrible in one sense. But
&lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt; are basically nouns as far as Lisp programmers are
concerned. One could replace them with more modern usages like
&lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; (and indeed many Lisps define these using
macros).
&lt;/p&gt;

&lt;p&gt;
But it's important to remember that even "head" and "tail" are
analogies, sanctified by familiarity in the computer science
literature but still inexplicable to anyone outside. (If you doubt
that, try explaining to someone who isn't a programmer that a
shopping list has a "head" consisting of the first entry, and a
"tail" consisting of another, shorter, shopping list, is "in fact"
a recursive type, and you have to acquire each item of shopping
sequentially by working your way down the list from the head.)
&lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt; are artificial nouns, and &lt;code&gt;cons&lt;/code&gt; is an artificial
verb – but really no more artificial that &lt;code&gt;head&lt;/code&gt;, &lt;code&gt;tail&lt;/code&gt;, and
&lt;code&gt;append&lt;/code&gt;, their rough equivalents in other languages.
&lt;/p&gt;

&lt;p&gt;
One can argue that the persistence of &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt; drives the
persistence of compounds like &lt;code&gt;caaddr&lt;/code&gt;. But those are unnecessary
and seldom used: barely anyone would mind if they were removed.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org877de7f" class="outline-3"&gt;
&lt;h3 id="org877de7f"&gt;The persistence of hardware 2: It happens a lot&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org877de7f"&gt;
&lt;p&gt;
The suggestion that Lisp has hardware holdovers that should be
removed also neglects these holdovers in other languages.
&lt;/p&gt;

&lt;p&gt;
As an example, check the definition of &lt;code&gt;std::memcpy&lt;/code&gt; in C++. It
doesn't work with overlapping memory areas. Why is that? – why is
it so fast, but so dangerous? Does it relate to underlying machine
features, such as machine code move instructions on particular
machines with particular restrictions? Doesn't this introduce the
risk of security flaws like buffer overruns?
&lt;/p&gt;

&lt;p&gt;
Languages with more abstracted machine models don't have these
issues. I struggle to think of how one could even introduce the
&lt;i&gt;concept&lt;/i&gt; of a buffer overrun into Lisp, other than by using some
external raw-memory-access library: the language itself is immune,
as far as I know.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org96431c6" class="outline-3"&gt;
&lt;h3 id="org96431c6"&gt;The different choices&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org96431c6"&gt;
&lt;p&gt;
For the sake of argument, let's turn the argument around and ask:
give that early Lisps had proper macros, arbitrary-precision
integers, and so on, why did these features disappear from what we
now consider to be "the mainstream" of programming language design?
&lt;/p&gt;

&lt;p&gt;
Lisp's designers had a goal of building a powerful machine in which
to think: indeed, they intended it to eventually have its own
hardware designed specifically for it to run on. They therefore
didn't buy into the necessity of immediate performance, and as
their applications were largely symbolic AI they didn't need
numerical performance at all. They chose instead to create high-level
constructs even if these couldn't be compiled efficiently, and
explored using these to create more code as they identified more
and more abstract patterns whose details could be automated away.
(Paul Graham has &lt;a href="https://paulgraham.com/diff.html"&gt;a great essay&lt;/a&gt; on this.)
&lt;/p&gt;

&lt;p&gt;
Other language designers had other priorities. Often they needed to
do numerical simulation, and needed both performance and scale. So
they chose a different design pathway, emphasising efficient
compilation to the hardware they had available, and made the
compromises needed to get it. These have persisted, and that's why
we have languages with fixed-width integers scaled to fit into a
single machine register, and compilers that generate – but don't
directly execute – the code of programs, which limits our ability
to abstract and automate code generation without recourse to
complicated external tools.
&lt;/p&gt;

&lt;p&gt;
It's interesting to explore these choices. They're at one level
"just" historical: accidents that shaped the present. But at
another level they're still very much present in the hardware and
software landscape we inhabit. I think it's important that we
remind ourselves, continuously, that &lt;i&gt;much of that landscape is a
choice&lt;/i&gt;, not a given, and one we can question and change as we wish.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>lisp</category><category>programming</category><guid>https://simondobson.org/2024/02/10/some-criticisms-of-lisp/</guid><pubDate>Sat, 10 Feb 2024 17:07:48 GMT</pubDate></item><item><title>Local email from Office365 using OAUTH2 with mbsync</title><link>https://simondobson.org/2024/02/03/getting-email/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org2db2af5" class="outline-2"&gt;
&lt;h2 id="org2db2af5"&gt;Local email from Office365 using OAUTH2 with &lt;code&gt;mbsync&lt;/code&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2db2af5"&gt;
&lt;p&gt;
I decided recently I wanted to have a more controlled email setup,
with a local archive rather than relying on remote servers
to keep everything. The point of this is twofold:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;To have a local archive of email, separate from the corporate
servers in case I need to change provider etc&lt;/li&gt;
&lt;li&gt;To use different MUAs locally, rather than being stuck with only
a few that will work with all the providers and that are clunky
and not well-integrated with my workflow&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
There's a lot of outdated information on the web about how to set
this up and it took some time for me to get a working setup, so I
thought I'd share my experience. Specifically this involves
interfacing command-line email receiving and sending to a Microsoft
Office365 server using IMAP and SMTP with corporate-grade OAUTH2 2FA
authentication: it's the last part that's tricky. As a bonus the
same approach also works for OAUTH2 and Gmail, dispensing with
insecure application passwords.
&lt;/p&gt;

&lt;p&gt;
In case it's not obvious by now, this is a hacker set-up that
requires quite a lot of technical manual configuration.
&lt;/p&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgc164d4a" class="outline-3"&gt;
&lt;h3 id="orgc164d4a"&gt;How the internet email architecture works&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc164d4a"&gt;
&lt;p&gt;
The old-school approach to email involves several elements, each
potentially provided by a different tool:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;a client program or &lt;i&gt;mail user agent&lt;/i&gt; (MUA) that presents email
to you and lets you search, delete, store, etc;&lt;/li&gt;
&lt;li&gt;a retrieval program or &lt;i&gt;mail delivery agent&lt;/i&gt; (MDA) that retrieves
mail from the providers and manages local email directories&lt;/li&gt;
&lt;li&gt;a sending program or &lt;i&gt;mail transfer agent&lt;/i&gt; (MTA) that takes; and
locally-created messages and transfer them to their intended
recipients.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
Modern GUI email clients like Thunderbird typically wrap-up all
three services into one program that's easier to deploy and manage,
but that therefore forces certain choices on the user. By reverting
to the older architecture we regain flexibility and choice, at the
expense of making our lives harder.
&lt;/p&gt;

&lt;p&gt;
All these tools need to authenticate against other services.
Traditionally this used usernames and passwords, which are clearly
inadequate for the modern web. Instead we need a system based
around stronger encryption.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://en.wikipedia.org/wiki/OAuth"&gt;OAUTH2&lt;/a&gt; is a an authorisation delegation protocol that lets a site
grant access to someone who's authenticated against another,
without getting sight of their credentials. The typical use case is
for a web site to allow users to sign-in using social media
services like Facebook or Google, which reduces the number of
passwords a user needs to remember or manage – and, totally
incidentally I'm sure, improves the social media services' ability
to track users' activities across the web.
&lt;/p&gt;

&lt;p&gt;
In our case, the OAUTH2 "flow" interacts with the authentication
provider and acquires a bearer token that can then be presented to
authorise access to the various email services.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org10aa51a" class="outline-3"&gt;
&lt;h3 id="org10aa51a"&gt;Outline solution&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org10aa51a"&gt;
&lt;p&gt;
In outline the solution is as follows:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Install &lt;code&gt;mbsync&lt;/code&gt; as MDA&lt;/li&gt;
&lt;li&gt;Set up OAUTH2 authentication for Office365&lt;/li&gt;
&lt;li&gt;Use the to authenticate &lt;code&gt;mbsync&lt;/code&gt; against Office365 to allow
retrieval&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;msmtp&lt;/code&gt; as MTA, using the same authentication scheme&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;mu4e&lt;/code&gt; as MUA, since I want to read my email from inside
Emacs&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3996aef" class="outline-3"&gt;
&lt;h3 id="org3996aef"&gt;Packages&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3996aef"&gt;
&lt;p&gt;
Under Arch Linux we need the &lt;code&gt;isync&lt;/code&gt; package for synchronisation
and the &lt;code&gt;cyrus-sasl-xoauth2&lt;/code&gt; provider for OAUTH authentication.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   sudo pacman -S isync
   yay -S cyrus-sasl-xoauth2
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The same packages are available for other distros under similar
names. Note that the actual synchronisation tool is called
&lt;code&gt;mbsync&lt;/code&gt;, even though the package that contains it is called
&lt;code&gt;isync&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1678620" class="outline-3"&gt;
&lt;h3 id="org1678620"&gt;OAUTH2 flow management&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1678620"&gt;
&lt;p&gt;
We want to use OAUTH2 to authenticate an IMAP transaction, so that
no additional passwords are needed. To this we need a script to
manage the OAUTH2 flow.
&lt;/p&gt;

&lt;p&gt;
Weirdly for an operation that's becoming so common on the web,
there doesn't seem to be a package that offers OAUTH2 from the
command line. However, there &lt;i&gt;is&lt;/i&gt; a script that does it that's
included as an example with the &lt;code&gt;mutt&lt;/code&gt; MUA, and we can use that. It
can be found (in Arch) in the &lt;code&gt;mutt&lt;/code&gt; package.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   sudo pacman -S mutt
   cp /usr/share/doc/mutt/samples/mutt_oauth2.py .
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This puts a copy of the script into the current directory, which we
can then edit in two ways:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;add the internal application identification and client secrets
for accessing Office365; and&lt;/li&gt;
&lt;li&gt;set up the security for the OAUTH2 access tokens when they're
downloaded and held locally.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
The client secret and app id need to be "proper", in the sense that
Office365 knows about them – but weirdly they &lt;i&gt;don't&lt;/i&gt; have to be
related to your email domain or cloud tenancy. It's perfectly fine
to use credentials available in the public domain, for example
those of Thunderbird:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="n"&gt;AppID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"08162f7c-0fd2-4200-a84a-f25a4db0b584"&lt;/span&gt;
   &lt;span class="n"&gt;ClientSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"TxRBilcHdC6WGBee]fs?QR:SJ8nI[g82"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
(I got these from &lt;a href="https://www.dcs.gla.ac.uk/~jacobd/posts/2022/03/configure-mutt-to-work-with-oauth-20/"&gt;here&lt;/a&gt;, but other than that have no idea where
they come from: they're &lt;i&gt;not&lt;/i&gt; the same as those in the
&lt;a href="https://hg.mozilla.org/comm-central/file/tip/mailnews/base/src/OAuth2Providers.jsm"&gt;Thunderbird source code&lt;/a&gt;, as far as I can tell.)
&lt;/p&gt;

&lt;p&gt;
The &lt;code&gt;mutt_oauth2.py&lt;/code&gt; script stores the tokens it manages in a
&lt;code&gt;gpg&lt;/code&gt;-encrypted file. You therefore need to provide your &lt;code&gt;gpg&lt;/code&gt;
keypair identification, and I'm assuming anyone wanting to get
local email has one of those! Mine is "simoninireland".
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="n"&gt;GPGKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"simoninireland"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I edited the file to look like this, with some details elided:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="n"&gt;MSAppID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"08162f7c-0fd2-4200-a84a-f25a4db0b584"&lt;/span&gt;
   &lt;span class="n"&gt;MSClientSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"TxRBilcHdC6WGBee]fs?QR:SJ8nI[g82"&lt;/span&gt;
   &lt;span class="n"&gt;GPGKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"simoninireland"&lt;/span&gt;

   &lt;span class="n"&gt;ENCRYPTION_PIPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'gpg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'--encrypt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'--recipient'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GPGKey&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="n"&gt;DECRYPTION_PIPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'gpg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'--decrypt'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

   &lt;span class="n"&gt;registrations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="s1"&gt;'google'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="o"&gt;...&lt;/span&gt;
           &lt;span class="s1"&gt;'client_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="s1"&gt;'client_secret'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;},&lt;/span&gt;
       &lt;span class="s1"&gt;'microsoft'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="o"&gt;...&lt;/span&gt;
           &lt;span class="s1"&gt;'client_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MSAppID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="s1"&gt;'client_secret'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MSClientSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Put resulting script into &lt;code&gt;/usr/local/bin&lt;/code&gt; and make it executable.
Then run it in "authorisation" mode. The token file can go
anywhere: I put it in the directory used by &lt;code&gt;pass&lt;/code&gt; to allow for an
alternative access route:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mutt_oauth2.py -t .password-store/email/work.gpg --authorize
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This will ask some questions:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;we want "microsoft" authentication&lt;/li&gt;
&lt;li&gt;and a "localhostauthcode" flow&lt;/li&gt;
&lt;li&gt;enter your email address (the actual user, not any alias)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
and it prints out a URL to copy into a browser to authenticate
against Office365's web interface. In my case this involved
interacting with the university's single sign-on and two-factor
authentication (2FA) system. Doing this successfully put the
necessary OAUTH2 tokens, encrypted, into the specified file.
Running:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mutt_oauth2.py -t .password-store/email/work.gpg
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
will output the token, refreshing it automatically if it's
expired. This may ask for the GPG key's passphrase, if it has one,
and if it's not available from a local key agent.
&lt;/p&gt;

&lt;p&gt;
(All this security means that the bearer tokens are stored
encryoted at rest. It's a little inconvenient, though, as it means
you need to enter a &lt;code&gt;gpg&lt;/code&gt; passphrase periodically, and makes it
hard to run &lt;code&gt;mbsync&lt;/code&gt; in a &lt;code&gt;cron&lt;/code&gt; job. This is fine if, like me,
your level of security paranoia is such that you accept the minor
inconvenience in exchange for not having plain-text access tokens
lying around; on the other hand, you may decide that using, for
example, a machine with full-disc encryption is secure enough, in
which case you need to edit the &lt;code&gt;ENCRYPTION_PIPE&lt;/code&gt; and
&lt;code&gt;DECRYPTION_PIPE&lt;/code&gt; commands in the script to not do encryption: they
can basically just use &lt;code&gt;cat&lt;/code&gt; to store and retrieve the token information.)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc6f2fdb" class="outline-3"&gt;
&lt;h3 id="orgc6f2fdb"&gt;&lt;code&gt;mbsync&lt;/code&gt; for Office365&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc6f2fdb"&gt;
&lt;p&gt;
We now have OAUTH2 tokens for accessing Office365, which we can
integrate with our MDA. &lt;code&gt;mbsync&lt;/code&gt; has four main concepts:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Accounts, typically using IMAP&lt;/li&gt;
&lt;li&gt;IMAP message stores, which are remote&lt;/li&gt;
&lt;li&gt;Maildir stores, which are local&lt;/li&gt;
&lt;li&gt;Channels, which tie local and remote together&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
&lt;a href="https://en.wikipedia.org/wiki/Maildir"&gt;Maildir&lt;/a&gt; is a file format for storing email in a directory
structure, and is a long-running standard that's supported by lots
of tools. A maildir is typically presented in the MUA to a user as
a folder, and represented to the MDA as a directory.
&lt;/p&gt;

&lt;p&gt;
For Office365 we have:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   IMAPAccount work
   Host outlook.office365.com
   Port 993
   User &amp;lt;&amp;lt;work-email&amp;gt;&amp;gt;
   PassCmd "mutt_oauth2.py -t ~/.password-store/email/work.gpg"
   AuthMechs XOAUTH2
   SSLType IMAPS

   IMAPStore work-remote
   Account work

   MaildirStore work-local
   Subfolders Verbatim
   Path ~/Maildir/Work/
   Inbox ~/Maildir/Work/Inbox

   Channel Work
   Far :work-remote:
   Near :work-local:
   Patterns * !"Conversation History" !Calendar !Archive !Archives !Clutter !Drafts
   Create Both
   Expunge Both
   SyncState *
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
(See the &lt;code&gt;mbsync&lt;/code&gt; man pages for the details of its configuration.
&lt;code&gt;&amp;lt;&amp;lt;work-email&amp;gt;&amp;gt;&lt;/code&gt; should be a a proper username, not an alias.)
For our purposes the important line is the &lt;code&gt;PassCmd&lt;/code&gt; that calls our
edited script to retrieve the OAUTH2 bearer token. Email will be
downloaded into a maildir tree rooted at &lt;code&gt;~/Maildir/Work&lt;/code&gt;: you need
to create this before sync-ing.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mkdir -p ~/Maildir/Work
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9ca8065" class="outline-3"&gt;
&lt;h3 id="org9ca8065"&gt;Sync'ing the email&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9ca8065"&gt;
&lt;p&gt;
For a full sync of all maildirs just run:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mbsync -a
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
That can be time-consuming, as all the maildirs (&lt;i&gt;i.e.&lt;/i&gt;, folders)
have to be visited – and I have several hundred. A faster
option is to normally just look at (for example) the inbox:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mbsync Work:INBOX
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This will ignore everything else, which means they'll drift – but
can be re-sync'ed periodically by running a full sync. One could
also set up a &lt;code&gt;cron&lt;/code&gt; job to do a full sync early every morning, for
example, as long as the access token was held unencrypted (see
above).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7a295f7" class="outline-3"&gt;
&lt;h3 id="org7a295f7"&gt;Indexing email&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7a295f7"&gt;
&lt;p&gt;
You'll almost certainly now want to index your newly-downloaded
trove of messages. There are two common tools for this &lt;code&gt;mu&lt;/code&gt; and
&lt;code&gt;notmuch&lt;/code&gt;. Both do basically the same job of maintaining a
structured and full-text index of messages that can be queried by
an appropriate MUA. I chose &lt;code&gt;mu&lt;/code&gt;, for no particular reason: some
people swear by &lt;code&gt;notmuch&lt;/code&gt;, which is based on extensive tagging of
messages and so might be more familiar to Gmail users.
&lt;/p&gt;

&lt;p&gt;
To install &lt;code&gt;mu&lt;/code&gt;, we first grab the package:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   pacman -S mu
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We then initialise the index by running the indexer over the
maildir. If we also provide our own email address (or more than one) it knows to
index these differently.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mu init -m ~/Maildir --my-address=&amp;lt;&amp;lt;work-email&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4da7e8a" class="outline-3"&gt;
&lt;h3 id="org4da7e8a"&gt;Sending email&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4da7e8a"&gt;
&lt;p&gt;
All of the above sets up the MDA to &lt;i&gt;get&lt;/i&gt; mail: we now need to be
able to &lt;i&gt;send&lt;/i&gt; mail. Fortunately we've already done most of the
hard work needed to get this working.
&lt;/p&gt;

&lt;p&gt;
We need a local MTA, for which I chose &lt;code&gt;msmtp&lt;/code&gt;. It understands
OAUTH2 natively. Installation in Arch is easy:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   sudo pacman -S msmtp
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It needs to be pointed at the Office365 SMTP server and provided
with the OAUTH2 tokens, which are the same as we used above:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   defaults
   auth           on
   tls            on
   tls_starttls   on
   tls_trust_file /etc/ssl/certs/ca-certificates.crt
   logfile        ~/.msmtp.log

   account        work
   host           smtp.office365.com
   port           587
   auth           xoauth2
   user           &amp;lt;&amp;lt;work-email&amp;gt;&amp;gt;
   from           &amp;lt;&amp;lt;work-email&amp;gt;&amp;gt;
   passwordeval   "mutt_oauth2.py -t ~/.password-store/email/work.gpg"

   account default : work
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Again, see the &lt;code&gt;msmtp&lt;/code&gt; man pages for the details of this, and
replace &lt;code&gt;&amp;lt;&amp;lt;work-email&amp;gt;&amp;gt;&lt;/code&gt; as appropriate: the only interesting part
from our current perspective is that the &lt;code&gt;passwordeval&lt;/code&gt; line calls
exactly the same script as we used above.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org655c93e" class="outline-3"&gt;
&lt;h3 id="org655c93e"&gt;Reading and writing email&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org655c93e"&gt;
&lt;p&gt;
Finally we're ready to read email. I'll leave this to you: there
are lots of text-based email clients around, notably &lt;a href="http://www.mutt.org/"&gt;&lt;code&gt;mutt&lt;/code&gt;&lt;/a&gt; that we
encountered earlier. There's also &lt;a href="https://www.djcbsoftware.nl/code/mu/mu4e.html"&gt;&lt;code&gt;mu4e&lt;/code&gt;&lt;/a&gt; for reading email in
Emacs, making use of the &lt;code&gt;mu&lt;/code&gt; index; and &lt;a href="https://notmuch.readthedocs.io/en/latest/man1/notmuch.html"&gt;&lt;code&gt;notmuch&lt;/code&gt;&lt;/a&gt; also has &lt;a href="http://www.mutt.org/"&gt;an
Emacs interface&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I use &lt;code&gt;mu4e&lt;/code&gt;. There's a lot of documentation on the web for setting
this up, all of which applies immediately to our new set-up: the
MUA is entirely independent of the MDA and MTA, and simply needs to
be pointed at the right directories and accounts.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga9338a6" class="outline-3"&gt;
&lt;h3 id="orga9338a6"&gt;Accessing Gmail using OAUTH2&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga9338a6"&gt;
&lt;p&gt;
Gmail lets one use "app passwords" for accessing using IMAP, but
also supports OAUTH2, which is obviously more secure. The same
approach as above works for Gmail too. The initial credentials are:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="n"&gt;GAppID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'406964657835-aq8lmia8j95dhl1a2bvharmfk3t1hgqj.apps.googleusercontent.com'&lt;/span&gt;
   &lt;span class="n"&gt;GClientSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'kSmqreRr0qwBWJgbf5Y-PjSU'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
(&lt;a href="https://www.dcs.gla.ac.uk/~jacobd/posts/2022/03/configure-mutt-to-work-with-oauth-20/"&gt;Same source&lt;/a&gt; as above.) Edit these into the script and change the
entries in the config files to call it to authenticate with an
appropriate store, for example:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mutt_oauth2.py -t .password-store/email/personal.gpg --authorize
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and similarly in the configurations of &lt;code&gt;mbsync&lt;/code&gt; and &lt;code&gt;msmtp&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7b5169e" class="outline-3"&gt;
&lt;h3 id="org7b5169e"&gt;Conclusion&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7b5169e"&gt;
&lt;p&gt;
If you're still with me: congratulations, but you must &lt;i&gt;really&lt;/i&gt;
want to read your email old-school!
&lt;/p&gt;

&lt;p&gt;
For me, this has completely changed my relationship with email in
ways I didn't expect. Using Emacs means typically not having the
client visible all the time, which reduces the temptation to check
all the time. Instead I can adopt a more structured approach and
only check my email when I want to, which often means only three or
four times a day. It's also made email easier to manage, for
example by adding hyperlinks in my to-do list straight to messages
that need attention, and adding some integrations with org mode to
simplify email processing. Those are matters for another time,
though.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc94be80" class="outline-3"&gt;
&lt;h3 id="orgc94be80"&gt;Resources&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc94be80"&gt;
&lt;p&gt;
There are many resources on using &lt;code&gt;mbsync&lt;/code&gt;, &lt;code&gt;mu&lt;/code&gt;, &lt;code&gt;mu4e&lt;/code&gt;, and the
rest on the web. I found these covered all the topics in great
detail, with the exception of the OAUTH2 integration I've detailed
here. In particular I'd like to acknowledge the following:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://cvanelteren.github.io/post/mu4e/"&gt;Growing pains&lt;/a&gt;, Casper van Elteren's &lt;code&gt;mu4e&lt;/code&gt; setup that pointed me
in the right direction&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.macs.hw.ac.uk/~rs46/posts/2022-01-11-mu4e-oauth.html"&gt;Microsoft OAuth authentication with mu4e in Emacs&lt;/a&gt;, which uses
&lt;code&gt;offlineimap&lt;/code&gt;, a different MDA, and needs closer integration with
Microsoft Azure that often isn't possible for corporate email&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dcs.gla.ac.uk/~jacobd/posts/2022/03/configure-mutt-to-work-with-oauth-20/"&gt;Configure Mutt to work with OAuth 2.0&lt;/a&gt; that focuses on using
&lt;code&gt;mutt&lt;/code&gt; and Gmail&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>email</category><category>linux</category><category>sysadmin</category><guid>https://simondobson.org/2024/02/03/getting-email/</guid><pubDate>Sat, 03 Feb 2024 16:19:40 GMT</pubDate></item><item><title>LISPcraft</title><link>https://simondobson.org/2024/02/02/lispcraft/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org29167e9" class="outline-2"&gt;
&lt;h2 id="org29167e9"&gt;LISPcraft&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org29167e9"&gt;
&lt;p class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/fc/8f0d76-df2a-43eb-b5ca-a79b21c2351a/screenshot.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Robert Wilensky.  &lt;i&gt;LISPcraft&lt;/i&gt;. W.W. Norton. ISBN
0-393-95442-0. 1984.
&lt;/p&gt;

&lt;p&gt;
Hard to know whether to include this as an introduction or
collection of applications, since it runs all the way from basic
uses to pattern-matching and associative retrieval, by way of the
non-list data types in Lisp, and includes discussion of the symbol
table and other internals that definitely fall into the "advanced"
category.
&lt;/p&gt;

&lt;p&gt;
However, this was my second introduction to Lisp (after &lt;a href="/2024/01/27/structure-and-interpretation-of-computer-programs/"&gt;SICP&lt;/a&gt;), so
it has a fond place in my memory. The fact that it deals with
language internals isn't a bad thing, because it deals with the
basics so well. It's very much a traditional programming
introduction focusing on the "needed" parts of the language. It
pre-dates the Common Lisp standard and doesn't touch on CLOS,
which perhaps make it a less appropriate choice for newcomers
these days than &lt;a href="/2024/01/27/practical-common-lisp/"&gt;Practical Common Lisp&lt;/a&gt;.
&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;
There is also a second edition. I haven't read it, but it seems that
it addresses at least the concern about being non-standard:
&lt;/p&gt;

&lt;p&gt;
Robert Wilensky.  &lt;i&gt;Common LISPcraft&lt;/i&gt;. W.W. Norton. ISBN
978-039395544-6. 1986.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>lisp</category><category>project:lisp-bibliography</category><category>tutorial</category><guid>https://simondobson.org/2024/02/02/lispcraft/</guid><pubDate>Fri, 02 Feb 2024 12:23:08 GMT</pubDate></item><item><title>The CONNIVER reference manual</title><link>https://simondobson.org/2024/02/02/the-conniver-reference-manual/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org0fda5a5" class="outline-2"&gt;
&lt;h2 id="org0fda5a5"&gt;The CONNIVER reference manual&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0fda5a5"&gt;
&lt;p&gt;
Drew McDermott and Gerald Jay Sussman.  &lt;i&gt;&lt;a href="https://dspace.mit.edu/handle/1721.1/6204"&gt;The Conniver Reference
Manual&lt;/a&gt;&lt;/i&gt;. Technical report AIM-259a. MIT AI Laboratory. 1974.
&lt;/p&gt;

&lt;p&gt;
I think Conniver may have a claim to being the most influential
language you've never heard of. It's a mostly forgotten Lisp
variant that was a laboratory for some radically different
language design ideas, and a precursor to a surprising set of
features – many of which are still uncommon in the mainstream.
&lt;/p&gt;

&lt;p&gt;
Conniver was intended to manage knowledge databases. This does
make the report slightly hard to read in places, as there are a
lot of explicit references to planning techniques wrapped-up with
language mechanisms that don't really depend on them.
&lt;/p&gt;

&lt;p&gt;
Conniver is (to the best of my knowledge) the first appearance of
&lt;b&gt;generators&lt;/b&gt; in a programming language. It is therefore a distant
precursor of all the lazy functional languages and libraries, as
well as the generators found in Python. Implementing generators
&lt;i&gt;within&lt;/i&gt; a language (rather than as a built-in part of one)
requires control structures that can be exited and re-entered, and
therefore needs more flexible frames for controlling executing
code rather than conventional stack frames that are unwound
destructively on return.
&lt;/p&gt;

&lt;p&gt;
The obvious (for Lisp, anyway) next step is to make these "hairy"
control structures visible within the language, to allow them to
be re-arranged in interesting ways. It does this by exposing the
structure of frames, consisting of:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;the bound variables&lt;/li&gt;
&lt;li&gt;the state of the ongoing computation within the frame (&lt;i&gt;e.g.&lt;/i&gt;,
the program counter)&lt;/li&gt;
&lt;li&gt;a link (the &lt;code&gt;ALINK&lt;/code&gt;) to the frame within which free variables
should be looked-up&lt;/li&gt;
&lt;li&gt;a link (the &lt;code&gt;CLINK&lt;/code&gt;) to the frame to which control should return
on exit from the frame&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
This structure in turn mandates the use of &lt;b&gt;spaghetti stack&lt;/b&gt; (or
&lt;a href="https://en.wikipedia.org/wiki/Parent_pointer_tree"&gt;parent pointer trees&lt;/a&gt;) where frames are implemented using lists
that can be combined in richer ways than actual, literal stacks.
Thee are the underpinnings of several different common structures:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;generators and continuations&lt;/li&gt;
&lt;li&gt;closures&lt;/li&gt;
&lt;li&gt;non-local transfers, like &lt;code&gt;CATCH&lt;/code&gt; and &lt;code&gt;THROW&lt;/code&gt; in Common Lisp, and
therefore probably encompassing the entire condition system&lt;/li&gt;
&lt;li&gt;functions with access to extra state (as with object methods,
but in this case used as callbacks for database updates)&lt;/li&gt;
&lt;li&gt;symbolic debuggers (not mentioned in the text)&lt;/li&gt;
&lt;li&gt;lexical &lt;i&gt;versus&lt;/i&gt; dynamic variable scope (not mentioned in the
text, and I think it's a binary choice between one or the other
depending on the &lt;code&gt;ALINK&lt;/code&gt;, rather than accommodating lexical and
"special" variable classes as Common Lisp does)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
So these features are constructed in Conniver from more basic
mechanisms rather than being provided built-in. I'm fascinated by
what other structures one might build when every frame has &lt;i&gt;two&lt;/i&gt;
independent super-frames (one for variable lookup,one for control
return) instead of one, and both can be modified independently.
This is radically different to most languages in which frames are
hidden and their manipulation reserved for the compiler and
run-time: it's a set of ideas that re-surface at the object level
in metaobject protocols.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>language-reference</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/02/02/the-conniver-reference-manual/</guid><pubDate>Fri, 02 Feb 2024 12:14:30 GMT</pubDate></item><item><title>Common Lisp: the language</title><link>https://simondobson.org/2024/02/02/common-lisp-the-language/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orge0d8015" class="outline-2"&gt;
&lt;h2 id="orge0d8015"&gt;Common Lisp: the language&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge0d8015"&gt;
&lt;p class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/20/46d76e-4b50-4cf1-866c-7515d6fd427f/screenshot.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Guy Steele.  &lt;i&gt;&lt;a href="http://www.cs.cmu.edu/Groups/AI/html/cltl/cltl2.html"&gt;Common Lisp: The Language&lt;/a&gt;&lt;/i&gt;. Digital Press. ISBN
1-55558-041-6. 1990.
&lt;/p&gt;

&lt;p&gt;
The reference manual for Common Lisp, also &lt;a href="http://www.cs.cmu.edu/Groups/AI/html/cltl/cltl2.html"&gt;available online in its
entirety&lt;/a&gt;. This is very much a reference manual and not a
tutorial, but having said that it's a lot more accessible than
many such documents.
&lt;/p&gt;

&lt;p&gt;
It's remarkable that Common Lisp's standard has been stable for
over thirty years, despite enormous advances in Lisp practices in
that time. It shows the care that went into the original
standardisation process, but also the effects of some detailed
technical choices and (especially) the use of macros in preference
to new core mechanisms.
&lt;/p&gt;

&lt;p&gt;
However, it has to be said that the standard also fixed in place
certain choices that now seem questionable. It's a matter of
opinion, of course, but personally I think the questionable set
includes at least: multiple-value returns and binds, which are
unnecessary when you can return lists and destructure them and
that impinge on the minimalism of the core language; and allowing
symbols to be bound simultaneously to values and functions, which
unnecessarily treats the two differently (and for which reason it
was removed from Scheme).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>language-reference</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/02/02/common-lisp-the-language/</guid><pubDate>Fri, 02 Feb 2024 12:10:26 GMT</pubDate></item><item><title>Structure and interpretation of computer programs</title><link>https://simondobson.org/2024/01/27/structure-and-interpretation-of-computer-programs/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org0638c56" class="outline-2"&gt;
&lt;h2 id="org0638c56"&gt;Structure and interpretation of computer programs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0638c56"&gt;
&lt;p class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/52/6b5639-18fe-4fc6-b8b1-7c93e3011194/screenshot.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Harold Abelson and Gerald Jay Sussman.  &lt;i&gt;&lt;a href="https://web.mit.edu/6.001/6.037/sicp.pdf"&gt;Structure and
Interpretation of Computer Programs&lt;/a&gt;&lt;/i&gt;. MIT Press. 1985.
&lt;/p&gt;

&lt;p&gt;
A book once described (&lt;a href="https://simondobson.org/2010/05/14/cs-book-worth-reading-twice/"&gt;by me&lt;/a&gt;, actually) as "the only computer
science book worth reading twice", and which was the foundational
text for teaching programming at MIT for decades.
&lt;/p&gt;

&lt;p&gt;
There are many reasons that this book is so popular and
long-lived. It's resolutely an introductory text, but it treats
topics that are uncommon in introductions, and does so to a depth
that's quite astonishing – although it has to be said that the
authors avoid the more complex constructions like conditions and
the complexities of macros, (They do deal with continuations,
however, which are essential for good Scheme programming.)
&lt;/p&gt;

&lt;p&gt;
But what other introduction to programming includes a complete
meta-linguistic re-implementation of the language itself? – and
in two different styles! It can do this because Scheme is so
regular and so simple – &lt;i&gt;homoiconic&lt;/i&gt; (one representation for
programs and data), (although they don't use that term).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>advanced-tutorial</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/01/27/structure-and-interpretation-of-computer-programs/</guid><pubDate>Sat, 27 Jan 2024 15:46:19 GMT</pubDate></item><item><title>Learn Common Lisp in Y minutes</title><link>https://simondobson.org/2024/01/27/learn-common-lisp-in-y-minutes/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org1e4659c" class="outline-2"&gt;
&lt;h2 id="org1e4659c"&gt;Learn Common Lisp in Y minutes&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1e4659c"&gt;
&lt;p&gt;
&lt;a href="https://learnxinyminutes.com/docs/common-lisp/"&gt;https://learnxinyminutes.com/docs/common-lisp/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
A one-web-page introduction to Common Lisp covering pretty much
all the language in enough detail to at least start writing simple
command-line programs (and understanding those of others).
Includes macros and CLOS. Quite an achievement to make it all so
readable.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>lisp</category><category>project:lisp-bibliography</category><category>tutorial</category><guid>https://simondobson.org/2024/01/27/learn-common-lisp-in-y-minutes/</guid><pubDate>Sat, 27 Jan 2024 14:14:35 GMT</pubDate></item></channel></rss>