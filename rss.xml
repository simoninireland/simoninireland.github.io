<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simon Dobson</title><link>https://simondobson.org/</link><description>Aut tace aut loquere meliora silentio</description><atom:link href="https://simondobson.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:simoninireland@gmail.com"&gt;Simon Dobson&lt;/a&gt; </copyright><lastBuildDate>Tue, 12 Mar 2024 17:51:44 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Lisp for the web</title><link>https://simondobson.org/2024/03/10/lisp-for-the-web/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org8cbb477" class="outline-2"&gt;
&lt;h2 id="org8cbb477"&gt;Lisp for the web&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8cbb477"&gt;
&lt;p&gt;
Adam Tornhill.  &lt;i&gt;&lt;a href="http://leanpub.com/lispweb"&gt;Lisp for the Web&lt;/a&gt;&lt;/i&gt;. Leanpub. 2015.
&lt;/p&gt;

&lt;p&gt;
A short, practical guide to build a dynamic web site entirely
using Common Lisp. Makes extensive use of several libraries,
including the intriguingly-named &lt;a href="https://edicl.github.io/hunchentoot/"&gt;hunchentoot&lt;/a&gt; web server (named
after a never-staged musical written by Frank Zappa), the &lt;a href="https://edicl.github.io/cl-who/"&gt;CL-WHO&lt;/a&gt;
HTML generator, and – perhaps most interesting – the &lt;a href="https://cliki.net/Parenscript"&gt;Parenscript&lt;/a&gt;
Lisp to Javascript compiler.
&lt;/p&gt;

&lt;p&gt;
One gain from using Lisp is the ability to wrap-up standard
constructions like page templates as macros. Other than this, it's
hard to assess whether the gains are all that significant. One
interesting point is that the whole development occurs in Lisp, so
there's no cognitive dissonance between writing the back-end and
the front-end: essentially the same argument for using &lt;a href="https://nodejs.org/"&gt;node.js&lt;/a&gt; as
a back-end framework. While Parenscript isn't a fully-featured
Lisp-in-the-browser it again can benefit from macros and other
features. There's a throwaway comment about linking it to &lt;a href="https://jquery.com/"&gt;jQuery&lt;/a&gt;,
although that isn't demonstrated in practice: it feels intriguing,
though, especially if there's a way to represent jQuery
functionality idiomatically in Lisp.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>applications</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/10/lisp-for-the-web/</guid><pubDate>Sun, 10 Mar 2024 10:28:45 GMT</pubDate></item><item><title>List processing</title><link>https://simondobson.org/2024/03/07/list-processing/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orge901cfd" class="outline-2"&gt;
&lt;h2 id="orge901cfd"&gt;List processing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge901cfd"&gt;
&lt;p&gt;
J.M. Foster.  &lt;i&gt;List Processing&lt;/i&gt;. Macdonald and Co. 1967.
&lt;/p&gt;

&lt;p&gt;
A slim volume discussing list processing with reference to Lisp
and to other list processing systems of the time (including some
libraries embedded into Fortran).
&lt;/p&gt;

&lt;p&gt;
The most fascinating part of the book is its bibliography, which
references a lot of papers that have disappeared from the
collective memory of computer science, but whose implications
were profound.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>history</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/07/list-processing/</guid><pubDate>Thu, 07 Mar 2024 19:39:09 GMT</pubDate></item><item><title>Recursive functions of symbolic expressions and their computation by machine, Part I</title><link>https://simondobson.org/2024/03/07/recursive-functions-of-symbolic-expressions-and-their-computation-by-machine-part-i/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org59665c6" class="outline-2"&gt;
&lt;h2 id="org59665c6"&gt;Recursive functions of symbolic expressions and their computation by machine, Part I&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org59665c6"&gt;
&lt;p&gt;
John McCarthy.  &lt;i&gt;&lt;a href="https://doi.org/10.1145/367177.367199"&gt;Recursive Functions of Symbolic Expressions and
Their Computation by Machine, Part I&lt;/a&gt;&lt;/i&gt;. Communications of the ACM
&lt;b&gt;3&lt;/b&gt;, pp.184–195. 1960.
&lt;/p&gt;

&lt;p&gt;
The original Lisp paper from 1960, which opens:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
A programming system called LISP (for LISt Processor) has been
developed for the IBM 704 computer…
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The paper then proceeds to lay out everything that's since been
built on: the basic constructs, the use of cons cells (pairs) as a
data representation, the world's first garbage collection algorithm,
an equational semantics, and ideas for interpretation and
compilation. It's awesome, and humbling to read it and realise its
age and the vision of computing it developed.
&lt;/p&gt;

&lt;p&gt;
(Despite this paper being labelled Part I, incidentally, there
isn't a part II.)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>history</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/07/recursive-functions-of-symbolic-expressions-and-their-computation-by-machine-part-i/</guid><pubDate>Thu, 07 Mar 2024 19:34:45 GMT</pubDate></item><item><title>Paradigms of artificial intelligence programming: Case studies in Common Lisp</title><link>https://simondobson.org/2024/03/07/paradigms-of-artificial-intelligence-programming-case-studies-in-common-lisp/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orgca14d34" class="outline-2"&gt;
&lt;h2 id="orgca14d34"&gt;Paradigms of artificial intelligence programming: Case studies in Common Lisp&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgca14d34"&gt;
&lt;p class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/55/a8fc4d-075e-4914-90ea-c2bcc0021821/screenshot.png" alt="nil"&gt;
&lt;/p&gt;


&lt;p&gt;
Peter Norvig.  &lt;i&gt;&lt;a href="https://norvig.github.io/paip-lisp/"&gt;Paradigms of Artificial Intelligence Programming:
Case Studies in Common Lisp&lt;/a&gt;&lt;/i&gt;. Morgan Kaufmann. 1992.
&lt;/p&gt;

&lt;p&gt;
An absolute classic of both AI and Lisp, and really two books in
one. The applications presented cover the entire range of
"classic" AI up to the late 90s: expert systems, logic
programming, symbolic mathematics, knowledge representation,
constraint programming, game search, syntax-driven natural
language processing, and more.
&lt;/p&gt;

&lt;p&gt;
It uses Lisp as the programming vehicle, and doesn't shy-away from
depth, dealing with the effects of garbage collection (and how to
program effectively in its presence), the effects of different
representations, low-level optimisation and disassembly, and all
the approaches one needs to use Lisp in real, scalable practice.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>advanced-tutorial</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/07/paradigms-of-artificial-intelligence-programming-case-studies-in-common-lisp/</guid><pubDate>Thu, 07 Mar 2024 19:07:31 GMT</pubDate></item><item><title>Common Lisp recipes: A problem-solution approach</title><link>https://simondobson.org/2024/03/06/common-lisp-recipes-a-problem-solution-approach/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org89dc61a" class="outline-2"&gt;
&lt;h2 id="org89dc61a"&gt;Common Lisp recipes: A problem-solution approach&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org89dc61a"&gt;
&lt;p class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/2e/6e47a1-73a8-4ac5-a703-1f6ab0a2262b/screenshot.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Edmund Weitz.  &lt;i&gt;&lt;a href="https://doi.org/10.1007/978-1-4842-1176-2"&gt;Common Lisp Recipes: A Problem-Solution Approach&lt;/a&gt;&lt;/i&gt;.
Apress. 2016.
&lt;/p&gt;

&lt;p&gt;
An extensive list of recipes for using common data structures,
how the differ in Lisp from the equivalents in other languages,
and what novel features Lisp has to offer. A great place to start
when moving away from being a beginner, and for dipping into in
search of solutions.
&lt;/p&gt;

&lt;p&gt;
It's probably strongest on the "gotchas" and dangers that Lisp
presents, but also has a lot to say about coding style and code
optimisation.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>advanced-tutorial</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/06/common-lisp-recipes-a-problem-solution-approach/</guid><pubDate>Wed, 06 Mar 2024 18:55:31 GMT</pubDate></item><item><title>The Common Lisp condition system</title><link>https://simondobson.org/2024/03/06/the-common-lisp-condition-system/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org73023d1" class="outline-2"&gt;
&lt;h2 id="org73023d1"&gt;The Common Lisp condition system&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org73023d1"&gt;
&lt;p class="floater"&gt;
&lt;img src="https://simondobson.org/attachments/06/efe121-b8ab-4558-a705-733fbbe7b1f9/978-1-4842-6134-7.webp" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Michał "phoe" Herda.  &lt;i&gt;&lt;a href="https://doi.org/10.1007/978-1-4842-6134-7"&gt;The Common Lisp Condition System&lt;/a&gt;&lt;/i&gt;. Apress. 2020.
&lt;/p&gt;

&lt;p&gt;
An enormously detailed look at the condition system, sometimes
regarded as the Lisp equivalent of exception-handling in other
languages.
&lt;/p&gt;

&lt;p&gt;
But that's massively unfair to the condition system, which is
really a way to deal with non-local transfers of control in the
most flexible way possible. Exceptions are &lt;i&gt;just one type&lt;/i&gt; of
this, and the condition system aims to separate three aspects that
are often combined in other languages: detecting and signalling a
condition, responding to a condition, and deciding on the binding
between the two, possibly combining responses differently in
different contexts. It's a set of concepts that are in many ways
foreign to a lot of other languages, and so justify the detail for
those occasions when these techniques are appropriate: deciding
&lt;i&gt;when&lt;/i&gt; they are appropriate is non-trivial, a matter of both
functionality and style.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>advanced-tutorial</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/06/the-common-lisp-condition-system/</guid><pubDate>Wed, 06 Mar 2024 18:46:57 GMT</pubDate></item><item><title>Anatomy of Lisp</title><link>https://simondobson.org/2024/03/06/anatomy-of-lisp/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-orgfe57785" class="outline-2"&gt;
&lt;h2 id="orgfe57785"&gt;Anatomy of Lisp&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfe57785"&gt;
&lt;p&gt;
John Allen.  &lt;i&gt;Anatomy of Lisp&lt;/i&gt;. McGraw-Hill. ISBN
0-07-001115-X. 1978.
&lt;/p&gt;

&lt;p&gt;
This is a hard book to characterise. It's simultaneously an
introduction, a collection of advanced (for the time) programming
techniques, and a guide to some very low-level implementation
details. It contains a lot of the usual introductory material, but
then delves into different representational choices for the basic
data structures – lists, but also arrays and hash tables as well
as Lisp code itself – and for the frames needed to represent
function calls. It the tackles interpretation &lt;i&gt;versus&lt;/i&gt;
compilation, and even topics such as cross-compilation and
just-in-time or memoised compilation.
&lt;/p&gt;

&lt;p&gt;
It's impossible to read this book without thinking of &lt;a href="/2024/01/27/structure-and-interpretation-of-computer-programs/"&gt;SICP&lt;/a&gt;, and
indeed I think in many ways it's a direct precursor. (It's
referenced a couple of times in SICP.) It has that same
combination of high-level, semantics-driven programming combined
with descriptions of underlying mechanisms. Where I think it
mainly differs is that it mixes representations, using a more
semantics-driven notation and explicit assembler instructions
rather than sticking with Lisp variants for &lt;i&gt;everything&lt;/i&gt;. It's
only when you see the two approaches side by side that you realise
how &lt;i&gt;clear&lt;/i&gt; Lisp can be in radically different contexts..
&lt;/p&gt;

&lt;p&gt;
Another important book was published in 1978: Kernighan and
Ritchie's &lt;i&gt;&lt;a href="https://en.wikipedia.org/wiki/The_C_Programming_Language"&gt;The C programming language&lt;/a&gt;&lt;/i&gt;. The two books share a
certain low-level focus, but come to very different conclusions
about the correct approach to dynamic storage, as the following
footnote by Allen (slightly edited for clarity) illustrates:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Experiments have been performed in which Lisp programmers were
allowed to return "garbage" to the free-space list themselves. The
results were disastrous: list structure thought to be garbage was
returned to the free-space list even though the structure was
still being used by other computations.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
C, of course, accepts this "disaster" as a natural consequence of
manual allocation management. It encapsulates the different
attitudes of the two contemporary language communities, though:
one wanting a machine in which to think (and willing to use
computing power to simplify tasks), and those wanting raw
performance from limited hardware (and willing to complicate the
programming task to get it).
&lt;/p&gt;

&lt;p&gt;
Overall, Allen's book is a great attempt at an end-to-end
discussion of Lisp all the way down to the metal. Many of the
techniques are still relevant, at least as exemplars against
later, more efficient, techniques should be judged.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>implementation-techiques</category><category>lisp</category><category>project:lisp-bibliography</category><guid>https://simondobson.org/2024/03/06/anatomy-of-lisp/</guid><pubDate>Wed, 06 Mar 2024 18:38:17 GMT</pubDate></item><item><title>TIL: Web site carbon ratings</title><link>https://simondobson.org/2024/03/04/til-web-site-carbon-ratings/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div id="outline-container-org89eb51d" class="outline-2"&gt;
&lt;h2 id="org89eb51d"&gt;TIL: Web site carbon ratings&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org89eb51d"&gt;
&lt;p&gt;
Today I learned about a site that rates web pages according to their
carbon footprints.
&lt;/p&gt;

&lt;p&gt;
My web site does well:
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://simondobson.org/attachments/16/f4bcd8-963e-40ce-9f63-be78ec585965/rating-simondobson-org.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
I'm not all that surprised by this, since I &lt;a href="/development/this-site/"&gt;use&lt;/a&gt; a static site
generator and minimal (almost no) JavaScript: basically as low-power
as one could get.
&lt;/p&gt;

&lt;p&gt;
The &lt;a href="https://www.websitecarbon.com/website/simondobson-org/"&gt;full report&lt;/a&gt; includes an approximate carbon cost per page visit
(60mg), and even tries to work out the underlying energy provision,
dirty or renewable – dirty in my case at the moment, unfortunately.
(I'm currently hosted on GitHub.) I should perhaps take the hint and
move onto an alternative provider, or even host it myself with a
solar-powered Raspberry Pi. &lt;a href="https://solar.lowtechmagazine.com/"&gt;Low-tech Magazine&lt;/a&gt; does this, but they
&lt;i&gt;are&lt;/i&gt; based in Barcelona rather than Scotland…
&lt;/p&gt;

&lt;p&gt;
You can even include a badge that reports your rating "live":
&lt;/p&gt;

&lt;div id="wcb" class="carbonbadge"&gt;&lt;/div&gt;
&lt;script src="https://unpkg.com/website-carbon-badges@1.1.3/b.min.js" defer&gt;&lt;/script&gt;

&lt;p&gt;
(It caches so as to only make one request per day.) On the other
hand this increases the JavaScript footprint slightly, so I don't
think I'll be using it anywhere apart from just here.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>til</category><guid>https://simondobson.org/2024/03/04/til-web-site-carbon-ratings/</guid><pubDate>Mon, 04 Mar 2024 18:50:35 GMT</pubDate></item><item><title>Diary of an MP's Wife: Inside and Outside Power</title><link>https://simondobson.org/goodreads/diary-of-an-mps-wife-inside-and-outside-power/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div&gt;
    &lt;div&gt;
      &lt;img src="https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1599934352l/55310315._SX98_.jpg" style="float: left; margin-right: 10px"&gt;
      &lt;h2&gt;
	Sasha Swire
      &lt;/h2&gt;
    &lt;/div&gt;
    &lt;p&gt;
      An insight into the British politics of the 2010s. And not a pretty sight.&lt;br&gt;&lt;br&gt;The pitch for this book is that, as a political wife, the author had a unique ringside seat from which to observe the goings-on the (mostly male) politicians. And it's true that she has plenty of insight into them and into her own position in the circle.&lt;br&gt;&lt;br&gt;But she also exposes herself as almost a caricature of a Tory. She accepts the misogyny and crudeness of the male MPs as just how it is, and utterly lacks any understanding of why anyone would disagree with her own positions. She can't accept, for example, that Remainers were sincere and their misgivings might be valid, or that the EU is anything other that fascinated with the idea of humiliating Britain. She constantly refers to the Labour party as "Marxists" and trots-out the usual tropes of how they would bankrupt the country, despite the fact that their "extreme left-wing" positions would be entirely mainstream in many European countries. She's clear-eyed and unenthusiastic about Boris Johnson as Prime Minister, but then fawns over him when he wins his election landslide and glides over the time-bomb he planted on the Irish border issue, even though this was evident at the time.&lt;br&gt;&lt;br&gt;The overwhelming theme, returned to again and again, is how self-interested the political class is, focused entirely on who's up, who's down, and how if affects their own careers. Lots of dinner parties, gentlemen's clubs, and holidays: one is left amazed by how shallow everyone is.&lt;br&gt;&lt;br&gt;It's not a bad book, and an enjoyably light read. But politically insightful it isn't, other than to highlight the trivial nature of politicians.
      &lt;/p&gt;&lt;p&gt;
	3/5.
	  Finished Friday 23 February, 2024.
	&lt;/p&gt;&lt;p&gt;
	  (Originally published on &lt;a href="https://www.goodreads.com/review/show/6052150109?utm_medium=api&amp;amp;utm_source=rss"&gt;Goodreads&lt;/a&gt;.)
  &lt;/p&gt;&lt;/div&gt;</description><category>bonanza</category><category>books</category><category>reviews</category><guid>https://simondobson.org/goodreads/diary-of-an-mps-wife-inside-and-outside-power/</guid><pubDate>Fri, 23 Feb 2024 00:00:00 GMT</pubDate></item><item><title>The Death of Grass</title><link>https://simondobson.org/goodreads/the-death-of-grass/</link><dc:creator>Simon Dobson</dc:creator><description>&lt;div&gt;
    &lt;div&gt;
      &lt;img src="https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1486838846l/941731._SY160_.jpg" style="float: left; margin-right: 10px"&gt;
      &lt;h2&gt;
	John Christopher
	  (1956)
      &lt;/h2&gt;
    &lt;/div&gt;
    &lt;p&gt;
      Post-apocalyptic fiction of a determinedly British kind. It's not a bad book, and has a certain complexity to it in exploring how people's attitudes might change when faced with the destruction of normal civilisation.&lt;br&gt;&lt;br&gt;A deadly virus destroys all grass-like plants, thereby eliminating almost all food crops and the cattle that they feed. Worried the government might atom-bomb the major population centres, a small group leave London to make their way to a Lake District valley. On the way they encounter looters, towns gone feral to protect themselves – and become feral themselves, willing to kill to survive. In some ways it reads like &lt;a href="https://www.goodreads.com/book/show/7624.Lord_of_the_Flies" title="Lord of the Flies by William Golding" rel="nofollow noopener"&gt;Lord of the Flies&lt;/a&gt; with adults and a more pervading sense of long-term doom.&lt;br&gt;&lt;br&gt;But it's also very much a novel of its time, full of racism, sexism, classism, deference, stiff upper lips, and a sense of self-justification wrapped-up as duty. That makes it a hard read, and it doesn't really have enough force to balance that out. Manu similar points are made elsewhere, for example in &lt;a href="https://www.goodreads.com/book/show/93269.Earth_Abides" title="Earth Abides by George R. Stewart" rel="nofollow noopener"&gt;Earth Abides&lt;/a&gt;, without the 1950s baggage.&lt;br&gt;&lt;br&gt;
      &lt;/p&gt;&lt;p&gt;
	2/5.
	  Finished Sunday 11 February, 2024.
	&lt;/p&gt;&lt;p&gt;
	  (Originally published on &lt;a href="https://www.goodreads.com/review/show/4779364492?utm_medium=api&amp;amp;utm_source=rss"&gt;Goodreads&lt;/a&gt;.)
  &lt;/p&gt;&lt;/div&gt;</description><category>books</category><category>reviews</category><guid>https://simondobson.org/goodreads/the-death-of-grass/</guid><pubDate>Sun, 11 Feb 2024 00:00:00 GMT</pubDate></item></channel></rss>